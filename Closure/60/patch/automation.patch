diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 1677ed68..e5a1bc47 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -99,6 +99,60 @@ public final class NodeUtil {
     }
   }
 
+  /**
+   * Gets the boolean value of a node that represents a literal. This method
+   * effectively emulates the <code>Boolean()</code> JavaScript cast function
+   * except it return UNKNOWN for known values with side-effects, use
+   * getExpressionBooleanValue if you don't care about side-effects.
+   */
+  static TernaryValue getPureBooleanValue(Node n) {
+    switch (n.getType()) {
+      case Token.STRING:
+        return TernaryValue.forBoolean(n.getString().length() > 0);
+
+      case Token.NUMBER:
+        return TernaryValue.forBoolean(n.getDouble() != 0);
+
+      case Token.NOT:
+        return getPureBooleanValue(n.getLastChild()).not();
+
+      case Token.NULL:
+      case Token.FALSE:
+        return TernaryValue.FALSE;
+
+      case Token.VOID:
+        if (!mayHaveSideEffects(n.getFirstChild())) {
+          return TernaryValue.FALSE;
+        }
+        break;
+
+      case Token.NAME:
+        String name = n.getString();
+        if ("undefined".equals(name)
+            || "NaN".equals(name)) {
+          // We assume here that programs don't change the value of the keyword
+          // undefined to something other than the value undefined.
+          return TernaryValue.FALSE;
+        } else if ("Infinity".equals(name)) {
+          return TernaryValue.TRUE;
+        }
+        break;
+
+      case Token.TRUE:
+      case Token.REGEXP:
+        return TernaryValue.TRUE;
+
+      case Token.ARRAYLIT:
+      case Token.OBJECTLIT:
+        if (!mayHaveSideEffects(n)) {
+          return TernaryValue.TRUE;
+        }
+        break;
+    }
+
+    return TernaryValue.UNKNOWN;
+  }
+
   /**
    * Gets the boolean value of a node that represents a literal. This method
    * effectively emulates the <code>Boolean()</code> JavaScript cast function.
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index f4cbb796..cda81791 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -535,6 +535,10 @@ public class CommandLineRunnerTest extends TestCase {
   private void test(String original, DiagnosticType warning) {
     test(new String[] { original }, warning);
   }
+  
+  private void test(String original, String expected, DiagnosticType warning) {
+    test(new String[] { original }, new String[] { expected }, warning);
+  }
 
   /**
    * Asserts that when compiling, there is an error or warning.
@@ -633,4 +637,9 @@ public class CommandLineRunnerTest extends TestCase {
     Node n = all.getLastChild();
     return n;
   }
+
+  public void testIssue504() {
+    args.add("--compilation_level=ADVANCED_OPTIMIZATIONS");
+    test("void function() { alert('hi'); }();", "alert('hi');", CheckSideEffects.USELESS_CODE_ERROR);
+  }
 }
diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
index 345bf64e..7ad8a4bc 100644
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -83,24 +83,6 @@ public class NodeUtilTest extends TestCase {
     assertFalse(NodeUtil.isImmutableValue(n));
   }
 
-  public void testGetBooleanValue() {
-    assertBooleanTrue("true");
-    assertBooleanTrue("10");
-    assertBooleanTrue("'0'");
-    assertBooleanTrue("/a/");
-    assertBooleanTrue("{}");
-    assertBooleanTrue("[]");
-    assertBooleanFalse("false");
-    assertBooleanFalse("null");
-    assertBooleanFalse("0");
-    assertBooleanFalse("''");
-    assertBooleanFalse("undefined");
-    assertBooleanFalse("void 0");
-    assertBooleanFalse("void foo()");
-    assertBooleanUnknown("b");
-    assertBooleanUnknown("-'0.0'");
-  }
-
   private void assertBooleanTrue(String val) {
     assertEquals(TernaryValue.TRUE, NodeUtil.getBooleanValue(getNode(val)));
   }
@@ -958,4 +940,40 @@ public class NodeUtilTest extends TestCase {
     assertFalse(secondBreak.hasChildren());
     assertFalse(NodeUtil.isLabelName(secondBreak.getFirstChild()));
   }
+
+  public void testGetBooleanValue() {
+    assertPureBooleanTrue("true");
+    assertPureBooleanTrue("10");
+    assertPureBooleanTrue("'0'");
+    assertPureBooleanTrue("/a/");
+    assertPureBooleanTrue("{}");
+    assertPureBooleanTrue("[]");
+    assertPureBooleanFalse("false");
+    assertPureBooleanFalse("null");
+    assertPureBooleanFalse("0");
+    assertPureBooleanFalse("''");
+    assertPureBooleanFalse("undefined");
+    assertPureBooleanFalse("void 0");
+    assertPureBooleanUnknown("void foo()");
+    assertPureBooleanUnknown("b");
+    assertPureBooleanUnknown("-'0.0'");
+    // Known but getBooleanValue return false for expressions with side-effects
+    assertPureBooleanUnknown("{a:foo()}");
+    assertPureBooleanUnknown("[foo()]");
+  }
+
+  
+  private void assertPureBooleanTrue(String val) {
+    assertEquals(TernaryValue.TRUE, NodeUtil.getPureBooleanValue(getNode(val)));
+  }
+
+  private void assertPureBooleanFalse(String val) {
+    assertEquals(
+        TernaryValue.FALSE, NodeUtil.getPureBooleanValue(getNode(val)));
+  }
+
+  private void assertPureBooleanUnknown(String val) {
+    assertEquals(
+        TernaryValue.UNKNOWN, NodeUtil.getPureBooleanValue(getNode(val)));
+  }
 }
