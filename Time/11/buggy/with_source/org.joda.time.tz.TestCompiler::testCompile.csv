bug,class,method,line,path,line_source
11,org.joda.time.Chronology,<init>,63,/JodaTime/src/main/java/org/joda/time/Chronology.java,public abstract class Chronology {
11,org.joda.time.DateTime,<init>,168,/JodaTime/src/main/java/org/joda/time/DateTime.java,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
11,org.joda.time.DateTime,<init>,169,/JodaTime/src/main/java/org/joda/time/DateTime.java,"* @param chronology  the chronology, null means ISOChronology in default zone"
11,org.joda.time.DateTimeField,<init>,33,/JodaTime/src/main/java/org/joda/time/DateTimeField.java,public abstract class DateTimeField {
11,org.joda.time.DateTimeFieldType,<clinit>,72,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,75,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,78,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,81,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,84,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,87,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,90,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,93,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,96,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,99,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,102,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,105,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,109,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,112,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,115,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,118,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,121,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,124,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,127,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,130,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,133,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,136,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<clinit>,139,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(
11,org.joda.time.DateTimeFieldType,<init>,152,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,super();
11,org.joda.time.DateTimeFieldType,<init>,153,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,iName = name;
11,org.joda.time.DateTimeFieldType,<init>,154,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,}
11,org.joda.time.DateTimeFieldType,centuryOfEra,353,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return CENTURY_OF_ERA_TYPE;
11,org.joda.time.DateTimeFieldType,clockhourOfDay,226,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return CLOCKHOUR_OF_DAY_TYPE;
11,org.joda.time.DateTimeFieldType,clockhourOfHalfday,244,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return CLOCKHOUR_OF_HALFDAY_TYPE;
11,org.joda.time.DateTimeFieldType,dayOfMonth,272,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return DAY_OF_MONTH_TYPE;
11,org.joda.time.DateTimeFieldType,dayOfWeek,263,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return DAY_OF_WEEK_TYPE;
11,org.joda.time.DateTimeFieldType,dayOfYear,281,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return DAY_OF_YEAR_TYPE;
11,org.joda.time.DateTimeFieldType,era,362,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return ERA_TYPE;
11,org.joda.time.DateTimeFieldType,halfdayOfDay,253,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return HALFDAY_OF_DAY_TYPE;
11,org.joda.time.DateTimeFieldType,hourOfDay,217,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return HOUR_OF_DAY_TYPE;
11,org.joda.time.DateTimeFieldType,hourOfHalfday,235,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return HOUR_OF_HALFDAY_TYPE;
11,org.joda.time.DateTimeFieldType,millisOfDay,172,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return MILLIS_OF_DAY_TYPE;
11,org.joda.time.DateTimeFieldType,millisOfSecond,163,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return MILLIS_OF_SECOND_TYPE;
11,org.joda.time.DateTimeFieldType,minuteOfDay,208,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return MINUTE_OF_DAY_TYPE;
11,org.joda.time.DateTimeFieldType,minuteOfHour,199,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return MINUTE_OF_HOUR_TYPE;
11,org.joda.time.DateTimeFieldType,monthOfYear,317,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return MONTH_OF_YEAR_TYPE;
11,org.joda.time.DateTimeFieldType,secondOfDay,190,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return SECOND_OF_DAY_TYPE;
11,org.joda.time.DateTimeFieldType,secondOfMinute,181,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return SECOND_OF_MINUTE_TYPE;
11,org.joda.time.DateTimeFieldType,weekOfWeekyear,290,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return WEEK_OF_WEEKYEAR_TYPE;
11,org.joda.time.DateTimeFieldType,weekyear,299,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return WEEKYEAR_TYPE;
11,org.joda.time.DateTimeFieldType,weekyearOfCentury,308,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return WEEKYEAR_OF_CENTURY_TYPE;
11,org.joda.time.DateTimeFieldType,year,326,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return YEAR_TYPE;
11,org.joda.time.DateTimeFieldType,yearOfCentury,344,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return YEAR_OF_CENTURY_TYPE;
11,org.joda.time.DateTimeFieldType,yearOfEra,335,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return YEAR_OF_ERA_TYPE;
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,<init>,443,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,super(name);
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,<init>,444,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,iOrdinal = ordinal;
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,<init>,445,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,iUnitType = unitType;
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,<init>,446,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,iRangeType = rangeType;
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,<init>,447,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,}
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getDurationType,451,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return iUnitType;
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,461,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,chronology = DateTimeUtils.getChronology(chronology);
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,463,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,switch (iOrdinal) {
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,473,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.year();
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,475,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.dayOfYear();
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,477,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.monthOfYear();
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,479,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.dayOfMonth();
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,483,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.weekyear();
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,497,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.hourOfDay();
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,501,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.minuteOfHour();
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,503,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.secondOfDay();
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,505,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.secondOfMinute();
11,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getRangeDurationType,456,/JodaTime/src/main/java/org/joda/time/DateTimeFieldType.java,return iRangeType;
11,org.joda.time.DateTimeUtils,<clinit>,35,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
11,org.joda.time.DateTimeUtils,<clinit>,37,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;
11,org.joda.time.DateTimeUtils,currentTimeMillis,56,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,return cMillisProvider.getMillis();
11,org.joda.time.DateTimeUtils,getChronology,252,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,if (chrono == null) {
11,org.joda.time.DateTimeUtils,getChronology,253,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,return ISOChronology.getInstance();
11,org.joda.time.DateTimeUtils,getChronology,255,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,return chrono;
11,org.joda.time.DateTimeUtils,getDateFormatSymbols,365,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,"Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});"
11,org.joda.time.DateTimeUtils,getDateFormatSymbols,366,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,"return (DateFormatSymbols) method.invoke(null, new Object[] {locale});"
11,org.joda.time.DateTimeUtils,getPeriodType,286,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,if (type == null) {
11,org.joda.time.DateTimeUtils,getPeriodType,287,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,return PeriodType.standard();
11,org.joda.time.DateTimeUtils,getPeriodType,289,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,return type;
11,org.joda.time.DateTimeUtils$SystemMillisProvider,<init>,393,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,static class SystemMillisProvider implements MillisProvider {
11,org.joda.time.DateTimeUtils$SystemMillisProvider,getMillis,399,/JodaTime/src/main/java/org/joda/time/DateTimeUtils.java,return System.currentTimeMillis();
11,org.joda.time.DateTimeZone,<clinit>,93,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,"public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);"
11,org.joda.time.DateTimeZone,<clinit>,113,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,setProvider0(null);
11,org.joda.time.DateTimeZone,<clinit>,114,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,setNameProvider0(null);
11,org.joda.time.DateTimeZone,<clinit>,115,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,<init>,673,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,
11,org.joda.time.DateTimeZone,<init>,674,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,// Instance fields and methods
11,org.joda.time.DateTimeZone,<init>,677,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,private final String iID;
11,org.joda.time.DateTimeZone,<init>,678,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,
11,org.joda.time.DateTimeZone,convertLocalToUTC,917,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* local time. This conversion is used after performing a calculation
11,org.joda.time.DateTimeZone,convertLocalToUTC,919,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,*
11,org.joda.time.DateTimeZone,convertLocalToUTC,921,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* @param strict  whether the conversion should reject non-existent local times
11,org.joda.time.DateTimeZone,convertLocalToUTC,952,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,"DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal)) +"
11,org.joda.time.DateTimeZone,convertLocalToUTC,954,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,} else {
11,org.joda.time.DateTimeZone,convertLocalToUTC,957,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,// before the cutover so use the offsetLocal instead
11,org.joda.time.DateTimeZone,convertUTCToLocal,894,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,
11,org.joda.time.DateTimeZone,convertUTCToLocal,895,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,/**
11,org.joda.time.DateTimeZone,convertUTCToLocal,897,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* local time. This conversion is used before performing a calculation
11,org.joda.time.DateTimeZone,convertUTCToLocal,900,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* @param instantUTC  the UTC instant to convert to local
11,org.joda.time.DateTimeZone,forID,189,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,"* Short ids, as accepted by {@link java.util.TimeZone}, are not accepted."
11,org.joda.time.DateTimeZone,forID,192,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* <p>
11,org.joda.time.DateTimeZone,forID,195,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,*
11,org.joda.time.DateTimeZone,forID,196,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,"* @param id  the ID of the datetime zone, null means default"
11,org.joda.time.DateTimeZone,forID,197,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* @return the DateTimeZone object for the ID
11,org.joda.time.DateTimeZone,getDefault,124,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* <p>
11,org.joda.time.DateTimeZone,getDefault,125,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this
11,org.joda.time.DateTimeZone,getDefault,126,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,"* method, then the change will not be picked up here."
11,org.joda.time.DateTimeZone,getDefault,127,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,*
11,org.joda.time.DateTimeZone,getDefault,128,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* @return the default datetime zone object
11,org.joda.time.DateTimeZone,getDefault,129,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,*/
11,org.joda.time.DateTimeZone,getDefault,132,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,if (zone == null) {
11,org.joda.time.DateTimeZone,getDefault,135,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,if (zone == null) {
11,org.joda.time.DateTimeZone,getDefault,136,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,DateTimeZone temp = null;
11,org.joda.time.DateTimeZone,getDefault,141,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,temp = forID(id);
11,org.joda.time.DateTimeZone,getDefault,142,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,getDefault,145,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,getDefault,147,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,temp = forTimeZone(TimeZone.getDefault());
11,org.joda.time.DateTimeZone,getDefault,149,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,} catch (IllegalArgumentException ex) {
11,org.joda.time.DateTimeZone,getDefaultNameProvider,514,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,cNameProvider = nameProvider;
11,org.joda.time.DateTimeZone,getDefaultNameProvider,516,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,
11,org.joda.time.DateTimeZone,getDefaultNameProvider,517,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,/**
11,org.joda.time.DateTimeZone,getDefaultNameProvider,527,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,try {
11,org.joda.time.DateTimeZone,getDefaultNameProvider,529,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,if (providerClass != null) {
11,org.joda.time.DateTimeZone,getDefaultNameProvider,530,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,try {
11,org.joda.time.DateTimeZone,getDefaultNameProvider,533,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,Thread thread = Thread.currentThread();
11,org.joda.time.DateTimeZone,getDefaultProvider,428,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,getDefaultProvider,431,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* Gets the default zone provider.
11,org.joda.time.DateTimeZone,getDefaultProvider,433,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* Tries the system property <code>org.joda.time.DateTimeZone.Provider</code>.
11,org.joda.time.DateTimeZone,getDefaultProvider,443,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,String providerClass =
11,org.joda.time.DateTimeZone,getDefaultProvider,445,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,if (providerClass != null) {
11,org.joda.time.DateTimeZone,getDefaultProvider,447,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,provider = (Provider) Class.forName(providerClass).newInstance();
11,org.joda.time.DateTimeZone,getDefaultProvider,451,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,getDefaultProvider,454,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,// ignored
11,org.joda.time.DateTimeZone,getDefaultProvider,458,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,try {
11,org.joda.time.DateTimeZone,getID,689,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,iID = id;
11,org.joda.time.DateTimeZone,setDefault,160,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,setDefault,161,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,
11,org.joda.time.DateTimeZone,setDefault,164,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* <p>
11,org.joda.time.DateTimeZone,setDefault,167,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,"* @param zone  the default datetime zone object, must not be null"
11,org.joda.time.DateTimeZone,setDefault,168,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* @throws IllegalArgumentException if the zone is null
11,org.joda.time.DateTimeZone,setDefault,169,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,* @throws SecurityException if the application has insufficient security rights
11,org.joda.time.DateTimeZone,setDefault,170,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,*/
11,org.joda.time.DateTimeZone,setNameProvider0,499,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,"sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));"
11,org.joda.time.DateTimeZone,setNameProvider0,500,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,setNameProvider0,502,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,setNameProvider0,503,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,
11,org.joda.time.DateTimeZone,setProvider0,400,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,"sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));"
11,org.joda.time.DateTimeZone,setProvider0,401,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,setProvider0,403,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,setProvider0,404,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,
11,org.joda.time.DateTimeZone,setProvider0,408,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,"* @param provider  provider to use, or null for default"
11,org.joda.time.DateTimeZone,setProvider0,411,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,private static void setProvider0(Provider provider) {
11,org.joda.time.DateTimeZone,setProvider0,414,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,}
11,org.joda.time.DateTimeZone,setProvider0,415,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,Set<String> ids = provider.getAvailableIDs();
11,org.joda.time.DateTimeZone,setProvider0,416,/JodaTime/src/main/java/org/joda/time/DateTimeZone.java,if (ids == null || ids.size() == 0) {
11,org.joda.time.DurationField,<init>,30,/JodaTime/src/main/java/org/joda/time/DurationField.java,public abstract class DurationField implements Comparable<DurationField> {
11,org.joda.time.DurationFieldType,<clinit>,60,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);"
11,org.joda.time.DurationFieldType,<clinit>,62,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);"
11,org.joda.time.DurationFieldType,<clinit>,64,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);"
11,org.joda.time.DurationFieldType,<clinit>,66,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);"
11,org.joda.time.DurationFieldType,<clinit>,68,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);"
11,org.joda.time.DurationFieldType,<clinit>,70,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);"
11,org.joda.time.DurationFieldType,<clinit>,72,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);"
11,org.joda.time.DurationFieldType,<clinit>,74,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);"
11,org.joda.time.DurationFieldType,<clinit>,76,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);"
11,org.joda.time.DurationFieldType,<clinit>,78,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);"
11,org.joda.time.DurationFieldType,<clinit>,80,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);"
11,org.joda.time.DurationFieldType,<clinit>,82,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);"
11,org.joda.time.DurationFieldType,<init>,94,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,super();
11,org.joda.time.DurationFieldType,<init>,95,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,iName = name;
11,org.joda.time.DurationFieldType,<init>,96,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,}
11,org.joda.time.DurationFieldType,centuries,196,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return CENTURIES_TYPE;
11,org.joda.time.DurationFieldType,days,151,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return DAYS_TYPE;
11,org.joda.time.DurationFieldType,eras,205,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return ERAS_TYPE;
11,org.joda.time.DurationFieldType,halfdays,141,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return HALFDAYS_TYPE;
11,org.joda.time.DurationFieldType,hours,132,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return HOURS_TYPE;
11,org.joda.time.DurationFieldType,millis,105,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return MILLIS_TYPE;
11,org.joda.time.DurationFieldType,minutes,123,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return MINUTES_TYPE;
11,org.joda.time.DurationFieldType,months,178,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return MONTHS_TYPE;
11,org.joda.time.DurationFieldType,seconds,114,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return SECONDS_TYPE;
11,org.joda.time.DurationFieldType,weeks,160,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return WEEKS_TYPE;
11,org.joda.time.DurationFieldType,weekyears,169,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return WEEKYEARS_TYPE;
11,org.joda.time.DurationFieldType,years,187,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return YEARS_TYPE;
11,org.joda.time.DurationFieldType$StandardDurationFieldType,<init>,259,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,super(name);
11,org.joda.time.DurationFieldType$StandardDurationFieldType,<init>,260,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,iOrdinal = ordinal;
11,org.joda.time.DurationFieldType$StandardDurationFieldType,<init>,261,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,}
11,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,264,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,chronology = DateTimeUtils.getChronology(chronology);
11,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,266,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,switch (iOrdinal) {
11,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,274,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return chronology.years();
11,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,276,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return chronology.months();
11,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,280,/JodaTime/src/main/java/org/joda/time/DurationFieldType.java,return chronology.days();
11,org.joda.time.MutableDateTime,<init>,163,/JodaTime/src/main/java/org/joda/time/MutableDateTime.java,
11,org.joda.time.MutableDateTime,<init>,164,/JodaTime/src/main/java/org/joda/time/MutableDateTime.java,/**
11,org.joda.time.MutableDateTime,setChronology,490,/JodaTime/src/main/java/org/joda/time/MutableDateTime.java,
11,org.joda.time.MutableDateTime,setChronology,491,/JodaTime/src/main/java/org/joda/time/MutableDateTime.java,/**
11,org.joda.time.MutableDateTime,setMillis,380,/JodaTime/src/main/java/org/joda/time/MutableDateTime.java,* milliseconds will always be zero.
11,org.joda.time.MutableDateTime,setMillis,382,/JodaTime/src/main/java/org/joda/time/MutableDateTime.java,* @param field  rounding field or null to disable
11,org.joda.time.MutableDateTime,setMillis,400,/JodaTime/src/main/java/org/joda/time/MutableDateTime.java,*
11,org.joda.time.MutableDateTime,setMillis,401,/JodaTime/src/main/java/org/joda/time/MutableDateTime.java,* @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the
11,org.joda.time.Period,<clinit>,63,/JodaTime/src/main/java/org/joda/time/Period.java,public static final Period ZERO = new Period();
11,org.joda.time.Period,<init>,271,/JodaTime/src/main/java/org/joda/time/Period.java,"super(0L, null, null);"
11,org.joda.time.Period,<init>,272,/JodaTime/src/main/java/org/joda/time/Period.java,}
11,org.joda.time.Period,<init>,463,/JodaTime/src/main/java/org/joda/time/Period.java,"super(startInstant, endInstant, type, chrono);"
11,org.joda.time.Period,<init>,464,/JodaTime/src/main/java/org/joda/time/Period.java,}
11,org.joda.time.PeriodType,<clinit>,56,/JodaTime/src/main/java/org/joda/time/PeriodType.java,"private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);"
11,org.joda.time.PeriodType,<clinit>,58,/JodaTime/src/main/java/org/joda/time/PeriodType.java,static int YEAR_INDEX = 0;
11,org.joda.time.PeriodType,<clinit>,59,/JodaTime/src/main/java/org/joda/time/PeriodType.java,static int MONTH_INDEX = 1;
11,org.joda.time.PeriodType,<clinit>,60,/JodaTime/src/main/java/org/joda/time/PeriodType.java,static int WEEK_INDEX = 2;
11,org.joda.time.PeriodType,<clinit>,61,/JodaTime/src/main/java/org/joda/time/PeriodType.java,static int DAY_INDEX = 3;
11,org.joda.time.PeriodType,<clinit>,62,/JodaTime/src/main/java/org/joda/time/PeriodType.java,static int HOUR_INDEX = 4;
11,org.joda.time.PeriodType,<clinit>,63,/JodaTime/src/main/java/org/joda/time/PeriodType.java,static int MINUTE_INDEX = 5;
11,org.joda.time.PeriodType,<clinit>,64,/JodaTime/src/main/java/org/joda/time/PeriodType.java,static int SECOND_INDEX = 6;
11,org.joda.time.PeriodType,<clinit>,65,/JodaTime/src/main/java/org/joda/time/PeriodType.java,static int MILLI_INDEX = 7;
11,org.joda.time.PeriodType,<init>,595,/JodaTime/src/main/java/org/joda/time/PeriodType.java,super();
11,org.joda.time.PeriodType,<init>,596,/JodaTime/src/main/java/org/joda/time/PeriodType.java,iName = name;
11,org.joda.time.PeriodType,<init>,597,/JodaTime/src/main/java/org/joda/time/PeriodType.java,iTypes = types;
11,org.joda.time.PeriodType,<init>,598,/JodaTime/src/main/java/org/joda/time/PeriodType.java,iIndices = indices;
11,org.joda.time.PeriodType,<init>,599,/JodaTime/src/main/java/org/joda/time/PeriodType.java,}
11,org.joda.time.PeriodType,getFieldType,628,/JodaTime/src/main/java/org/joda/time/PeriodType.java,return iTypes[index];
11,org.joda.time.PeriodType,size,617,/JodaTime/src/main/java/org/joda/time/PeriodType.java,return iTypes.length;
11,org.joda.time.PeriodType,standard,102,/JodaTime/src/main/java/org/joda/time/PeriodType.java,PeriodType type = cStandard;
11,org.joda.time.PeriodType,standard,103,/JodaTime/src/main/java/org/joda/time/PeriodType.java,if (type == null) {
11,org.joda.time.PeriodType,standard,104,/JodaTime/src/main/java/org/joda/time/PeriodType.java,type = new PeriodType(
11,org.joda.time.PeriodType,standard,114,/JodaTime/src/main/java/org/joda/time/PeriodType.java,cStandard = type;
11,org.joda.time.PeriodType,standard,116,/JodaTime/src/main/java/org/joda/time/PeriodType.java,return type;
11,org.joda.time.PeriodType,yearMonthDay,163,/JodaTime/src/main/java/org/joda/time/PeriodType.java,PeriodType type = cYMD;
11,org.joda.time.PeriodType,yearMonthDay,164,/JodaTime/src/main/java/org/joda/time/PeriodType.java,if (type == null) {
11,org.joda.time.PeriodType,yearMonthDay,165,/JodaTime/src/main/java/org/joda/time/PeriodType.java,type = new PeriodType(
11,org.joda.time.PeriodType,yearMonthDay,173,/JodaTime/src/main/java/org/joda/time/PeriodType.java,cYMD = type;
11,org.joda.time.PeriodType,yearMonthDay,175,/JodaTime/src/main/java/org/joda/time/PeriodType.java,return type;
11,org.joda.time.base.AbstractDateTime,<init>,51,/JodaTime/src/main/java/org/joda/time/base/AbstractDateTime.java,super();
11,org.joda.time.base.AbstractDateTime,<init>,52,/JodaTime/src/main/java/org/joda/time/base/AbstractDateTime.java,}
11,org.joda.time.base.AbstractInstant,<init>,60,/JodaTime/src/main/java/org/joda/time/base/AbstractInstant.java,super();
11,org.joda.time.base.AbstractInstant,<init>,61,/JodaTime/src/main/java/org/joda/time/base/AbstractInstant.java,}
11,org.joda.time.base.AbstractPeriod,<init>,44,/JodaTime/src/main/java/org/joda/time/base/AbstractPeriod.java,super();
11,org.joda.time.base.AbstractPeriod,<init>,45,/JodaTime/src/main/java/org/joda/time/base/AbstractPeriod.java,}
11,org.joda.time.base.BaseDateTime,<init>,124,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,super();
11,org.joda.time.base.BaseDateTime,<init>,125,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,iChronology = checkChronology(chronology);
11,org.joda.time.base.BaseDateTime,<init>,126,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,"iMillis = checkInstant(instant, iChronology);"
11,org.joda.time.base.BaseDateTime,<init>,127,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,}
11,org.joda.time.base.BaseDateTime,<init>,168,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,super();
11,org.joda.time.base.BaseDateTime,<init>,169,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
11,org.joda.time.base.BaseDateTime,<init>,170,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,"iChronology = checkChronology(converter.getChronology(instant, chronology));"
11,org.joda.time.base.BaseDateTime,<init>,171,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,"iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);"
11,org.joda.time.base.BaseDateTime,<init>,172,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,}
11,org.joda.time.base.BaseDateTime,checkChronology,270,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,return DateTimeUtils.getChronology(chronology);
11,org.joda.time.base.BaseDateTime,checkInstant,284,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,return instant;
11,org.joda.time.base.BaseDateTime,getChronology,304,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,return iChronology;
11,org.joda.time.base.BaseDateTime,getMillis,295,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,return iMillis;
11,org.joda.time.base.BaseDateTime,setChronology,329,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,iChronology = checkChronology(chronology);
11,org.joda.time.base.BaseDateTime,setChronology,330,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,}
11,org.joda.time.base.BaseDateTime,setMillis,317,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,"iMillis = checkInstant(instant, iChronology);"
11,org.joda.time.base.BaseDateTime,setMillis,318,/JodaTime/src/main/java/org/joda/time/base/BaseDateTime.java,}
11,org.joda.time.base.BasePeriod,<init>,96,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,super();
11,org.joda.time.base.BasePeriod,<init>,97,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,type = checkPeriodType(type);
11,org.joda.time.base.BasePeriod,<init>,98,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,chrono = DateTimeUtils.getChronology(chrono);
11,org.joda.time.base.BasePeriod,<init>,99,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,iType = type;
11,org.joda.time.base.BasePeriod,<init>,100,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,"iValues = chrono.get(this, startInstant, endInstant);"
11,org.joda.time.base.BasePeriod,<init>,101,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,}
11,org.joda.time.base.BasePeriod,<init>,225,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,super();
11,org.joda.time.base.BasePeriod,<init>,226,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,type = checkPeriodType(type);
11,org.joda.time.base.BasePeriod,<init>,227,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,chrono = DateTimeUtils.getChronology(chrono);
11,org.joda.time.base.BasePeriod,<init>,228,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,iType = type;
11,org.joda.time.base.BasePeriod,<init>,229,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,"iValues = chrono.get(this, duration);"
11,org.joda.time.base.BasePeriod,<init>,230,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,}
11,org.joda.time.base.BasePeriod,checkPeriodType,279,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,return DateTimeUtils.getPeriodType(type);
11,org.joda.time.base.BasePeriod,getFieldType,310,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,return iType.getFieldType(index);
11,org.joda.time.base.BasePeriod,size,299,/JodaTime/src/main/java/org/joda/time/base/BasePeriod.java,return iType.size();
11,org.joda.time.chrono.AssembledChronology,<init>,99,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,"protected AssembledChronology(Chronology base, Object param) {"
11,org.joda.time.chrono.AssembledChronology,<init>,100,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iBase = base;
11,org.joda.time.chrono.AssembledChronology,<init>,101,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iParam = param;
11,org.joda.time.chrono.AssembledChronology,<init>,102,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,setFields();
11,org.joda.time.chrono.AssembledChronology,<init>,103,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,}
11,org.joda.time.chrono.AssembledChronology,centuries,280,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iCenturies;
11,org.joda.time.chrono.AssembledChronology,centuryOfEra,284,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iCenturyOfEra;
11,org.joda.time.chrono.AssembledChronology,clockhourOfDay,200,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iClockhourOfDay;
11,org.joda.time.chrono.AssembledChronology,clockhourOfHalfday,212,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iClockhourOfHalfday;
11,org.joda.time.chrono.AssembledChronology,dayOfMonth,228,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iDayOfMonth;
11,org.joda.time.chrono.AssembledChronology,dayOfWeek,224,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iDayOfWeek;
11,org.joda.time.chrono.AssembledChronology,dayOfYear,232,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iDayOfYear;
11,org.joda.time.chrono.AssembledChronology,days,220,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iDays;
11,org.joda.time.chrono.AssembledChronology,era,292,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iEra;
11,org.joda.time.chrono.AssembledChronology,eras,288,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iEras;
11,org.joda.time.chrono.AssembledChronology,getBase,308,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iBase;
11,org.joda.time.chrono.AssembledChronology,getZone,107,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if ((base = iBase) != null) {
11,org.joda.time.chrono.AssembledChronology,getZone,108,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return base.getZone();
11,org.joda.time.chrono.AssembledChronology,halfdayOfDay,216,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iHalfdayOfDay;
11,org.joda.time.chrono.AssembledChronology,halfdays,204,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iHalfdays;
11,org.joda.time.chrono.AssembledChronology,hourOfDay,196,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iHourOfDay;
11,org.joda.time.chrono.AssembledChronology,hourOfHalfday,208,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iHourOfHalfday;
11,org.joda.time.chrono.AssembledChronology,hours,192,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iHours;
11,org.joda.time.chrono.AssembledChronology,millis,156,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMillis;
11,org.joda.time.chrono.AssembledChronology,millisOfDay,164,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMillisOfDay;
11,org.joda.time.chrono.AssembledChronology,millisOfSecond,160,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMillisOfSecond;
11,org.joda.time.chrono.AssembledChronology,minuteOfDay,188,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMinuteOfDay;
11,org.joda.time.chrono.AssembledChronology,minuteOfHour,184,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMinuteOfHour;
11,org.joda.time.chrono.AssembledChronology,minutes,180,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMinutes;
11,org.joda.time.chrono.AssembledChronology,monthOfYear,260,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMonthOfYear;
11,org.joda.time.chrono.AssembledChronology,months,256,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMonths;
11,org.joda.time.chrono.AssembledChronology,secondOfDay,176,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iSecondOfDay;
11,org.joda.time.chrono.AssembledChronology,secondOfMinute,172,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iSecondOfMinute;
11,org.joda.time.chrono.AssembledChronology,seconds,168,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iSeconds;
11,org.joda.time.chrono.AssembledChronology,setFields,319,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,Fields fields = new Fields();
11,org.joda.time.chrono.AssembledChronology,setFields,320,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (iBase != null) {
11,org.joda.time.chrono.AssembledChronology,setFields,321,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,fields.copyFieldsFrom(iBase);
11,org.joda.time.chrono.AssembledChronology,setFields,323,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,assemble(fields);
11,org.joda.time.chrono.AssembledChronology,setFields,327,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMillis    = (f = fields.millis)    != null ? f : super.millis();
11,org.joda.time.chrono.AssembledChronology,setFields,328,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();
11,org.joda.time.chrono.AssembledChronology,setFields,329,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();
11,org.joda.time.chrono.AssembledChronology,setFields,330,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iHours     = (f = fields.hours)     != null ? f : super.hours();
11,org.joda.time.chrono.AssembledChronology,setFields,331,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();
11,org.joda.time.chrono.AssembledChronology,setFields,332,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iDays      = (f = fields.days)      != null ? f : super.days();
11,org.joda.time.chrono.AssembledChronology,setFields,333,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();
11,org.joda.time.chrono.AssembledChronology,setFields,334,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();
11,org.joda.time.chrono.AssembledChronology,setFields,335,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMonths    = (f = fields.months)    != null ? f : super.months();
11,org.joda.time.chrono.AssembledChronology,setFields,336,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iYears     = (f = fields.years)     != null ? f : super.years();
11,org.joda.time.chrono.AssembledChronology,setFields,337,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iCenturies = (f = fields.centuries) != null ? f : super.centuries();
11,org.joda.time.chrono.AssembledChronology,setFields,338,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iEras      = (f = fields.eras)      != null ? f : super.eras();
11,org.joda.time.chrono.AssembledChronology,setFields,343,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();
11,org.joda.time.chrono.AssembledChronology,setFields,344,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();
11,org.joda.time.chrono.AssembledChronology,setFields,345,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();
11,org.joda.time.chrono.AssembledChronology,setFields,346,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();
11,org.joda.time.chrono.AssembledChronology,setFields,347,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();
11,org.joda.time.chrono.AssembledChronology,setFields,348,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();
11,org.joda.time.chrono.AssembledChronology,setFields,349,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();
11,org.joda.time.chrono.AssembledChronology,setFields,350,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();
11,org.joda.time.chrono.AssembledChronology,setFields,351,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();
11,org.joda.time.chrono.AssembledChronology,setFields,352,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();
11,org.joda.time.chrono.AssembledChronology,setFields,353,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();
11,org.joda.time.chrono.AssembledChronology,setFields,354,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();
11,org.joda.time.chrono.AssembledChronology,setFields,355,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();
11,org.joda.time.chrono.AssembledChronology,setFields,356,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();
11,org.joda.time.chrono.AssembledChronology,setFields,357,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();
11,org.joda.time.chrono.AssembledChronology,setFields,358,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();
11,org.joda.time.chrono.AssembledChronology,setFields,359,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();
11,org.joda.time.chrono.AssembledChronology,setFields,360,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();
11,org.joda.time.chrono.AssembledChronology,setFields,361,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iYear               = (f = fields.year)               != null ? f : super.year();
11,org.joda.time.chrono.AssembledChronology,setFields,362,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();
11,org.joda.time.chrono.AssembledChronology,setFields,363,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();
11,org.joda.time.chrono.AssembledChronology,setFields,364,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();
11,org.joda.time.chrono.AssembledChronology,setFields,365,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iEra                = (f = fields.era)                != null ? f : super.era();
11,org.joda.time.chrono.AssembledChronology,setFields,369,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (iBase == null) {
11,org.joda.time.chrono.AssembledChronology,setFields,370,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,flags = 0;
11,org.joda.time.chrono.AssembledChronology,setFields,372,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,flags =
11,org.joda.time.chrono.AssembledChronology,setFields,385,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,iBaseFlags = flags;
11,org.joda.time.chrono.AssembledChronology,setFields,386,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,}
11,org.joda.time.chrono.AssembledChronology,weekOfWeekyear,240,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iWeekOfWeekyear;
11,org.joda.time.chrono.AssembledChronology,weeks,236,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iWeeks;
11,org.joda.time.chrono.AssembledChronology,weekyear,248,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iWeekyear;
11,org.joda.time.chrono.AssembledChronology,weekyearOfCentury,252,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iWeekyearOfCentury;
11,org.joda.time.chrono.AssembledChronology,weekyears,244,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iWeekyears;
11,org.joda.time.chrono.AssembledChronology,year,268,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iYear;
11,org.joda.time.chrono.AssembledChronology,yearOfCentury,276,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iYearOfCentury;
11,org.joda.time.chrono.AssembledChronology,yearOfEra,272,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iYearOfEra;
11,org.joda.time.chrono.AssembledChronology,years,264,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iYears;
11,org.joda.time.chrono.AssembledChronology$Fields,<init>,436,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,Fields() {
11,org.joda.time.chrono.AssembledChronology$Fields,<init>,437,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,}
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,445,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.millis())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,446,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,millis = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,448,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.seconds())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,449,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,seconds = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,451,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.minutes())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,452,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,minutes = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,454,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.hours())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,455,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,hours = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,457,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.halfdays())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,458,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,halfdays = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,460,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.days())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,461,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,days = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,463,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.weeks())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,464,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,weeks = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,466,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.weekyears())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,467,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,weekyears = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,469,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.months())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,470,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,months = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,472,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.years())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,473,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,years = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,475,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.centuries())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,476,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,centuries = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,478,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.eras())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,485,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.millisOfSecond())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,486,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,millisOfSecond = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,488,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.millisOfDay())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,489,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,millisOfDay = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,491,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.secondOfMinute())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,492,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,secondOfMinute = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,494,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.secondOfDay())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,495,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,secondOfDay = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,497,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.minuteOfHour())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,498,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,minuteOfHour = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,500,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.minuteOfDay())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,501,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,minuteOfDay = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,503,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.hourOfDay())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,504,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,hourOfDay = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,506,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.clockhourOfDay())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,507,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,clockhourOfDay = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,509,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.hourOfHalfday())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,510,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,hourOfHalfday = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,512,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.clockhourOfHalfday())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,513,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,clockhourOfHalfday = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,515,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.halfdayOfDay())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,516,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,halfdayOfDay = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,518,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.dayOfWeek())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,519,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,dayOfWeek = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,521,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.dayOfMonth())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,522,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,dayOfMonth = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,524,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.dayOfYear())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,525,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,dayOfYear = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,527,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.weekOfWeekyear())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,528,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,weekOfWeekyear = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,530,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.weekyear())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,531,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,weekyear = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,533,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.weekyearOfCentury())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,534,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,weekyearOfCentury = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,536,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.monthOfYear())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,537,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,monthOfYear = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,539,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.year())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,540,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,year = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,542,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.yearOfEra())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,543,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,yearOfEra = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,545,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.yearOfCentury())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,546,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,yearOfCentury = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,548,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.centuryOfEra())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,549,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,centuryOfEra = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,551,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.era())) {
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,552,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,era = f;
11,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,555,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,}
11,org.joda.time.chrono.AssembledChronology$Fields,isSupported,562,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return field == null ? false : field.isSupported();
11,org.joda.time.chrono.AssembledChronology$Fields,isSupported,558,/JodaTime/src/main/java/org/joda/time/chrono/AssembledChronology.java,return field == null ? false : field.isSupported();
11,org.joda.time.chrono.BaseChronology,<init>,54,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,super();
11,org.joda.time.chrono.BaseChronology,<init>,55,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,}
11,org.joda.time.chrono.BaseChronology,eras,660,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,return UnsupportedDurationField.getInstance(DurationFieldType.eras());
11,org.joda.time.chrono.BaseChronology,get,276,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,int size = period.size();
11,org.joda.time.chrono.BaseChronology,get,277,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,int[] values = new int[size];
11,org.joda.time.chrono.BaseChronology,get,278,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,if (duration != 0) {
11,org.joda.time.chrono.BaseChronology,get,289,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,return values;
11,org.joda.time.chrono.BaseChronology,get,255,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,int size = period.size();
11,org.joda.time.chrono.BaseChronology,get,256,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,int[] values = new int[size];
11,org.joda.time.chrono.BaseChronology,get,257,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,if (startInstant != endInstant) {
11,org.joda.time.chrono.BaseChronology,get,258,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,for (int i = 0; i < size; i++) {
11,org.joda.time.chrono.BaseChronology,get,259,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,DurationField field = period.getFieldType(i).getField(this);
11,org.joda.time.chrono.BaseChronology,get,260,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,"int value = field.getDifference(endInstant, startInstant);"
11,org.joda.time.chrono.BaseChronology,get,261,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,"startInstant = field.add(startInstant, value);"
11,org.joda.time.chrono.BaseChronology,get,262,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,values[i] = value;
11,org.joda.time.chrono.BaseChronology,get,265,/JodaTime/src/main/java/org/joda/time/chrono/BaseChronology.java,return values;
11,org.joda.time.chrono.BasicChronology,<clinit>,76,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cMillisField = MillisDurationField.INSTANCE;
11,org.joda.time.chrono.BasicChronology,<clinit>,77,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cSecondsField = new PreciseDurationField
11,org.joda.time.chrono.BasicChronology,<clinit>,79,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cMinutesField = new PreciseDurationField
11,org.joda.time.chrono.BasicChronology,<clinit>,81,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cHoursField = new PreciseDurationField
11,org.joda.time.chrono.BasicChronology,<clinit>,83,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cHalfdaysField = new PreciseDurationField
11,org.joda.time.chrono.BasicChronology,<clinit>,85,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cDaysField = new PreciseDurationField
11,org.joda.time.chrono.BasicChronology,<clinit>,87,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cWeeksField = new PreciseDurationField
11,org.joda.time.chrono.BasicChronology,<clinit>,90,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cMillisOfSecondField = new PreciseDateTimeField
11,org.joda.time.chrono.BasicChronology,<clinit>,93,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cMillisOfDayField = new PreciseDateTimeField
11,org.joda.time.chrono.BasicChronology,<clinit>,96,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cSecondOfMinuteField = new PreciseDateTimeField
11,org.joda.time.chrono.BasicChronology,<clinit>,99,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cSecondOfDayField = new PreciseDateTimeField
11,org.joda.time.chrono.BasicChronology,<clinit>,102,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cMinuteOfHourField = new PreciseDateTimeField
11,org.joda.time.chrono.BasicChronology,<clinit>,105,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cMinuteOfDayField = new PreciseDateTimeField
11,org.joda.time.chrono.BasicChronology,<clinit>,108,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cHourOfDayField = new PreciseDateTimeField
11,org.joda.time.chrono.BasicChronology,<clinit>,111,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cHourOfHalfdayField = new PreciseDateTimeField
11,org.joda.time.chrono.BasicChronology,<clinit>,114,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cClockhourOfDayField = new ZeroIsMaxDateTimeField
11,org.joda.time.chrono.BasicChronology,<clinit>,117,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField
11,org.joda.time.chrono.BasicChronology,<clinit>,120,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,cHalfdayOfDayField = new HalfdayField();
11,org.joda.time.chrono.BasicChronology,<clinit>,121,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,}
11,org.joda.time.chrono.BasicChronology,<init>,126,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
11,org.joda.time.chrono.BasicChronology,<init>,131,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"super(base, param);"
11,org.joda.time.chrono.BasicChronology,<init>,133,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
11,org.joda.time.chrono.BasicChronology,<init>,138,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,iMinDaysInFirstWeek = minDaysInFirstWeek;
11,org.joda.time.chrono.BasicChronology,<init>,139,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,}
11,org.joda.time.chrono.BasicChronology,access$100,50,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,abstract class BasicChronology extends AssembledChronology {
11,org.joda.time.chrono.BasicChronology,assemble,241,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.millis = cMillisField;
11,org.joda.time.chrono.BasicChronology,assemble,242,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.seconds = cSecondsField;
11,org.joda.time.chrono.BasicChronology,assemble,243,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.minutes = cMinutesField;
11,org.joda.time.chrono.BasicChronology,assemble,244,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.hours = cHoursField;
11,org.joda.time.chrono.BasicChronology,assemble,245,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.halfdays = cHalfdaysField;
11,org.joda.time.chrono.BasicChronology,assemble,246,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.days = cDaysField;
11,org.joda.time.chrono.BasicChronology,assemble,247,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.weeks = cWeeksField;
11,org.joda.time.chrono.BasicChronology,assemble,249,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.millisOfSecond = cMillisOfSecondField;
11,org.joda.time.chrono.BasicChronology,assemble,250,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.millisOfDay = cMillisOfDayField;
11,org.joda.time.chrono.BasicChronology,assemble,251,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.secondOfMinute = cSecondOfMinuteField;
11,org.joda.time.chrono.BasicChronology,assemble,252,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.secondOfDay = cSecondOfDayField;
11,org.joda.time.chrono.BasicChronology,assemble,253,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.minuteOfHour = cMinuteOfHourField;
11,org.joda.time.chrono.BasicChronology,assemble,254,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.minuteOfDay = cMinuteOfDayField;
11,org.joda.time.chrono.BasicChronology,assemble,255,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.hourOfDay = cHourOfDayField;
11,org.joda.time.chrono.BasicChronology,assemble,256,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.hourOfHalfday = cHourOfHalfdayField;
11,org.joda.time.chrono.BasicChronology,assemble,257,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.clockhourOfDay = cClockhourOfDayField;
11,org.joda.time.chrono.BasicChronology,assemble,258,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.clockhourOfHalfday = cClockhourOfHalfdayField;
11,org.joda.time.chrono.BasicChronology,assemble,259,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.halfdayOfDay = cHalfdayOfDayField;
11,org.joda.time.chrono.BasicChronology,assemble,264,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.year = new BasicYearDateTimeField(this);
11,org.joda.time.chrono.BasicChronology,assemble,265,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);"
11,org.joda.time.chrono.BasicChronology,assemble,268,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,DateTimeField field = new OffsetDateTimeField(
11,org.joda.time.chrono.BasicChronology,assemble,270,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.centuryOfEra = new DividedDateTimeField(
11,org.joda.time.chrono.BasicChronology,assemble,273,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,field = new RemainderDateTimeField(
11,org.joda.time.chrono.BasicChronology,assemble,275,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.yearOfCentury = new OffsetDateTimeField(
11,org.joda.time.chrono.BasicChronology,assemble,278,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.era = new GJEraDateTimeField(this);
11,org.joda.time.chrono.BasicChronology,assemble,279,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);"
11,org.joda.time.chrono.BasicChronology,assemble,280,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);"
11,org.joda.time.chrono.BasicChronology,assemble,281,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);"
11,org.joda.time.chrono.BasicChronology,assemble,282,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
11,org.joda.time.chrono.BasicChronology,assemble,283,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.weekyear = new BasicWeekyearDateTimeField(this);
11,org.joda.time.chrono.BasicChronology,assemble,284,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);"
11,org.joda.time.chrono.BasicChronology,assemble,286,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,field = new RemainderDateTimeField(
11,org.joda.time.chrono.BasicChronology,assemble,288,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.weekyearOfCentury = new OffsetDateTimeField(
11,org.joda.time.chrono.BasicChronology,assemble,294,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.years = fields.year.getDurationField();
11,org.joda.time.chrono.BasicChronology,assemble,295,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.centuries = fields.centuryOfEra.getDurationField();
11,org.joda.time.chrono.BasicChronology,assemble,296,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.months = fields.monthOfYear.getDurationField();
11,org.joda.time.chrono.BasicChronology,assemble,297,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.weekyears = fields.weekyear.getDurationField();
11,org.joda.time.chrono.BasicChronology,assemble,298,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,}
11,org.joda.time.chrono.BasicChronology,getDayOfMonth,448,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,int year = getYear(millis);
11,org.joda.time.chrono.BasicChronology,getDayOfMonth,449,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"int month = getMonthOfYear(millis, year);"
11,org.joda.time.chrono.BasicChronology,getDayOfMonth,450,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getDayOfMonth(millis, year, month);"
11,org.joda.time.chrono.BasicChronology,getDayOfMonth,458,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"int month = getMonthOfYear(millis, year);"
11,org.joda.time.chrono.BasicChronology,getDayOfMonth,459,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getDayOfMonth(millis, year, month);"
11,org.joda.time.chrono.BasicChronology,getDayOfMonth,468,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,long dateMillis = getYearMillis(year);
11,org.joda.time.chrono.BasicChronology,getDayOfMonth,469,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"dateMillis += getTotalMillisByYearMonth(year, month);"
11,org.joda.time.chrono.BasicChronology,getDayOfMonth,470,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
11,org.joda.time.chrono.BasicChronology,getDayOfWeek,534,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,if (instant >= 0) {
11,org.joda.time.chrono.BasicChronology,getDayOfWeek,535,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;
11,org.joda.time.chrono.BasicChronology,getDayOfWeek,537,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
11,org.joda.time.chrono.BasicChronology,getDayOfWeek,539,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,if (daysSince19700101 < -3) {
11,org.joda.time.chrono.BasicChronology,getDayOfWeek,540,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return 7 + (int) ((daysSince19700101 + 4) % 7);
11,org.joda.time.chrono.BasicChronology,getDayOfWeek,544,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return 1 + (int) ((daysSince19700101 + 3) % 7);
11,org.joda.time.chrono.BasicChronology,getDayOfYear,485,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,long yearStart = getYearMillis(year);
11,org.joda.time.chrono.BasicChronology,getDayOfYear,486,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
11,org.joda.time.chrono.BasicChronology,getDaysInMonthMax,575,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,int thisYear = getYear(instant);
11,org.joda.time.chrono.BasicChronology,getDaysInMonthMax,576,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"int thisMonth = getMonthOfYear(instant, thisYear);"
11,org.joda.time.chrono.BasicChronology,getDaysInMonthMax,577,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getDaysInYearMonth(thisYear, thisMonth);"
11,org.joda.time.chrono.BasicChronology,getMaxMonth,691,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return 12;
11,org.joda.time.chrono.BasicChronology,getMillisOfDay,551,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,if (instant >= 0) {
11,org.joda.time.chrono.BasicChronology,getMillisOfDay,552,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
11,org.joda.time.chrono.BasicChronology,getMillisOfDay,554,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return (DateTimeConstants.MILLIS_PER_DAY - 1)
11,org.joda.time.chrono.BasicChronology,getMonthOfYear,435,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getMonthOfYear(millis, getYear(millis));"
11,org.joda.time.chrono.BasicChronology,getYear,399,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,long unitMillis = getAverageMillisPerYearDividedByTwo();
11,org.joda.time.chrono.BasicChronology,getYear,400,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
11,org.joda.time.chrono.BasicChronology,getYear,401,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,if (i2 < 0) {
11,org.joda.time.chrono.BasicChronology,getYear,402,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,i2 = i2 - unitMillis + 1;
11,org.joda.time.chrono.BasicChronology,getYear,404,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,int year = (int) (i2 / unitMillis);
11,org.joda.time.chrono.BasicChronology,getYear,406,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,long yearStart = getYearMillis(year);
11,org.joda.time.chrono.BasicChronology,getYear,407,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,long diff = instant - yearStart;
11,org.joda.time.chrono.BasicChronology,getYear,409,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,if (diff < 0) {
11,org.joda.time.chrono.BasicChronology,getYear,410,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,year--;
11,org.joda.time.chrono.BasicChronology,getYear,411,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
11,org.joda.time.chrono.BasicChronology,getYear,414,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,if (isLeapYear(year)) {
11,org.joda.time.chrono.BasicChronology,getYear,417,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
11,org.joda.time.chrono.BasicChronology,getYear,420,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,yearStart += oneYear;
11,org.joda.time.chrono.BasicChronology,getYear,422,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,if (yearStart <= instant) {
11,org.joda.time.chrono.BasicChronology,getYear,424,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,year++;
11,org.joda.time.chrono.BasicChronology,getYear,428,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return year;
11,org.joda.time.chrono.BasicChronology,getYearInfo,738,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,YearInfo info = iYearInfoCache[year & CACHE_MASK];
11,org.joda.time.chrono.BasicChronology,getYearInfo,739,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,if (info == null || info.iYear != year) {
11,org.joda.time.chrono.BasicChronology,getYearInfo,740,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"info = new YearInfo(year, calculateFirstDayOfYearMillis(year));"
11,org.joda.time.chrono.BasicChronology,getYearInfo,741,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,iYearInfoCache[year & CACHE_MASK] = info;
11,org.joda.time.chrono.BasicChronology,getYearInfo,743,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return info;
11,org.joda.time.chrono.BasicChronology,getYearMillis,360,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return getYearInfo(year).iFirstDayMillis;
11,org.joda.time.chrono.BasicChronology,getYearMonthDayMillis,385,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,long millis = getYearMillis(year);
11,org.joda.time.chrono.BasicChronology,getYearMonthDayMillis,386,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"millis += getTotalMillisByYearMonth(year, month);"
11,org.joda.time.chrono.BasicChronology,getYearMonthDayMillis,387,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
11,org.joda.time.chrono.BasicChronology,getYearMonthMillis,371,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,long millis = getYearMillis(year);
11,org.joda.time.chrono.BasicChronology,getYearMonthMillis,372,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"millis += getTotalMillisByYearMonth(year, month);"
11,org.joda.time.chrono.BasicChronology,getYearMonthMillis,373,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return millis;
11,org.joda.time.chrono.BasicChronology,getZone,143,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,if ((base = getBase()) != null) {
11,org.joda.time.chrono.BasicChronology,getZone,146,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,return DateTimeZone.UTC;
11,org.joda.time.chrono.BasicChronology$HalfdayField,<init>,750,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);"
11,org.joda.time.chrono.BasicChronology$HalfdayField,<init>,751,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,}
11,org.joda.time.chrono.BasicChronology$YearInfo,<init>,770,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,"YearInfo(int year, long firstDayMillis) {"
11,org.joda.time.chrono.BasicChronology$YearInfo,<init>,771,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,iYear = year;
11,org.joda.time.chrono.BasicChronology$YearInfo,<init>,772,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,iFirstDayMillis = firstDayMillis;
11,org.joda.time.chrono.BasicChronology$YearInfo,<init>,773,/JodaTime/src/main/java/org/joda/time/chrono/BasicChronology.java,}
11,org.joda.time.chrono.BasicDayOfMonthDateTimeField,<init>,41,/JodaTime/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,"super(DateTimeFieldType.dayOfMonth(), days);"
11,org.joda.time.chrono.BasicDayOfMonthDateTimeField,<init>,42,/JodaTime/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,iChronology = chronology;
11,org.joda.time.chrono.BasicDayOfMonthDateTimeField,<init>,43,/JodaTime/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,}
11,org.joda.time.chrono.BasicDayOfMonthDateTimeField,get,47,/JodaTime/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,return iChronology.getDayOfMonth(instant);
11,org.joda.time.chrono.BasicDayOfMonthDateTimeField,getMaximumValueForSet,96,/JodaTime/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,"return iChronology.getDaysInMonthMaxForSet(instant, value);"
11,org.joda.time.chrono.BasicDayOfMonthDateTimeField,getMinimumValue,55,/JodaTime/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,return 1;
11,org.joda.time.chrono.BasicDayOfMonthDateTimeField,getRangeDurationField,51,/JodaTime/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,return iChronology.months();
11,org.joda.time.chrono.BasicDayOfYearDateTimeField,<init>,41,/JodaTime/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,"super(DateTimeFieldType.dayOfYear(), days);"
11,org.joda.time.chrono.BasicDayOfYearDateTimeField,<init>,42,/JodaTime/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,iChronology = chronology;
11,org.joda.time.chrono.BasicDayOfYearDateTimeField,<init>,43,/JodaTime/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,}
11,org.joda.time.chrono.BasicGJChronology,<clinit>,42,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
11,org.joda.time.chrono.BasicGJChronology,<clinit>,45,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
11,org.joda.time.chrono.BasicGJChronology,<clinit>,53,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
11,org.joda.time.chrono.BasicGJChronology,<clinit>,54,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
11,org.joda.time.chrono.BasicGJChronology,<clinit>,56,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,long minSum = 0;
11,org.joda.time.chrono.BasicGJChronology,<clinit>,57,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,long maxSum = 0;
11,org.joda.time.chrono.BasicGJChronology,<clinit>,58,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,for (int i = 0; i < 11; i++) {
11,org.joda.time.chrono.BasicGJChronology,<clinit>,59,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
11,org.joda.time.chrono.BasicGJChronology,<clinit>,61,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,minSum += millis;
11,org.joda.time.chrono.BasicGJChronology,<clinit>,62,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;
11,org.joda.time.chrono.BasicGJChronology,<clinit>,64,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,millis = MAX_DAYS_PER_MONTH_ARRAY[i]
11,org.joda.time.chrono.BasicGJChronology,<clinit>,66,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,maxSum += millis;
11,org.joda.time.chrono.BasicGJChronology,<clinit>,67,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;
11,org.joda.time.chrono.BasicGJChronology,<clinit>,69,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,}
11,org.joda.time.chrono.BasicGJChronology,<init>,75,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,"super(base, param, minDaysInFirstWeek);"
11,org.joda.time.chrono.BasicGJChronology,<init>,76,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,}
11,org.joda.time.chrono.BasicGJChronology,getDaysInMonthMaxForSet,134,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return (value > 28 ? getDaysInMonthMax(instant) : 28);
11,org.joda.time.chrono.BasicGJChronology,getDaysInYearMonth,120,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (isLeapYear(year)) {
11,org.joda.time.chrono.BasicGJChronology,getDaysInYearMonth,121,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
11,org.joda.time.chrono.BasicGJChronology,getDaysInYearMonth,123,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
11,org.joda.time.chrono.BasicGJChronology,getMonthOfYear,88,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,int i = (int)((millis - getYearMillis(year)) >> 10);
11,org.joda.time.chrono.BasicGJChronology,getMonthOfYear,93,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return
11,org.joda.time.chrono.BasicGJChronology,getTotalMillisByYearMonth,139,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (isLeapYear(year)) {
11,org.joda.time.chrono.BasicGJChronology,getTotalMillisByYearMonth,140,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
11,org.joda.time.chrono.BasicGJChronology,getTotalMillisByYearMonth,142,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,148,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,int minuendYear = getYear(minuendInstant);
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,149,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,int subtrahendYear = getYear(subtrahendInstant);
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,152,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,long minuendRem = minuendInstant - getYearMillis(minuendYear);
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,153,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,156,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (subtrahendRem >= FEB_29) {
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,157,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (isLeapYear(subtrahendYear)) {
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,158,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (!isLeapYear(minuendYear)) {
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,159,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,161,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,} else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,162,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,166,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,int difference = minuendYear - subtrahendYear;
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,167,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (minuendRem < subtrahendRem) {
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,168,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,difference--;
11,org.joda.time.chrono.BasicGJChronology,getYearDifference,170,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return difference;
11,org.joda.time.chrono.BasicGJChronology,setYear,175,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,int thisYear = getYear(instant);
11,org.joda.time.chrono.BasicGJChronology,setYear,176,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,"int dayOfYear = getDayOfYear(instant, thisYear);"
11,org.joda.time.chrono.BasicGJChronology,setYear,177,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,int millisOfDay = getMillisOfDay(instant);
11,org.joda.time.chrono.BasicGJChronology,setYear,179,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (dayOfYear > (31 + 28)) { // after Feb 28
11,org.joda.time.chrono.BasicGJChronology,setYear,180,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (isLeapYear(thisYear)) {
11,org.joda.time.chrono.BasicGJChronology,setYear,182,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (!isLeapYear(year)) {
11,org.joda.time.chrono.BasicGJChronology,setYear,184,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,dayOfYear--;
11,org.joda.time.chrono.BasicGJChronology,setYear,188,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (isLeapYear(year)) {
11,org.joda.time.chrono.BasicGJChronology,setYear,190,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,dayOfYear++;
11,org.joda.time.chrono.BasicGJChronology,setYear,195,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,"instant = getYearMonthDayMillis(year, 1, dayOfYear);"
11,org.joda.time.chrono.BasicGJChronology,setYear,196,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,instant += millisOfDay;
11,org.joda.time.chrono.BasicGJChronology,setYear,198,/JodaTime/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return instant;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,<init>,51,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,<init>,52,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,iChronology = chronology;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,<init>,53,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,iMax = iChronology.getMaxMonth();
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,<init>,54,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,iLeapMonth = leapMonth;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,<init>,55,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,}
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,92,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,if (months == 0) {
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,98,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,long timePart = iChronology.getMillisOfDay(instant);
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,103,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,int thisYear = iChronology.getYear(instant);
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,104,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"int thisMonth = iChronology.getMonthOfYear(instant, thisYear);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,112,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,int monthToUse = thisMonth - 1 + months;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,113,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,if (monthToUse >= 0) {
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,114,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,yearToUse = thisYear + (monthToUse / iMax);
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,115,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,monthToUse = (monthToUse % iMax) + 1;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,136,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,137,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,138,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,if (dayToUse > maxDay) {
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,139,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,dayToUse = maxDay;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,144,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,long datePart =
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,add,146,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,return datePart + timePart;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,get,72,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,return iChronology.getMonthOfYear(instant);
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,237,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,if (minuendInstant < subtrahendInstant) {
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,241,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,int minuendYear = iChronology.getYear(minuendInstant);
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,242,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,243,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,int subtrahendYear = iChronology.getYear(subtrahendInstant);
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,244,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,246,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,250,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,int minuendDom = iChronology.getDayOfMonth
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,252,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,254,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,int subtrahendDom = iChronology.getDayOfMonth
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,256,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,if (subtrahendDom > minuendDom) {
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,260,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,265,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,long minuendRem = minuendInstant
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,267,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,long subtrahendRem = subtrahendInstant
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,270,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,if (minuendRem < subtrahendRem) {
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,271,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,difference--;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getDifferenceAsLong,274,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,return difference;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getRangeDurationField,309,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,return iChronology.years();
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,isLenient,59,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,return false;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,roundFloor,343,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,int year = iChronology.getYear(instant);
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,roundFloor,344,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"int month = iChronology.getMonthOfYear(instant, year);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,roundFloor,345,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"return iChronology.getYearMonthMillis(year, month);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,292,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"FieldUtils.verifyValueBounds(this, month, MIN, iMax);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,294,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,int thisYear = iChronology.getYear(instant);
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,296,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"int thisDom = iChronology.getDayOfMonth(instant, thisYear);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,297,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"int maxDom = iChronology.getDaysInYearMonth(thisYear, month);"
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,298,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,if (thisDom > maxDom) {
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,300,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,thisDom = maxDom;
11,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,303,/JodaTime/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +"
11,org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField,<init>,42,/JodaTime/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,"super(DateTimeFieldType.weekOfWeekyear(), weeks);"
11,org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField,<init>,43,/JodaTime/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,iChronology = chronology;
11,org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField,<init>,44,/JodaTime/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,}
11,org.joda.time.chrono.BasicWeekyearDateTimeField,<init>,44,/JodaTime/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,"super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());"
11,org.joda.time.chrono.BasicWeekyearDateTimeField,<init>,45,/JodaTime/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,iChronology = chronology;
11,org.joda.time.chrono.BasicWeekyearDateTimeField,<init>,46,/JodaTime/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,}
11,org.joda.time.chrono.BasicWeekyearDateTimeField,isLenient,49,/JodaTime/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,return false;
11,org.joda.time.chrono.BasicYearDateTimeField,<init>,45,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,"super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());"
11,org.joda.time.chrono.BasicYearDateTimeField,<init>,46,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,iChronology = chronology;
11,org.joda.time.chrono.BasicYearDateTimeField,<init>,47,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,}
11,org.joda.time.chrono.BasicYearDateTimeField,add,58,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,if (years == 0) {
11,org.joda.time.chrono.BasicYearDateTimeField,add,59,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return instant;
11,org.joda.time.chrono.BasicYearDateTimeField,add,61,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,int thisYear = get(instant);
11,org.joda.time.chrono.BasicYearDateTimeField,add,62,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,"int newYear = FieldUtils.safeAdd(thisYear, years);"
11,org.joda.time.chrono.BasicYearDateTimeField,add,63,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,"return set(instant, newYear);"
11,org.joda.time.chrono.BasicYearDateTimeField,get,54,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return iChronology.getYear(instant);
11,org.joda.time.chrono.BasicYearDateTimeField,getDifferenceAsLong,88,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,if (minuendInstant < subtrahendInstant) {
11,org.joda.time.chrono.BasicYearDateTimeField,getDifferenceAsLong,91,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,"return iChronology.getYearDifference(minuendInstant, subtrahendInstant);"
11,org.joda.time.chrono.BasicYearDateTimeField,getMaximumValue,119,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return iChronology.getMaxYear();
11,org.joda.time.chrono.BasicYearDateTimeField,getRangeDurationField,95,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return null;
11,org.joda.time.chrono.BasicYearDateTimeField,isLenient,50,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return false;
11,org.joda.time.chrono.BasicYearDateTimeField,roundFloor,123,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return iChronology.getYearMillis(get(instant));
11,org.joda.time.chrono.BasicYearDateTimeField,set,82,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,FieldUtils.verifyValueBounds
11,org.joda.time.chrono.BasicYearDateTimeField,set,84,/JodaTime/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,"return iChronology.setYear(instant, year);"
11,org.joda.time.chrono.GJDayOfWeekDateTimeField,<init>,45,/JodaTime/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,"super(DateTimeFieldType.dayOfWeek(), days);"
11,org.joda.time.chrono.GJDayOfWeekDateTimeField,<init>,46,/JodaTime/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,iChronology = chronology;
11,org.joda.time.chrono.GJDayOfWeekDateTimeField,<init>,47,/JodaTime/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,}
11,org.joda.time.chrono.GJDayOfWeekDateTimeField,convertText,90,/JodaTime/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);
11,org.joda.time.chrono.GJDayOfWeekDateTimeField,get,56,/JodaTime/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,return iChronology.getDayOfWeek(instant);
11,org.joda.time.chrono.GJDayOfWeekDateTimeField,getMaximumValue,112,/JodaTime/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,return DateTimeConstants.SUNDAY;
11,org.joda.time.chrono.GJDayOfWeekDateTimeField,getMinimumValue,103,/JodaTime/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,return DateTimeConstants.MONDAY;
11,org.joda.time.chrono.GJEraDateTimeField,<init>,46,/JodaTime/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java,super(DateTimeFieldType.era());
11,org.joda.time.chrono.GJEraDateTimeField,<init>,47,/JodaTime/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java,iChronology = chronology;
11,org.joda.time.chrono.GJEraDateTimeField,<init>,48,/JodaTime/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java,}
11,org.joda.time.chrono.GJEraDateTimeField,isLenient,51,/JodaTime/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java,return false;
11,org.joda.time.chrono.GJLocaleSymbols,<clinit>,37,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,private static final GJLocaleSymbols[] cFastCache = new GJLocaleSymbols[FAST_CACHE_SIZE];
11,org.joda.time.chrono.GJLocaleSymbols,<clinit>,39,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"private static WeakHashMap<Locale, GJLocaleSymbols> cCache = new WeakHashMap<Locale, GJLocaleSymbols>();"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,129,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,private GJLocaleSymbols(Locale locale) {
11,org.joda.time.chrono.GJLocaleSymbols,<init>,130,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iLocale = new WeakReference<Locale>(locale);
11,org.joda.time.chrono.GJLocaleSymbols,<init>,132,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,DateFormatSymbols dfs = DateTimeUtils.getDateFormatSymbols(locale);
11,org.joda.time.chrono.GJLocaleSymbols,<init>,134,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iEras = dfs.getEras();
11,org.joda.time.chrono.GJLocaleSymbols,<init>,135,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iDaysOfWeek = realignDaysOfWeek(dfs.getWeekdays());
11,org.joda.time.chrono.GJLocaleSymbols,<init>,136,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iShortDaysOfWeek = realignDaysOfWeek(dfs.getShortWeekdays());
11,org.joda.time.chrono.GJLocaleSymbols,<init>,137,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iMonths = realignMonths(dfs.getMonths());
11,org.joda.time.chrono.GJLocaleSymbols,<init>,138,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iShortMonths = realignMonths(dfs.getShortMonths());
11,org.joda.time.chrono.GJLocaleSymbols,<init>,139,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iHalfday = dfs.getAmPmStrings();
11,org.joda.time.chrono.GJLocaleSymbols,<init>,141,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,Integer[] integers = new Integer[13];
11,org.joda.time.chrono.GJLocaleSymbols,<init>,142,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,for (int i=0; i<13; i++) {
11,org.joda.time.chrono.GJLocaleSymbols,<init>,143,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,integers[i] = new Integer(i);
11,org.joda.time.chrono.GJLocaleSymbols,<init>,146,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"iParseEras = new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,147,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"addSymbols(iParseEras, iEras, integers);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,148,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"if (""en"".equals(locale.getLanguage())) {"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,152,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"iParseEras.put(""BCE"", integers[0]);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,153,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"iParseEras.put(""CE"", integers[1]);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,156,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"iParseDaysOfWeek = new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,157,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"addSymbols(iParseDaysOfWeek, iDaysOfWeek, integers);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,158,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"addSymbols(iParseDaysOfWeek, iShortDaysOfWeek, integers);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,159,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"addNumerals(iParseDaysOfWeek, 1, 7, integers);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,161,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"iParseMonths = new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,162,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"addSymbols(iParseMonths, iMonths, integers);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,163,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"addSymbols(iParseMonths, iShortMonths, integers);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,164,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"addNumerals(iParseMonths, 1, 12, integers);"
11,org.joda.time.chrono.GJLocaleSymbols,<init>,166,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iMaxEraLength = maxLength(iEras);
11,org.joda.time.chrono.GJLocaleSymbols,<init>,167,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iMaxDayOfWeekLength = maxLength(iDaysOfWeek);
11,org.joda.time.chrono.GJLocaleSymbols,<init>,168,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iMaxShortDayOfWeekLength = maxLength(iShortDaysOfWeek);
11,org.joda.time.chrono.GJLocaleSymbols,<init>,169,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iMaxMonthLength = maxLength(iMonths);
11,org.joda.time.chrono.GJLocaleSymbols,<init>,170,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iMaxShortMonthLength = maxLength(iShortMonths);
11,org.joda.time.chrono.GJLocaleSymbols,<init>,171,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,iMaxHalfdayLength = maxLength(iHalfday);
11,org.joda.time.chrono.GJLocaleSymbols,<init>,172,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,}
11,org.joda.time.chrono.GJLocaleSymbols,addNumerals,87,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,for (int i=start; i<=end; i++) {
11,org.joda.time.chrono.GJLocaleSymbols,addNumerals,88,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"map.put(String.valueOf(i).intern(), integers[i]);"
11,org.joda.time.chrono.GJLocaleSymbols,addNumerals,90,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,}
11,org.joda.time.chrono.GJLocaleSymbols,addSymbols,78,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,for (int i=symbols.length; --i>=0; ) {
11,org.joda.time.chrono.GJLocaleSymbols,addSymbols,79,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,String symbol = symbols[i];
11,org.joda.time.chrono.GJLocaleSymbols,addSymbols,80,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,if (symbol != null) {
11,org.joda.time.chrono.GJLocaleSymbols,addSymbols,81,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"map.put(symbol, integers[i]);"
11,org.joda.time.chrono.GJLocaleSymbols,addSymbols,83,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,}
11,org.joda.time.chrono.GJLocaleSymbols,addSymbols,84,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,}
11,org.joda.time.chrono.GJLocaleSymbols,dayOfWeekTextToValue,223,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,Integer day = iParseDaysOfWeek.get(text);
11,org.joda.time.chrono.GJLocaleSymbols,dayOfWeekTextToValue,224,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,if (day != null) {
11,org.joda.time.chrono.GJLocaleSymbols,dayOfWeekTextToValue,225,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,return day.intValue();
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,42,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,if (locale == null) {
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,45,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,int index = System.identityHashCode(locale) & (FAST_CACHE_SIZE - 1);
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,46,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,GJLocaleSymbols symbols = cFastCache[index];
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,47,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,if (symbols != null && symbols.iLocale.get() == locale) {
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,48,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,return symbols;
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,50,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,synchronized (cCache) {
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,51,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,symbols = cCache.get(locale);
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,52,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,if (symbols == null) {
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,53,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,symbols = new GJLocaleSymbols(locale);
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,54,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,"cCache.put(locale, symbols);"
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,56,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,}
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,57,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,cFastCache[index] = symbols;
11,org.joda.time.chrono.GJLocaleSymbols,forLocale,58,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,return symbols;
11,org.joda.time.chrono.GJLocaleSymbols,maxLength,93,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,int max = 0;
11,org.joda.time.chrono.GJLocaleSymbols,maxLength,94,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,for (int i=a.length; --i>=0; ) {
11,org.joda.time.chrono.GJLocaleSymbols,maxLength,95,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,String s = a[i];
11,org.joda.time.chrono.GJLocaleSymbols,maxLength,96,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,if (s != null) {
11,org.joda.time.chrono.GJLocaleSymbols,maxLength,97,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,int len = s.length();
11,org.joda.time.chrono.GJLocaleSymbols,maxLength,98,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,if (len > max) {
11,org.joda.time.chrono.GJLocaleSymbols,maxLength,99,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,max = len;
11,org.joda.time.chrono.GJLocaleSymbols,maxLength,102,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,}
11,org.joda.time.chrono.GJLocaleSymbols,maxLength,103,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,return max;
11,org.joda.time.chrono.GJLocaleSymbols,monthOfYearTextToValue,199,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,Integer month = iParseMonths.get(text);
11,org.joda.time.chrono.GJLocaleSymbols,monthOfYearTextToValue,200,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,if (month != null) {
11,org.joda.time.chrono.GJLocaleSymbols,monthOfYearTextToValue,201,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,return month.intValue();
11,org.joda.time.chrono.GJLocaleSymbols,realignDaysOfWeek,70,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,String[] a = new String[8];
11,org.joda.time.chrono.GJLocaleSymbols,realignDaysOfWeek,71,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,for (int i=1; i<8; i++) {
11,org.joda.time.chrono.GJLocaleSymbols,realignDaysOfWeek,72,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,a[i] = daysOfWeek[(i < 7) ? i + 1 : 1];
11,org.joda.time.chrono.GJLocaleSymbols,realignDaysOfWeek,74,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,return a;
11,org.joda.time.chrono.GJLocaleSymbols,realignMonths,62,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,String[] a = new String[13];
11,org.joda.time.chrono.GJLocaleSymbols,realignMonths,63,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,for (int i=1; i<13; i++) {
11,org.joda.time.chrono.GJLocaleSymbols,realignMonths,64,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,a[i] = months[i - 1];
11,org.joda.time.chrono.GJLocaleSymbols,realignMonths,66,/JodaTime/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java,return a;
11,org.joda.time.chrono.GJMonthOfYearDateTimeField,<init>,37,/JodaTime/src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,"super(chronology, 2);"
11,org.joda.time.chrono.GJMonthOfYearDateTimeField,<init>,38,/JodaTime/src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,}
11,org.joda.time.chrono.GJMonthOfYearDateTimeField,convertText,52,/JodaTime/src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);
11,org.joda.time.chrono.GJYearOfEraDateTimeField,<init>,40,/JodaTime/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,"super(yearField, DateTimeFieldType.yearOfEra());"
11,org.joda.time.chrono.GJYearOfEraDateTimeField,<init>,41,/JodaTime/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,iChronology = chronology;
11,org.joda.time.chrono.GJYearOfEraDateTimeField,<init>,42,/JodaTime/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,}
11,org.joda.time.chrono.GJYearOfEraDateTimeField,getMaximumValue,97,/JodaTime/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,return getWrappedField().getMaximumValue();
11,org.joda.time.chrono.GJYearOfEraDateTimeField,getMinimumValue,93,/JodaTime/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,return 1;
11,org.joda.time.chrono.GregorianChronology,<clinit>,68,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,"private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();"
11,org.joda.time.chrono.GregorianChronology,<clinit>,71,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,INSTANCE_UTC = getInstance(DateTimeZone.UTC);
11,org.joda.time.chrono.GregorianChronology,<clinit>,72,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,}
11,org.joda.time.chrono.GregorianChronology,<init>,148,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,"super(base, param, minDaysInFirstWeek);"
11,org.joda.time.chrono.GregorianChronology,<init>,149,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,}
11,org.joda.time.chrono.GregorianChronology,assemble,191,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (getBase() == null) {
11,org.joda.time.chrono.GregorianChronology,assemble,192,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,super.assemble(fields);
11,org.joda.time.chrono.GregorianChronology,assemble,194,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,}
11,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,202,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,int leapYears = year / 100;
11,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,203,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (year < 0) {
11,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,209,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
11,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,211,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,leapYears = (year >> 2) - leapYears + (leapYears >> 2);
11,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,212,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (isLeapYear(year)) {
11,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,213,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,leapYears--;
11,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,217,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
11,org.joda.time.chrono.GregorianChronology,getApproxMillisAtEpochDividedByTwo,241,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,return (1970L * MILLIS_PER_YEAR) / 2;
11,org.joda.time.chrono.GregorianChronology,getAverageMillisPerMonth,237,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,return MILLIS_PER_MONTH;
11,org.joda.time.chrono.GregorianChronology,getAverageMillisPerYear,229,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,return MILLIS_PER_YEAR;
11,org.joda.time.chrono.GregorianChronology,getAverageMillisPerYearDividedByTwo,233,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,return MILLIS_PER_YEAR / 2;
11,org.joda.time.chrono.GregorianChronology,getInstance,100,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,"return getInstance(zone, 4);"
11,org.joda.time.chrono.GregorianChronology,getInstance,111,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (zone == null) {
11,org.joda.time.chrono.GregorianChronology,getInstance,115,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,synchronized (cCache) {
11,org.joda.time.chrono.GregorianChronology,getInstance,116,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,GregorianChronology[] chronos = cCache.get(zone);
11,org.joda.time.chrono.GregorianChronology,getInstance,117,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (chronos == null) {
11,org.joda.time.chrono.GregorianChronology,getInstance,118,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,chronos = new GregorianChronology[7];
11,org.joda.time.chrono.GregorianChronology,getInstance,119,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,"cCache.put(zone, chronos);"
11,org.joda.time.chrono.GregorianChronology,getInstance,122,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,chrono = chronos[minDaysInFirstWeek - 1];
11,org.joda.time.chrono.GregorianChronology,getInstance,126,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,}
11,org.joda.time.chrono.GregorianChronology,getInstance,127,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (chrono == null) {
11,org.joda.time.chrono.GregorianChronology,getInstance,128,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (zone == DateTimeZone.UTC) {
11,org.joda.time.chrono.GregorianChronology,getInstance,129,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,"chrono = new GregorianChronology(null, null, minDaysInFirstWeek);"
11,org.joda.time.chrono.GregorianChronology,getInstance,135,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,chronos[minDaysInFirstWeek - 1] = chrono;
11,org.joda.time.chrono.GregorianChronology,getInstance,137,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,}
11,org.joda.time.chrono.GregorianChronology,getInstance,138,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,return chrono;
11,org.joda.time.chrono.GregorianChronology,getInstanceUTC,81,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,return INSTANCE_UTC;
11,org.joda.time.chrono.GregorianChronology,getMaxYear,225,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,return MAX_YEAR;
11,org.joda.time.chrono.GregorianChronology,getMinYear,221,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,return MIN_YEAR;
11,org.joda.time.chrono.GregorianChronology,getZone,45,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,public final class GregorianChronology extends BasicGJChronology {
11,org.joda.time.chrono.GregorianChronology,isLeapYear,197,/JodaTime/src/main/java/org/joda/time/chrono/GregorianChronology.java,return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
11,org.joda.time.chrono.ISOChronology,<clinit>,63,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,"private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();"
11,org.joda.time.chrono.ISOChronology,<clinit>,65,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,cFastCache = new ISOChronology[FAST_CACHE_SIZE];
11,org.joda.time.chrono.ISOChronology,<clinit>,66,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());
11,org.joda.time.chrono.ISOChronology,<clinit>,67,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,"cCache.put(DateTimeZone.UTC, INSTANCE_UTC);"
11,org.joda.time.chrono.ISOChronology,<clinit>,68,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,}
11,org.joda.time.chrono.ISOChronology,<init>,122,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,"super(base, null);"
11,org.joda.time.chrono.ISOChronology,<init>,123,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,}
11,org.joda.time.chrono.ISOChronology,assemble,169,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,if (getBase().getZone() == DateTimeZone.UTC) {
11,org.joda.time.chrono.ISOChronology,assemble,171,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,fields.centuryOfEra = new DividedDateTimeField(
11,org.joda.time.chrono.ISOChronology,assemble,173,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,fields.yearOfCentury = new RemainderDateTimeField(
11,org.joda.time.chrono.ISOChronology,assemble,175,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,fields.weekyearOfCentury = new RemainderDateTimeField(
11,org.joda.time.chrono.ISOChronology,assemble,178,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,fields.centuries = fields.centuryOfEra.getDurationField();
11,org.joda.time.chrono.ISOChronology,assemble,180,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,}
11,org.joda.time.chrono.ISOChronology,getInstance,86,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,return getInstance(DateTimeZone.getDefault());
11,org.joda.time.chrono.ISOChronology,getInstance,96,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,if (zone == null) {
11,org.joda.time.chrono.ISOChronology,getInstance,99,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
11,org.joda.time.chrono.ISOChronology,getInstance,100,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,ISOChronology chrono = cFastCache[index];
11,org.joda.time.chrono.ISOChronology,getInstance,101,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,if (chrono != null && chrono.getZone() == zone) {
11,org.joda.time.chrono.ISOChronology,getInstance,102,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,return chrono;
11,org.joda.time.chrono.ISOChronology,getInstance,104,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,synchronized (cCache) {
11,org.joda.time.chrono.ISOChronology,getInstance,105,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,chrono = cCache.get(zone);
11,org.joda.time.chrono.ISOChronology,getInstance,106,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,if (chrono == null) {
11,org.joda.time.chrono.ISOChronology,getInstance,110,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,}
11,org.joda.time.chrono.ISOChronology,getInstance,111,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,cFastCache[index] = chrono;
11,org.joda.time.chrono.ISOChronology,getInstance,112,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,return chrono;
11,org.joda.time.chrono.ISOChronology,getInstanceUTC,77,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,return INSTANCE_UTC;
11,org.joda.time.chrono.ISOChronology,withUTC,133,/JodaTime/src/main/java/org/joda/time/chrono/ISOChronology.java,return INSTANCE_UTC;
11,org.joda.time.chrono.ISOYearOfEraDateTimeField,<clinit>,40,/JodaTime/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();
11,org.joda.time.chrono.ISOYearOfEraDateTimeField,<init>,46,/JodaTime/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,"super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());"
11,org.joda.time.chrono.ISOYearOfEraDateTimeField,<init>,47,/JodaTime/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,}
11,org.joda.time.chrono.ISOYearOfEraDateTimeField,getMaximumValue,91,/JodaTime/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,return getWrappedField().getMaximumValue();
11,org.joda.time.chrono.ISOYearOfEraDateTimeField,getMinimumValue,87,/JodaTime/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,return 0;
11,org.joda.time.chrono.LenientChronology,<init>,59,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,"super(base, null);"
11,org.joda.time.chrono.LenientChronology,<init>,60,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,}
11,org.joda.time.chrono.LenientChronology,assemble,87,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.year = convertField(fields.year);
11,org.joda.time.chrono.LenientChronology,assemble,88,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.yearOfEra = convertField(fields.yearOfEra);
11,org.joda.time.chrono.LenientChronology,assemble,89,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.yearOfCentury = convertField(fields.yearOfCentury);
11,org.joda.time.chrono.LenientChronology,assemble,90,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.centuryOfEra = convertField(fields.centuryOfEra);
11,org.joda.time.chrono.LenientChronology,assemble,91,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.era = convertField(fields.era);
11,org.joda.time.chrono.LenientChronology,assemble,92,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.dayOfWeek = convertField(fields.dayOfWeek);
11,org.joda.time.chrono.LenientChronology,assemble,93,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.dayOfMonth = convertField(fields.dayOfMonth);
11,org.joda.time.chrono.LenientChronology,assemble,94,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.dayOfYear = convertField(fields.dayOfYear);
11,org.joda.time.chrono.LenientChronology,assemble,95,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.monthOfYear = convertField(fields.monthOfYear);
11,org.joda.time.chrono.LenientChronology,assemble,96,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.weekOfWeekyear = convertField(fields.weekOfWeekyear);
11,org.joda.time.chrono.LenientChronology,assemble,97,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.weekyear = convertField(fields.weekyear);
11,org.joda.time.chrono.LenientChronology,assemble,98,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.weekyearOfCentury = convertField(fields.weekyearOfCentury);
11,org.joda.time.chrono.LenientChronology,assemble,100,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.millisOfSecond = convertField(fields.millisOfSecond);
11,org.joda.time.chrono.LenientChronology,assemble,101,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.millisOfDay = convertField(fields.millisOfDay);
11,org.joda.time.chrono.LenientChronology,assemble,102,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.secondOfMinute = convertField(fields.secondOfMinute);
11,org.joda.time.chrono.LenientChronology,assemble,103,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.secondOfDay = convertField(fields.secondOfDay);
11,org.joda.time.chrono.LenientChronology,assemble,104,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.minuteOfHour = convertField(fields.minuteOfHour);
11,org.joda.time.chrono.LenientChronology,assemble,105,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.minuteOfDay = convertField(fields.minuteOfDay);
11,org.joda.time.chrono.LenientChronology,assemble,106,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.hourOfDay = convertField(fields.hourOfDay);
11,org.joda.time.chrono.LenientChronology,assemble,107,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.hourOfHalfday = convertField(fields.hourOfHalfday);
11,org.joda.time.chrono.LenientChronology,assemble,108,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.clockhourOfDay = convertField(fields.clockhourOfDay);
11,org.joda.time.chrono.LenientChronology,assemble,109,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday);
11,org.joda.time.chrono.LenientChronology,assemble,110,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,fields.halfdayOfDay = convertField(fields.halfdayOfDay);
11,org.joda.time.chrono.LenientChronology,assemble,111,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,}
11,org.joda.time.chrono.LenientChronology,convertField,114,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,"return LenientDateTimeField.getInstance(field, getBase());"
11,org.joda.time.chrono.LenientChronology,getInstance,45,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,if (base == null) {
11,org.joda.time.chrono.LenientChronology,getInstance,48,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,return new LenientChronology(base);
11,org.joda.time.chrono.LenientChronology,withUTC,63,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,if (iWithUTC == null) {
11,org.joda.time.chrono.LenientChronology,withUTC,64,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,if (getZone() == DateTimeZone.UTC) {
11,org.joda.time.chrono.LenientChronology,withUTC,65,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,iWithUTC = this;
11,org.joda.time.chrono.LenientChronology,withUTC,70,/JodaTime/src/main/java/org/joda/time/chrono/LenientChronology.java,return iWithUTC;
11,org.joda.time.convert.AbstractConverter,<init>,38,/JodaTime/src/main/java/org/joda/time/convert/AbstractConverter.java,super();
11,org.joda.time.convert.AbstractConverter,<init>,39,/JodaTime/src/main/java/org/joda/time/convert/AbstractConverter.java,}
11,org.joda.time.convert.AbstractConverter,getChronology,82,/JodaTime/src/main/java/org/joda/time/convert/AbstractConverter.java,return DateTimeUtils.getChronology(chrono);
11,org.joda.time.convert.CalendarConverter,<clinit>,43,/JodaTime/src/main/java/org/joda/time/convert/CalendarConverter.java,static final CalendarConverter INSTANCE = new CalendarConverter();
11,org.joda.time.convert.CalendarConverter,<init>,49,/JodaTime/src/main/java/org/joda/time/convert/CalendarConverter.java,super();
11,org.joda.time.convert.CalendarConverter,<init>,50,/JodaTime/src/main/java/org/joda/time/convert/CalendarConverter.java,}
11,org.joda.time.convert.CalendarConverter,getSupportedType,132,/JodaTime/src/main/java/org/joda/time/convert/CalendarConverter.java,return Calendar.class;
11,org.joda.time.convert.ConverterManager,<init>,105,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,super();
11,org.joda.time.convert.ConverterManager,<init>,107,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,iInstantConverters = new ConverterSet(new Converter[] {
11,org.joda.time.convert.ConverterManager,<init>,116,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,iPartialConverters = new ConverterSet(new Converter[] {
11,org.joda.time.convert.ConverterManager,<init>,126,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,iDurationConverters = new ConverterSet(new Converter[] {
11,org.joda.time.convert.ConverterManager,<init>,134,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,iPeriodConverters = new ConverterSet(new Converter[] {
11,org.joda.time.convert.ConverterManager,<init>,142,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,iIntervalConverters = new ConverterSet(new Converter[] {
11,org.joda.time.convert.ConverterManager,<init>,147,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,}
11,org.joda.time.convert.ConverterManager,getInstance,89,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,if (INSTANCE == null) {
11,org.joda.time.convert.ConverterManager,getInstance,90,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,INSTANCE = new ConverterManager();
11,org.joda.time.convert.ConverterManager,getInstance,92,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,return INSTANCE;
11,org.joda.time.convert.ConverterManager,getInstantConverter,160,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,InstantConverter converter =
11,org.joda.time.convert.ConverterManager,getInstantConverter,162,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,if (converter != null) {
11,org.joda.time.convert.ConverterManager,getInstantConverter,163,/JodaTime/src/main/java/org/joda/time/convert/ConverterManager.java,return converter;
11,org.joda.time.convert.ConverterSet,<init>,32,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,ConverterSet(Converter[] converters) {
11,org.joda.time.convert.ConverterSet,<init>,35,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,iConverters = converters;
11,org.joda.time.convert.ConverterSet,<init>,36,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,iSelectEntries = new Entry[1 << 4]; // 16
11,org.joda.time.convert.ConverterSet,<init>,37,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,}
11,org.joda.time.convert.ConverterSet,remove,216,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,Converter[] converters = iConverters;
11,org.joda.time.convert.ConverterSet,remove,217,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,int length = converters.length;
11,org.joda.time.convert.ConverterSet,remove,218,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,if (index >= length) {
11,org.joda.time.convert.ConverterSet,remove,222,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,if (removed != null) {
11,org.joda.time.convert.ConverterSet,remove,226,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,Converter[] copy = new Converter[length - 1];
11,org.joda.time.convert.ConverterSet,remove,228,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,int j = 0;
11,org.joda.time.convert.ConverterSet,remove,229,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,for (int i=0; i<length; i++) {
11,org.joda.time.convert.ConverterSet,remove,230,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,if (i != index) {
11,org.joda.time.convert.ConverterSet,remove,231,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,copy[j++] = converters[i];
11,org.joda.time.convert.ConverterSet,remove,235,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,return new ConverterSet(copy);
11,org.joda.time.convert.ConverterSet,select,49,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,Entry[] entries = iSelectEntries;
11,org.joda.time.convert.ConverterSet,select,50,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,int length = entries.length;
11,org.joda.time.convert.ConverterSet,select,51,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,int index = type == null ? 0 : type.hashCode() & (length - 1);
11,org.joda.time.convert.ConverterSet,select,55,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,while ((e = entries[index]) != null) {
11,org.joda.time.convert.ConverterSet,select,56,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,if (e.iType == type) {
11,org.joda.time.convert.ConverterSet,select,57,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,return e.iConverter;
11,org.joda.time.convert.ConverterSet,select,66,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,"Converter converter = selectSlow(this, type);"
11,org.joda.time.convert.ConverterSet,select,67,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,"e = new Entry(type, converter);"
11,org.joda.time.convert.ConverterSet,select,79,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,entries = (Entry[])entries.clone();
11,org.joda.time.convert.ConverterSet,select,82,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,entries[index] = e;
11,org.joda.time.convert.ConverterSet,select,85,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,for (int i=0; i<length; i++) {
11,org.joda.time.convert.ConverterSet,select,86,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,if (entries[i] == null) {
11,org.joda.time.convert.ConverterSet,select,88,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,iSelectEntries = entries;
11,org.joda.time.convert.ConverterSet,select,89,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,return converter;
11,org.joda.time.convert.ConverterSet,selectSlow,243,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,Converter[] converters = set.iConverters;
11,org.joda.time.convert.ConverterSet,selectSlow,244,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,int length = converters.length;
11,org.joda.time.convert.ConverterSet,selectSlow,247,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,for (int i=length; --i>=0; ) {
11,org.joda.time.convert.ConverterSet,selectSlow,248,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,converter = converters[i];
11,org.joda.time.convert.ConverterSet,selectSlow,249,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,Class<?> supportedType = converter.getSupportedType();
11,org.joda.time.convert.ConverterSet,selectSlow,251,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,if (supportedType == type) {
11,org.joda.time.convert.ConverterSet,selectSlow,253,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,return converter;
11,org.joda.time.convert.ConverterSet,selectSlow,256,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {
11,org.joda.time.convert.ConverterSet,selectSlow,258,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,"set = set.remove(i, null);"
11,org.joda.time.convert.ConverterSet,selectSlow,259,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,converters = set.iConverters;
11,org.joda.time.convert.ConverterSet,selectSlow,260,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,length = converters.length;
11,org.joda.time.convert.ConverterSet,selectSlow,262,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,}
11,org.joda.time.convert.ConverterSet$Entry,<init>,322,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,"Entry(Class<?> type, Converter converter) {"
11,org.joda.time.convert.ConverterSet$Entry,<init>,323,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,iType = type;
11,org.joda.time.convert.ConverterSet$Entry,<init>,324,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,iConverter = converter;
11,org.joda.time.convert.ConverterSet$Entry,<init>,325,/JodaTime/src/main/java/org/joda/time/convert/ConverterSet.java,}
11,org.joda.time.convert.DateConverter,<clinit>,35,/JodaTime/src/main/java/org/joda/time/convert/DateConverter.java,static final DateConverter INSTANCE = new DateConverter();
11,org.joda.time.convert.DateConverter,<init>,41,/JodaTime/src/main/java/org/joda/time/convert/DateConverter.java,super();
11,org.joda.time.convert.DateConverter,<init>,42,/JodaTime/src/main/java/org/joda/time/convert/DateConverter.java,}
11,org.joda.time.convert.DateConverter,getSupportedType,66,/JodaTime/src/main/java/org/joda/time/convert/DateConverter.java,return Date.class;
11,org.joda.time.convert.LongConverter,<clinit>,34,/JodaTime/src/main/java/org/joda/time/convert/LongConverter.java,static final LongConverter INSTANCE = new LongConverter();
11,org.joda.time.convert.LongConverter,<init>,40,/JodaTime/src/main/java/org/joda/time/convert/LongConverter.java,super();
11,org.joda.time.convert.LongConverter,<init>,41,/JodaTime/src/main/java/org/joda/time/convert/LongConverter.java,}
11,org.joda.time.convert.LongConverter,getSupportedType,77,/JodaTime/src/main/java/org/joda/time/convert/LongConverter.java,return Long.class;
11,org.joda.time.convert.NullConverter,<clinit>,39,/JodaTime/src/main/java/org/joda/time/convert/NullConverter.java,static final NullConverter INSTANCE = new NullConverter();
11,org.joda.time.convert.NullConverter,<init>,45,/JodaTime/src/main/java/org/joda/time/convert/NullConverter.java,super();
11,org.joda.time.convert.NullConverter,<init>,46,/JodaTime/src/main/java/org/joda/time/convert/NullConverter.java,}
11,org.joda.time.convert.NullConverter,getSupportedType,95,/JodaTime/src/main/java/org/joda/time/convert/NullConverter.java,return null;
11,org.joda.time.convert.ReadableDurationConverter,<clinit>,36,/JodaTime/src/main/java/org/joda/time/convert/ReadableDurationConverter.java,static final ReadableDurationConverter INSTANCE = new ReadableDurationConverter();
11,org.joda.time.convert.ReadableDurationConverter,<init>,42,/JodaTime/src/main/java/org/joda/time/convert/ReadableDurationConverter.java,super();
11,org.joda.time.convert.ReadableDurationConverter,<init>,43,/JodaTime/src/main/java/org/joda/time/convert/ReadableDurationConverter.java,}
11,org.joda.time.convert.ReadableInstantConverter,<clinit>,36,/JodaTime/src/main/java/org/joda/time/convert/ReadableInstantConverter.java,static final ReadableInstantConverter INSTANCE = new ReadableInstantConverter();
11,org.joda.time.convert.ReadableInstantConverter,<init>,42,/JodaTime/src/main/java/org/joda/time/convert/ReadableInstantConverter.java,super();
11,org.joda.time.convert.ReadableInstantConverter,<init>,43,/JodaTime/src/main/java/org/joda/time/convert/ReadableInstantConverter.java,}
11,org.joda.time.convert.ReadableIntervalConverter,<clinit>,36,/JodaTime/src/main/java/org/joda/time/convert/ReadableIntervalConverter.java,static final ReadableIntervalConverter INSTANCE = new ReadableIntervalConverter();
11,org.joda.time.convert.ReadableIntervalConverter,<init>,42,/JodaTime/src/main/java/org/joda/time/convert/ReadableIntervalConverter.java,super();
11,org.joda.time.convert.ReadableIntervalConverter,<init>,43,/JodaTime/src/main/java/org/joda/time/convert/ReadableIntervalConverter.java,}
11,org.joda.time.convert.ReadablePartialConverter,<clinit>,35,/JodaTime/src/main/java/org/joda/time/convert/ReadablePartialConverter.java,static final ReadablePartialConverter INSTANCE = new ReadablePartialConverter();
11,org.joda.time.convert.ReadablePartialConverter,<init>,41,/JodaTime/src/main/java/org/joda/time/convert/ReadablePartialConverter.java,super();
11,org.joda.time.convert.ReadablePartialConverter,<init>,42,/JodaTime/src/main/java/org/joda/time/convert/ReadablePartialConverter.java,}
11,org.joda.time.convert.ReadablePeriodConverter,<clinit>,36,/JodaTime/src/main/java/org/joda/time/convert/ReadablePeriodConverter.java,static final ReadablePeriodConverter INSTANCE = new ReadablePeriodConverter();
11,org.joda.time.convert.ReadablePeriodConverter,<init>,42,/JodaTime/src/main/java/org/joda/time/convert/ReadablePeriodConverter.java,super();
11,org.joda.time.convert.ReadablePeriodConverter,<init>,43,/JodaTime/src/main/java/org/joda/time/convert/ReadablePeriodConverter.java,}
11,org.joda.time.convert.StringConverter,<clinit>,44,/JodaTime/src/main/java/org/joda/time/convert/StringConverter.java,static final StringConverter INSTANCE = new StringConverter();
11,org.joda.time.convert.StringConverter,<init>,50,/JodaTime/src/main/java/org/joda/time/convert/StringConverter.java,super();
11,org.joda.time.convert.StringConverter,<init>,51,/JodaTime/src/main/java/org/joda/time/convert/StringConverter.java,}
11,org.joda.time.convert.StringConverter,getInstantMillis,63,/JodaTime/src/main/java/org/joda/time/convert/StringConverter.java,String str = (String) object;
11,org.joda.time.convert.StringConverter,getInstantMillis,64,/JodaTime/src/main/java/org/joda/time/convert/StringConverter.java,DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();
11,org.joda.time.convert.StringConverter,getInstantMillis,65,/JodaTime/src/main/java/org/joda/time/convert/StringConverter.java,return p.withChronology(chrono).parseMillis(str);
11,org.joda.time.convert.StringConverter,getSupportedType,241,/JodaTime/src/main/java/org/joda/time/convert/StringConverter.java,return String.class;
11,org.joda.time.field.BaseDateTimeField,<init>,50,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,super();
11,org.joda.time.field.BaseDateTimeField,<init>,51,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,if (type == null) {
11,org.joda.time.field.BaseDateTimeField,<init>,54,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,iType = type;
11,org.joda.time.field.BaseDateTimeField,<init>,55,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,}
11,org.joda.time.field.BaseDateTimeField,add,253,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,"return getDurationField().add(instant, value);"
11,org.joda.time.field.BaseDateTimeField,add,267,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,"return getDurationField().add(instant, value);"
11,org.joda.time.field.BaseDateTimeField,getMaximumValue,792,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,return getMaximumValue();
11,org.joda.time.field.BaseDateTimeField,getType,58,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,return iType;
11,org.joda.time.field.BaseDateTimeField,isSupported,69,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,return true;
11,org.joda.time.field.BaseDateTimeField,set,618,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,"int value = convertText(text, locale);"
11,org.joda.time.field.BaseDateTimeField,set,619,/JodaTime/src/main/java/org/joda/time/field/BaseDateTimeField.java,"return set(instant, value);"
11,org.joda.time.field.BaseDurationField,<init>,47,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,super();
11,org.joda.time.field.BaseDurationField,<init>,48,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,if (type == null) {
11,org.joda.time.field.BaseDurationField,<init>,51,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,iType = type;
11,org.joda.time.field.BaseDurationField,<init>,52,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,}
11,org.joda.time.field.BaseDurationField,compareTo,38,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,public abstract class BaseDurationField extends DurationField implements Serializable {
11,org.joda.time.field.BaseDurationField,compareTo,146,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,long otherMillis = otherField.getUnitMillis();
11,org.joda.time.field.BaseDurationField,compareTo,147,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,long thisMillis = getUnitMillis();
11,org.joda.time.field.BaseDurationField,compareTo,149,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,if (thisMillis == otherMillis) {
11,org.joda.time.field.BaseDurationField,compareTo,152,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,if (thisMillis < otherMillis) {
11,org.joda.time.field.BaseDurationField,compareTo,155,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,return 1;
11,org.joda.time.field.BaseDurationField,getDifference,141,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,"return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
11,org.joda.time.field.BaseDurationField,isSupported,66,/JodaTime/src/main/java/org/joda/time/field/BaseDurationField.java,return true;
11,org.joda.time.field.DecoratedDateTimeField,<init>,54,/JodaTime/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,super(type);
11,org.joda.time.field.DecoratedDateTimeField,<init>,55,/JodaTime/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,if (field == null) {
11,org.joda.time.field.DecoratedDateTimeField,<init>,58,/JodaTime/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,if (!field.isSupported()) {
11,org.joda.time.field.DecoratedDateTimeField,<init>,61,/JodaTime/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,iField = field;
11,org.joda.time.field.DecoratedDateTimeField,<init>,62,/JodaTime/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,}
11,org.joda.time.field.DecoratedDateTimeField,getDurationField,86,/JodaTime/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,return iField.getDurationField();
11,org.joda.time.field.DecoratedDateTimeField,getWrappedField,70,/JodaTime/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,return iField;
11,org.joda.time.field.DecoratedDateTimeField,isLenient,74,/JodaTime/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,return iField.isLenient();
11,org.joda.time.field.DecoratedDurationField,<init>,52,/JodaTime/src/main/java/org/joda/time/field/DecoratedDurationField.java,super(type);
11,org.joda.time.field.DecoratedDurationField,<init>,53,/JodaTime/src/main/java/org/joda/time/field/DecoratedDurationField.java,if (field == null) {
11,org.joda.time.field.DecoratedDurationField,<init>,56,/JodaTime/src/main/java/org/joda/time/field/DecoratedDurationField.java,if (!field.isSupported()) {
11,org.joda.time.field.DecoratedDurationField,<init>,59,/JodaTime/src/main/java/org/joda/time/field/DecoratedDurationField.java,iField = field;
11,org.joda.time.field.DecoratedDurationField,<init>,60,/JodaTime/src/main/java/org/joda/time/field/DecoratedDurationField.java,}
11,org.joda.time.field.DelegatedDateTimeField,<init>,52,/JodaTime/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,"this(field, null);"
11,org.joda.time.field.DelegatedDateTimeField,<init>,53,/JodaTime/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,}
11,org.joda.time.field.DelegatedDateTimeField,<init>,62,/JodaTime/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,super();
11,org.joda.time.field.DelegatedDateTimeField,<init>,63,/JodaTime/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,if (field == null) {
11,org.joda.time.field.DelegatedDateTimeField,<init>,66,/JodaTime/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,iField = field;
11,org.joda.time.field.DelegatedDateTimeField,<init>,67,/JodaTime/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,iType = (type == null ? field.getType() : type);
11,org.joda.time.field.DelegatedDateTimeField,<init>,68,/JodaTime/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,}
11,org.joda.time.field.DelegatedDateTimeField,get,96,/JodaTime/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iField.get(instant);
11,org.joda.time.field.DelegatedDateTimeField,getRangeDurationField,196,/JodaTime/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iField.getRangeDurationField();
11,org.joda.time.field.DelegatedDateTimeField,getType,80,/JodaTime/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iType;
11,org.joda.time.field.DividedDateTimeField,<init>,56,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,"super(field, type);"
11,org.joda.time.field.DividedDateTimeField,<init>,58,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,if (divisor < 2) {
11,org.joda.time.field.DividedDateTimeField,<init>,62,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,DurationField unitField = field.getDurationField();
11,org.joda.time.field.DividedDateTimeField,<init>,63,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,if (unitField == null) {
11,org.joda.time.field.DividedDateTimeField,<init>,66,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,iDurationField = new ScaledDurationField(
11,org.joda.time.field.DividedDateTimeField,<init>,70,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,iDivisor = divisor;
11,org.joda.time.field.DividedDateTimeField,<init>,72,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,int i = field.getMinimumValue();
11,org.joda.time.field.DividedDateTimeField,<init>,73,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
11,org.joda.time.field.DividedDateTimeField,<init>,75,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,int j = field.getMaximumValue();
11,org.joda.time.field.DividedDateTimeField,<init>,76,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
11,org.joda.time.field.DividedDateTimeField,<init>,78,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,iMin = min;
11,org.joda.time.field.DividedDateTimeField,<init>,79,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,iMax = max;
11,org.joda.time.field.DividedDateTimeField,<init>,80,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,}
11,org.joda.time.field.DividedDateTimeField,getDurationField,182,/JodaTime/src/main/java/org/joda/time/field/DividedDateTimeField.java,return iDurationField;
11,org.joda.time.field.FieldUtils,safeAdd,64,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,int sum = val1 + val2;
11,org.joda.time.field.FieldUtils,safeAdd,66,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
11,org.joda.time.field.FieldUtils,safeAdd,70,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,return sum;
11,org.joda.time.field.FieldUtils,safeAdd,82,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,long sum = val1 + val2;
11,org.joda.time.field.FieldUtils,safeAdd,84,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
11,org.joda.time.field.FieldUtils,safeAdd,88,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,return sum;
11,org.joda.time.field.FieldUtils,safeMultiply,162,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,if (val2 == 1) {
11,org.joda.time.field.FieldUtils,safeMultiply,165,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,if (val2 == 0) {
11,org.joda.time.field.FieldUtils,safeMultiply,168,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,long total = val1 * val2;
11,org.joda.time.field.FieldUtils,safeMultiply,169,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,if (total / val2 != val1) {
11,org.joda.time.field.FieldUtils,safeMultiply,173,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,return total;
11,org.joda.time.field.FieldUtils,safeSubtract,100,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,long diff = val1 - val2;
11,org.joda.time.field.FieldUtils,safeSubtract,102,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
11,org.joda.time.field.FieldUtils,safeSubtract,106,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,return diff;
11,org.joda.time.field.FieldUtils,safeToInt,184,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
11,org.joda.time.field.FieldUtils,safeToInt,185,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,return (int) value;
11,org.joda.time.field.FieldUtils,verifyValueBounds,214,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,if ((value < lowerBound) || (value > upperBound)) {
11,org.joda.time.field.FieldUtils,verifyValueBounds,219,/JodaTime/src/main/java/org/joda/time/field/FieldUtils.java,}
11,org.joda.time.field.ImpreciseDateTimeField,<init>,55,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,super(type);
11,org.joda.time.field.ImpreciseDateTimeField,<init>,56,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,iUnitMillis = unitMillis;
11,org.joda.time.field.ImpreciseDateTimeField,<init>,57,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,iDurationField = new LinkedDurationField(type.getDurationType());
11,org.joda.time.field.ImpreciseDateTimeField,<init>,58,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,}
11,org.joda.time.field.ImpreciseDateTimeField,getDifference,91,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,"return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));"
11,org.joda.time.field.ImpreciseDateTimeField,getDurationField,137,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,return iDurationField;
11,org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField,<init>,151,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,LinkedDurationField(DurationFieldType type) {
11,org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField,<init>,152,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,super(type);
11,org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField,<init>,153,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,}
11,org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField,add,182,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,"return ImpreciseDateTimeField.this.add(instant, value);"
11,org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField,getDifference,190,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,return ImpreciseDateTimeField.this
11,org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField,getUnitMillis,160,/JodaTime/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,return iUnitMillis;
11,org.joda.time.field.LenientDateTimeField,<init>,57,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,super(field);
11,org.joda.time.field.LenientDateTimeField,<init>,58,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,iBase = base;
11,org.joda.time.field.LenientDateTimeField,<init>,59,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,}
11,org.joda.time.field.LenientDateTimeField,getInstance,44,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,if (field == null) {
11,org.joda.time.field.LenientDateTimeField,getInstance,47,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,if (field instanceof StrictDateTimeField) {
11,org.joda.time.field.LenientDateTimeField,getInstance,50,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,if (field.isLenient()) {
11,org.joda.time.field.LenientDateTimeField,getInstance,53,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,"return new LenientDateTimeField(field, base);"
11,org.joda.time.field.LenientDateTimeField,set,72,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,long localInstant = iBase.getZone().convertUTCToLocal(instant);
11,org.joda.time.field.LenientDateTimeField,set,73,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,"long difference = FieldUtils.safeSubtract(value, get(instant));"
11,org.joda.time.field.LenientDateTimeField,set,74,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,"localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);"
11,org.joda.time.field.LenientDateTimeField,set,75,/JodaTime/src/main/java/org/joda/time/field/LenientDateTimeField.java,"return iBase.getZone().convertLocalToUTC(localInstant, false);"
11,org.joda.time.field.MillisDurationField,<clinit>,38,/JodaTime/src/main/java/org/joda/time/field/MillisDurationField.java,public static final DurationField INSTANCE = new MillisDurationField();
11,org.joda.time.field.MillisDurationField,<init>,44,/JodaTime/src/main/java/org/joda/time/field/MillisDurationField.java,super();
11,org.joda.time.field.MillisDurationField,<init>,45,/JodaTime/src/main/java/org/joda/time/field/MillisDurationField.java,}
11,org.joda.time.field.MillisDurationField,add,117,/JodaTime/src/main/java/org/joda/time/field/MillisDurationField.java,"return FieldUtils.safeAdd(instant, value);"
11,org.joda.time.field.MillisDurationField,getUnitMillis,80,/JodaTime/src/main/java/org/joda/time/field/MillisDurationField.java,return 1;
11,org.joda.time.field.MillisDurationField,isPrecise,71,/JodaTime/src/main/java/org/joda/time/field/MillisDurationField.java,return true;
11,org.joda.time.field.MillisDurationField,isSupported,62,/JodaTime/src/main/java/org/joda/time/field/MillisDurationField.java,return true;
11,org.joda.time.field.OffsetDateTimeField,<init>,46,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,"this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);"
11,org.joda.time.field.OffsetDateTimeField,<init>,47,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,}
11,org.joda.time.field.OffsetDateTimeField,<init>,58,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,"this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);"
11,org.joda.time.field.OffsetDateTimeField,<init>,59,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,}
11,org.joda.time.field.OffsetDateTimeField,<init>,73,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,"super(field, type);"
11,org.joda.time.field.OffsetDateTimeField,<init>,75,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,if (offset == 0) {
11,org.joda.time.field.OffsetDateTimeField,<init>,79,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,iOffset = offset;
11,org.joda.time.field.OffsetDateTimeField,<init>,81,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,if (minValue < (field.getMinimumValue() + offset)) {
11,org.joda.time.field.OffsetDateTimeField,<init>,82,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,iMin = field.getMinimumValue() + offset;
11,org.joda.time.field.OffsetDateTimeField,<init>,86,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,if (maxValue > (field.getMaximumValue() + offset)) {
11,org.joda.time.field.OffsetDateTimeField,<init>,87,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,iMax = field.getMaximumValue() + offset;
11,org.joda.time.field.OffsetDateTimeField,<init>,91,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,}
11,org.joda.time.field.OffsetDateTimeField,getMaximumValue,183,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,return iMax;
11,org.joda.time.field.OffsetDateTimeField,getMinimumValue,174,/JodaTime/src/main/java/org/joda/time/field/OffsetDateTimeField.java,return iMin;
11,org.joda.time.field.PreciseDateTimeField,<init>,57,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,"super(type, unit);"
11,org.joda.time.field.PreciseDateTimeField,<init>,59,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,if (!range.isPrecise()) {
11,org.joda.time.field.PreciseDateTimeField,<init>,63,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,long rangeMillis = range.getUnitMillis();
11,org.joda.time.field.PreciseDateTimeField,<init>,64,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,iRange = (int)(rangeMillis / getUnitMillis());
11,org.joda.time.field.PreciseDateTimeField,<init>,65,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,if (iRange < 2) {
11,org.joda.time.field.PreciseDateTimeField,<init>,69,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,iRangeField = range;
11,org.joda.time.field.PreciseDateTimeField,<init>,70,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,}
11,org.joda.time.field.PreciseDateTimeField,get,79,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,if (instant >= 0) {
11,org.joda.time.field.PreciseDateTimeField,get,80,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,return (int) ((instant / getUnitMillis()) % iRange);
11,org.joda.time.field.PreciseDateTimeField,get,82,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
11,org.joda.time.field.PreciseDateTimeField,getMaximumValue,131,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,return iRange - 1;
11,org.joda.time.field.PreciseDateTimeField,getRangeDurationField,122,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,return iRangeField;
11,org.joda.time.field.PreciseDateTimeField,set,111,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,"FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());"
11,org.joda.time.field.PreciseDateTimeField,set,112,/JodaTime/src/main/java/org/joda/time/field/PreciseDateTimeField.java,return instant + (value - get(instant)) * iUnitMillis;
11,org.joda.time.field.PreciseDurationDateTimeField,<init>,48,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,super(type);
11,org.joda.time.field.PreciseDurationDateTimeField,<init>,50,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,if (!unit.isPrecise()) {
11,org.joda.time.field.PreciseDurationDateTimeField,<init>,54,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,iUnitMillis = unit.getUnitMillis();
11,org.joda.time.field.PreciseDurationDateTimeField,<init>,55,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,if (iUnitMillis < 1) {
11,org.joda.time.field.PreciseDurationDateTimeField,<init>,59,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,iUnitField = unit;
11,org.joda.time.field.PreciseDurationDateTimeField,<init>,60,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,}
11,org.joda.time.field.PreciseDurationDateTimeField,getDurationField,141,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return iUnitField;
11,org.joda.time.field.PreciseDurationDateTimeField,getMaximumValueForSet,163,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return getMaximumValue(instant);
11,org.joda.time.field.PreciseDurationDateTimeField,getMinimumValue,150,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return 0;
11,org.joda.time.field.PreciseDurationDateTimeField,getUnitMillis,154,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return iUnitMillis;
11,org.joda.time.field.PreciseDurationDateTimeField,isLenient,66,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return false;
11,org.joda.time.field.PreciseDurationDateTimeField,roundFloor,92,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,if (instant >= 0) {
11,org.joda.time.field.PreciseDurationDateTimeField,roundFloor,93,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return instant - instant % iUnitMillis;
11,org.joda.time.field.PreciseDurationDateTimeField,roundFloor,95,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,instant += 1;
11,org.joda.time.field.PreciseDurationDateTimeField,roundFloor,96,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return instant - instant % iUnitMillis - iUnitMillis;
11,org.joda.time.field.PreciseDurationDateTimeField,set,78,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,"FieldUtils.verifyValueBounds(this, value, getMinimumValue(),"
11,org.joda.time.field.PreciseDurationDateTimeField,set,80,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return instant + (value - get(instant)) * iUnitMillis;
11,org.joda.time.field.PreciseDurationField,<init>,43,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,super(type);
11,org.joda.time.field.PreciseDurationField,<init>,44,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,iUnitMillis = unitMillis;
11,org.joda.time.field.PreciseDurationField,<init>,45,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,}
11,org.joda.time.field.PreciseDurationField,add,104,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,long addition = value * iUnitMillis;  // safe
11,org.joda.time.field.PreciseDurationField,add,105,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,"return FieldUtils.safeAdd(instant, addition);"
11,org.joda.time.field.PreciseDurationField,add,109,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,"long addition = FieldUtils.safeMultiply(value, iUnitMillis);"
11,org.joda.time.field.PreciseDurationField,add,110,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,"return FieldUtils.safeAdd(instant, addition);"
11,org.joda.time.field.PreciseDurationField,getDifferenceAsLong,114,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,"long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);"
11,org.joda.time.field.PreciseDurationField,getDifferenceAsLong,115,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,return difference / iUnitMillis;
11,org.joda.time.field.PreciseDurationField,getUnitMillis,63,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,return iUnitMillis;
11,org.joda.time.field.PreciseDurationField,isPrecise,54,/JodaTime/src/main/java/org/joda/time/field/PreciseDurationField.java,return true;
11,org.joda.time.field.RemainderDateTimeField,<init>,52,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,"super(field, type);"
11,org.joda.time.field.RemainderDateTimeField,<init>,54,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,if (divisor < 2) {
11,org.joda.time.field.RemainderDateTimeField,<init>,58,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,DurationField rangeField = field.getDurationField();
11,org.joda.time.field.RemainderDateTimeField,<init>,59,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,if (rangeField == null) {
11,org.joda.time.field.RemainderDateTimeField,<init>,62,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,iRangeField = new ScaledDurationField(
11,org.joda.time.field.RemainderDateTimeField,<init>,66,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,iDivisor = divisor;
11,org.joda.time.field.RemainderDateTimeField,<init>,67,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,}
11,org.joda.time.field.RemainderDateTimeField,<init>,76,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,"this(dividedField, dividedField.getType());"
11,org.joda.time.field.RemainderDateTimeField,<init>,77,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,}
11,org.joda.time.field.RemainderDateTimeField,<init>,87,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,"super(dividedField.getWrappedField(), type);"
11,org.joda.time.field.RemainderDateTimeField,<init>,88,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,iDivisor = dividedField.iDivisor;
11,org.joda.time.field.RemainderDateTimeField,<init>,89,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,iRangeField = dividedField.iDurationField;
11,org.joda.time.field.RemainderDateTimeField,<init>,90,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,}
11,org.joda.time.field.RemainderDateTimeField,getMaximumValue,158,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,return iDivisor - 1;
11,org.joda.time.field.RemainderDateTimeField,getMinimumValue,148,/JodaTime/src/main/java/org/joda/time/field/RemainderDateTimeField.java,return 0;
11,org.joda.time.field.ScaledDurationField,<init>,47,/JodaTime/src/main/java/org/joda/time/field/ScaledDurationField.java,"super(field, type);"
11,org.joda.time.field.ScaledDurationField,<init>,48,/JodaTime/src/main/java/org/joda/time/field/ScaledDurationField.java,if (scalar == 0 || scalar == 1) {
11,org.joda.time.field.ScaledDurationField,<init>,51,/JodaTime/src/main/java/org/joda/time/field/ScaledDurationField.java,iScalar = scalar;
11,org.joda.time.field.ScaledDurationField,<init>,52,/JodaTime/src/main/java/org/joda/time/field/ScaledDurationField.java,}
11,org.joda.time.field.UnsupportedDurationField,<init>,70,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,private UnsupportedDurationField(DurationFieldType type) {
11,org.joda.time.field.UnsupportedDurationField,<init>,71,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,iType = type;
11,org.joda.time.field.UnsupportedDurationField,<init>,72,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,}
11,org.joda.time.field.UnsupportedDurationField,getInstance,49,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,if (cCache == null) {
11,org.joda.time.field.UnsupportedDurationField,getInstance,50,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,"cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);"
11,org.joda.time.field.UnsupportedDurationField,getInstance,51,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,field = null;
11,org.joda.time.field.UnsupportedDurationField,getInstance,53,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,field = cCache.get(type);
11,org.joda.time.field.UnsupportedDurationField,getInstance,55,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,if (field == null) {
11,org.joda.time.field.UnsupportedDurationField,getInstance,56,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,field = new UnsupportedDurationField(type);
11,org.joda.time.field.UnsupportedDurationField,getInstance,57,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,"cCache.put(type, field);"
11,org.joda.time.field.UnsupportedDurationField,getInstance,59,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,return field;
11,org.joda.time.field.UnsupportedDurationField,isSupported,92,/JodaTime/src/main/java/org/joda/time/field/UnsupportedDurationField.java,return false;
11,org.joda.time.field.ZeroIsMaxDateTimeField,<init>,45,/JodaTime/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java,"super(field, type);"
11,org.joda.time.field.ZeroIsMaxDateTimeField,<init>,46,/JodaTime/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java,if (field.getMinimumValue() != 0) {
11,org.joda.time.field.ZeroIsMaxDateTimeField,<init>,49,/JodaTime/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java,}
11,org.joda.time.format.DateTimeFormatter,<init>,105,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,public DateTimeFormatter(
11,org.joda.time.format.DateTimeFormatter,<init>,106,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,"DateTimePrinter printer, DateTimeParser parser) {"
11,org.joda.time.format.DateTimeFormatter,<init>,107,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,super();
11,org.joda.time.format.DateTimeFormatter,<init>,108,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,iPrinter = printer;
11,org.joda.time.format.DateTimeFormatter,<init>,109,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,iParser = parser;
11,org.joda.time.format.DateTimeFormatter,<init>,110,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,iLocale = null;
11,org.joda.time.format.DateTimeFormatter,<init>,111,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,iOffsetParsed = false;
11,org.joda.time.format.DateTimeFormatter,<init>,112,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,iChrono = null;
11,org.joda.time.format.DateTimeFormatter,<init>,113,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,iZone = null;
11,org.joda.time.format.DateTimeFormatter,getParser,167,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,*
11,org.joda.time.format.DateTimeFormatter,getPrinter,149,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,*
11,org.joda.time.format.DateTimeFormatter,parseInto,655,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,DateTimePrinter printer = iPrinter;
11,org.joda.time.format.DateTimeFormatter,parseInto,656,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,if (printer == null) {
11,org.joda.time.format.DateTimeFormatter,parseInto,660,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,}
11,org.joda.time.format.DateTimeFormatter,parseInto,661,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,
11,org.joda.time.format.DateTimeFormatter,parseInto,662,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,//-----------------------------------------------------------------------
11,org.joda.time.format.DateTimeFormatter,parseInto,663,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,/**
11,org.joda.time.format.DateTimeFormatter,parseInto,665,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,* result into the fields of the given ReadWritableInstant. If the parse
11,org.joda.time.format.DateTimeFormatter,parseInto,667,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,* may succeed without fully reading the text and in this case those fields
11,org.joda.time.format.DateTimeFormatter,parseInto,668,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,* that were read will be set.
11,org.joda.time.format.DateTimeFormatter,parseInto,669,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,* <p>
11,org.joda.time.format.DateTimeFormatter,parseInto,674,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,"* fields before calling this method, or use {@link #parseDateTime(String)}"
11,org.joda.time.format.DateTimeFormatter,parseInto,675,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,* or {@link #parseMutableDateTime(String)}.
11,org.joda.time.format.DateTimeFormatter,parseMillis,691,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,*/
11,org.joda.time.format.DateTimeFormatter,parseMillis,693,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,DateTimeParser parser = requireParser();
11,org.joda.time.format.DateTimeFormatter,parseMillis,694,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,if (instant == null) {
11,org.joda.time.format.DateTimeFormatter,parseMillis,695,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,"throw new IllegalArgumentException(""Instant must not be null"");"
11,org.joda.time.format.DateTimeFormatter,parseMillis,696,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,}
11,org.joda.time.format.DateTimeFormatter,parseMillis,697,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,
11,org.joda.time.format.DateTimeFormatter,parseMillis,698,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,long instantMillis = instant.getMillis();
11,org.joda.time.format.DateTimeFormatter,requireParser,862,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,"* If the {@link #withOffsetParsed()} has been called, then the resulting"
11,org.joda.time.format.DateTimeFormatter,requireParser,863,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,* DateTime will have a fixed offset based on the parsed time zone.
11,org.joda.time.format.DateTimeFormatter,requireParser,866,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,*
11,org.joda.time.format.DateTimeFormatter,selectChronology,877,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,"int newPos = parser.parseInto(bucket, text, 0);"
11,org.joda.time.format.DateTimeFormatter,selectChronology,878,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,if (newPos >= 0) {
11,org.joda.time.format.DateTimeFormatter,selectChronology,881,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,if (iOffsetParsed && bucket.getZone() == null) {
11,org.joda.time.format.DateTimeFormatter,selectChronology,884,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,chrono = chrono.withZone(parsedZone);
11,org.joda.time.format.DateTimeFormatter,withChronology,251,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,* @param chrono  the chronology to use as an override
11,org.joda.time.format.DateTimeFormatter,withChronology,252,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatter.java,* @return the new formatter
11,org.joda.time.format.DateTimeFormatterBuilder,<init>,83,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,super();
11,org.joda.time.format.DateTimeFormatterBuilder,<init>,84,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iElementPairs = new ArrayList<Object>();
11,org.joda.time.format.DateTimeFormatterBuilder,<init>,85,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder,append,209,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (formatter == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,append,212,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return append0(formatter.getPrinter(), formatter.getParser());"
11,org.joda.time.format.DateTimeFormatterBuilder,append,237,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,checkParser(parser);
11,org.joda.time.format.DateTimeFormatterBuilder,append,238,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return append0(null, parser);"
11,org.joda.time.format.DateTimeFormatterBuilder,append,273,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (printer != null) {
11,org.joda.time.format.DateTimeFormatterBuilder,append,276,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (parsers == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,append,279,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int length = parsers.length;
11,org.joda.time.format.DateTimeFormatterBuilder,append,280,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (length == 1) {
11,org.joda.time.format.DateTimeFormatterBuilder,append,287,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimeParser[] copyOfParsers = new DateTimeParser[length];
11,org.joda.time.format.DateTimeFormatterBuilder,append,289,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,for (i = 0; i < length - 1; i++) {
11,org.joda.time.format.DateTimeFormatterBuilder,append,290,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if ((copyOfParsers[i] = parsers[i]) == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,append,294,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,copyOfParsers[i] = parsers[i];
11,org.joda.time.format.DateTimeFormatterBuilder,append,296,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return append0(printer, new MatchingParser(copyOfParsers));"
11,org.joda.time.format.DateTimeFormatterBuilder,append0,336,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iFormatter = null;
11,org.joda.time.format.DateTimeFormatterBuilder,append0,338,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iElementPairs.add(element);
11,org.joda.time.format.DateTimeFormatterBuilder,append0,339,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iElementPairs.add(element);
11,org.joda.time.format.DateTimeFormatterBuilder,append0,340,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return this;
11,org.joda.time.format.DateTimeFormatterBuilder,append0,345,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iFormatter = null;
11,org.joda.time.format.DateTimeFormatterBuilder,append0,346,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iElementPairs.add(printer);
11,org.joda.time.format.DateTimeFormatterBuilder,append0,347,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iElementPairs.add(parser);
11,org.joda.time.format.DateTimeFormatterBuilder,append0,348,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return this;
11,org.joda.time.format.DateTimeFormatterBuilder,appendDayOfMonth,737,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendDayOfWeek,727,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendDayOfYear,747,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendDecimal,396,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (fieldType == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendDecimal,399,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (maxDigits < minDigits) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendDecimal,402,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (minDigits < 0 || maxDigits <= 0) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendDecimal,405,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (minDigits <= 1) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendDecimal,406,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return append0(new UnpaddedNumber(fieldType, maxDigits, false));"
11,org.joda.time.format.DateTimeFormatterBuilder,appendDecimal,408,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));"
11,org.joda.time.format.DateTimeFormatterBuilder,appendFraction,532,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (fieldType == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendFraction,535,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (maxDigits < minDigits) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendFraction,538,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (minDigits < 0 || maxDigits <= 0) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendFraction,541,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return append0(new Fraction(fieldType, minDigits, maxDigits));"
11,org.joda.time.format.DateTimeFormatterBuilder,appendFractionOfHour,593,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendFractionOfMinute,576,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendFractionOfSecond,559,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendHourOfDay,687,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendLiteral,359,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return append0(new CharacterLiteral(c));
11,org.joda.time.format.DateTimeFormatterBuilder,appendLiteral,370,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (text == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendLiteral,373,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,switch (text.length()) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendLiteral,379,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return append0(new StringLiteral(text));
11,org.joda.time.format.DateTimeFormatterBuilder,appendMinuteOfHour,667,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendMonthOfYear,779,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendOptional,307,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,checkParser(parser);
11,org.joda.time.format.DateTimeFormatterBuilder,appendOptional,308,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"DateTimeParser[] parsers = new DateTimeParser[] {parser, null};"
11,org.joda.time.format.DateTimeFormatterBuilder,appendOptional,309,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return append0(null, new MatchingParser(parsers));"
11,org.joda.time.format.DateTimeFormatterBuilder,appendSecondOfMinute,647,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendSignedDecimal,448,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (fieldType == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendSignedDecimal,451,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (maxDigits < minDigits) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendSignedDecimal,454,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (minDigits < 0 || maxDigits <= 0) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendSignedDecimal,457,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (minDigits <= 1) {
11,org.joda.time.format.DateTimeFormatterBuilder,appendSignedDecimal,460,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));"
11,org.joda.time.format.DateTimeFormatterBuilder,appendTimeZoneOffset,1024,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return append0(new TimeZoneOffset
11,org.joda.time.format.DateTimeFormatterBuilder,appendWeekOfWeekyear,757,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendWeekyear,769,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);"
11,org.joda.time.format.DateTimeFormatterBuilder,appendYear,791,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);"
11,org.joda.time.format.DateTimeFormatterBuilder,checkParser,319,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (parser == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,checkParser,322,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1071,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,Object f = iFormatter;
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1073,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (f == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1074,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (iElementPairs.size() == 2) {
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1075,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,Object printer = iElementPairs.get(0);
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1076,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,Object parser = iElementPairs.get(1);
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1078,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (printer != null) {
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1079,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (printer == parser || parser == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1080,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,f = printer;
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1083,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,f = parser;
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1087,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (f == null) {
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1088,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,f = new Composite(iElementPairs);
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1091,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iFormatter = f;
11,org.joda.time.format.DateTimeFormatterBuilder,getFormatter,1094,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return f;
11,org.joda.time.format.DateTimeFormatterBuilder,isParser,1108,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (f instanceof DateTimeParser) {
11,org.joda.time.format.DateTimeFormatterBuilder,isParser,1109,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (f instanceof Composite) {
11,org.joda.time.format.DateTimeFormatterBuilder,isParser,1110,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return ((Composite)f).isParser();
11,org.joda.time.format.DateTimeFormatterBuilder,isParser,1112,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return true;
11,org.joda.time.format.DateTimeFormatterBuilder,isPrinter,1098,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (f instanceof DateTimePrinter) {
11,org.joda.time.format.DateTimeFormatterBuilder,isPrinter,1099,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (f instanceof Composite) {
11,org.joda.time.format.DateTimeFormatterBuilder,isPrinter,1100,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return ((Composite)f).isPrinter();
11,org.joda.time.format.DateTimeFormatterBuilder,isPrinter,1102,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return true;
11,org.joda.time.format.DateTimeFormatterBuilder,isPrinter,1104,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return false;
11,org.joda.time.format.DateTimeFormatterBuilder,toFormatter,104,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,Object f = getFormatter();
11,org.joda.time.format.DateTimeFormatterBuilder,toFormatter,105,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimePrinter printer = null;
11,org.joda.time.format.DateTimeFormatterBuilder,toFormatter,106,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (isPrinter(f)) {
11,org.joda.time.format.DateTimeFormatterBuilder,toFormatter,107,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,printer = (DateTimePrinter) f;
11,org.joda.time.format.DateTimeFormatterBuilder,toFormatter,109,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimeParser parser = null;
11,org.joda.time.format.DateTimeFormatterBuilder,toFormatter,110,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (isParser(f)) {
11,org.joda.time.format.DateTimeFormatterBuilder,toFormatter,111,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,parser = (DateTimeParser) f;
11,org.joda.time.format.DateTimeFormatterBuilder,toFormatter,113,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (printer != null || parser != null) {
11,org.joda.time.format.DateTimeFormatterBuilder,toFormatter,114,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"return new DateTimeFormatter(printer, parser);"
11,org.joda.time.format.DateTimeFormatterBuilder,toParser,152,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,Object f = getFormatter();
11,org.joda.time.format.DateTimeFormatterBuilder,toParser,153,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (isParser(f)) {
11,org.joda.time.format.DateTimeFormatterBuilder,toParser,154,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return (DateTimeParser) f;
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,<init>,1140,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,super();
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,<init>,1141,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iValue = value;
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,<init>,1142,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,estimateParsedLength,1169,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return 1;
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,estimatePrintedLength,1145,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return 1;
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1173,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (position >= text.length()) {
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1174,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return ~position;
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1177,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,char a = text.charAt(position);
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1178,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,char b = iValue;
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1180,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (a != b) {
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1181,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,a = Character.toUpperCase(a);
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1182,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,b = Character.toUpperCase(b);
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1183,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (a != b) {
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1184,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,a = Character.toLowerCase(a);
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1185,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,b = Character.toLowerCase(b);
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1186,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (a != b) {
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1187,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return ~position;
11,org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral,parseInto,1192,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return position + 1;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2465,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,super();
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2467,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,List<Object> printerList = new ArrayList<Object>();
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2468,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,List<Object> parserList = new ArrayList<Object>();
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2470,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"decompose(elementPairs, printerList, parserList);"
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2472,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (printerList.size() <= 0) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2473,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iPrinters = null;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2474,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iPrintedLengthEstimate = 0;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2476,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int size = printerList.size();
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2477,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iPrinters = new DateTimePrinter[size];
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2478,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int printEst = 0;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2479,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,for (int i=0; i<size; i++) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2480,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimePrinter printer = (DateTimePrinter) printerList.get(i);
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2481,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,printEst += printer.estimatePrintedLength();
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2482,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iPrinters[i] = printer;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2484,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iPrintedLengthEstimate = printEst;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2487,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (parserList.size() <= 0) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2491,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int size = parserList.size();
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2492,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iParsers = new DateTimeParser[size];
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2493,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int parseEst = 0;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2494,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,for (int i=0; i<size; i++) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2495,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimeParser parser = (DateTimeParser) parserList.get(i);
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2496,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,parseEst += parser.estimateParsedLength();
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2497,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iParsers[i] = parser;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2499,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iParsedLengthEstimate = parseEst;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,<init>,2501,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,addArrayToList,2632,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (array != null) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,addArrayToList,2633,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,for (int i=0; i<array.length; i++) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,addArrayToList,2634,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,list.add(array[i]);
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,addArrayToList,2637,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2609,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int size = elementPairs.size();
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2610,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,for (int i=0; i<size; i+=2) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2611,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,Object element = elementPairs.get(i);
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2612,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (element instanceof DateTimePrinter) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2613,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (element instanceof Composite) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2614,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"addArrayToList(printerList, ((Composite)element).iPrinters);"
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2616,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,printerList.add(element);
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2620,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,element = elementPairs.get(i + 1);
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2621,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (element instanceof DateTimeParser) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2622,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (element instanceof Composite) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2623,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"addArrayToList(parserList, ((Composite)element).iParsers);"
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2625,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,parserList.add(element);
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,decompose,2629,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,estimateParsedLength,2580,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iParsedLengthEstimate;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,isParser,2601,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iParsers != null;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,isPrinter,2597,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iPrinters != null;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,parseInto,2584,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimeParser[] elements = iParsers;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,parseInto,2585,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (elements == null) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,parseInto,2589,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int len = elements.length;
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,parseInto,2590,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,for (int i=0; i<len && position >= 0; i++) {
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,parseInto,2591,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"position = elements[i].parseInto(bucket, text, position);"
11,org.joda.time.format.DateTimeFormatterBuilder$Composite,parseInto,2593,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return position;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,<init>,1828,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,super();
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,<init>,1829,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iFieldType = fieldType;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,<init>,1831,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (maxDigits > 18) {
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,<init>,1834,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iMinDigits = minDigits;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,<init>,1835,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iMaxDigits = maxDigits;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,<init>,1836,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,estimateParsedLength,1997,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iMaxDigits;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,estimatePrintedLength,1839,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iMaxDigits;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2001,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimeField field = iFieldType.getField(bucket.getChronology());
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2003,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"int limit = Math.min(iMaxDigits, text.length() - position);"
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2005,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,long value = 0;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2006,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,long n = field.getDurationField().getUnitMillis() * 10;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2007,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int length = 0;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2008,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,while (length < limit) {
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2009,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,char c = text.charAt(position + length);
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2010,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (c < '0' || c > '9') {
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2011,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,break;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2013,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,length++;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2014,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,long nn = n / 10;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2015,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,value += (c - '0') * nn;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2016,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,n = nn;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2017,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2019,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,value /= 10;
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2021,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (length == 0) {
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2025,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (value > Integer.MAX_VALUE) {
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2029,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimeField parseField = new PreciseDateTimeField(
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2034,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"bucket.saveField(parseField, (int) value);"
11,org.joda.time.format.DateTimeFormatterBuilder$Fraction,parseInto,2036,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return position + length;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2648,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,super();
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2649,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iParsers = parsers;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2650,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int est = 0;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2651,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,for (int i=parsers.length; --i>=0 ;) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2652,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimeParser parser = parsers[i];
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2653,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (parser != null) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2654,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int len = parser.estimateParsedLength();
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2655,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (len > est) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2656,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,est = len;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2659,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2660,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iParsedLengthEstimate = est;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,<init>,2661,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,estimateParsedLength,2664,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iParsedLengthEstimate;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2668,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimeParser[] parsers = iParsers;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2669,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int length = parsers.length;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2671,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,final Object originalState = bucket.saveState();
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2672,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,boolean isOptional = false;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2674,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int bestValidPos = position;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2675,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,Object bestValidState = null;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2677,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int bestInvalidPos = position;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2679,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,for (int i=0; i<length; i++) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2680,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,DateTimeParser parser = parsers[i];
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2681,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (parser == null) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2683,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (bestValidPos <= position) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2686,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,isOptional = true;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2687,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,break;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2689,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"int parsePos = parser.parseInto(bucket, text, position);"
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2690,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (parsePos >= position) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2691,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (parsePos > bestValidPos) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2692,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (parsePos >= text.length() ||
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2697,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return parsePos;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2699,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,bestValidPos = parsePos;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2700,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,bestValidState = bucket.saveState();
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2703,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (parsePos < 0) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2704,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,parsePos = ~parsePos;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2705,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (parsePos > bestInvalidPos) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2706,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,bestInvalidPos = parsePos;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2710,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,bucket.restoreState(originalState);
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2713,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (bestValidPos > position || (bestValidPos == position && isOptional)) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2715,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (bestValidState != null) {
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2716,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,bucket.restoreState(bestValidState);
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2718,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return bestValidPos;
11,org.joda.time.format.DateTimeFormatterBuilder$MatchingParser,parseInto,2721,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return ~bestInvalidPos;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,<init>,1252,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,super();
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,<init>,1253,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iFieldType = fieldType;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,<init>,1254,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iMaxParsedDigits = maxParsedDigits;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,<init>,1255,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iSigned = signed;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,<init>,1256,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,estimateParsedLength,1259,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iMaxParsedDigits;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1263,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"int limit = Math.min(iMaxParsedDigits, text.length() - position);"
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1265,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,boolean negative = false;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1266,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int length = 0;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1267,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,while (length < limit) {
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1268,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,char c = text.charAt(position + length);
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1269,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (length == 0 && (c == '-' || c == '+') && iSigned) {
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1289,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (c < '0' || c > '9') {
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1290,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,break;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1292,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,length++;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1293,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1295,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (length == 0) {
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1296,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return ~position;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1300,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (length >= 9) {
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1305,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int i = position;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1306,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (negative) {
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1310,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,value = text.charAt(i++) - '0';
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1313,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1314,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,position += length;
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1315,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,while (i < position) {
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1316,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1318,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (negative) {
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1323,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"bucket.saveField(iFieldType, value);"
11,org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter,parseInto,1324,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return position;
11,org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber,<init>,1396,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"super(fieldType, maxParsedDigits, signed);"
11,org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber,<init>,1397,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iMinPrintedDigits = minPrintedDigits;
11,org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber,<init>,1398,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber,estimatePrintedLength,1401,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iMaxParsedDigits;
11,org.joda.time.format.DateTimeFormatterBuilder$StringLiteral,<init>,1203,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,super();
11,org.joda.time.format.DateTimeFormatterBuilder$StringLiteral,<init>,1204,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iValue = value;
11,org.joda.time.format.DateTimeFormatterBuilder$StringLiteral,<init>,1205,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$StringLiteral,estimateParsedLength,1232,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iValue.length();
11,org.joda.time.format.DateTimeFormatterBuilder$StringLiteral,estimatePrintedLength,1208,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iValue.length();
11,org.joda.time.format.DateTimeFormatterBuilder$StringLiteral,parseInto,1236,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"if (text.regionMatches(true, position, iValue, 0, iValue.length())) {"
11,org.joda.time.format.DateTimeFormatterBuilder$StringLiteral,parseInto,1239,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return ~position;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,<init>,2054,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,super();
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,<init>,2055,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iZeroOffsetPrintText = zeroOffsetPrintText;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,<init>,2056,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iZeroOffsetParseText = zeroOffsetParseText;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,<init>,2057,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iShowSeparators = showSeparators;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,<init>,2058,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (minFields <= 0 || maxFields < minFields) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,<init>,2061,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (minFields > 4) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,<init>,2065,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iMinFields = minFields;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,<init>,2066,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,iMaxFields = maxFields;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,<init>,2067,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,digitCount,2386,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"int limit = Math.min(text.length() - position, amount);"
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,digitCount,2387,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,amount = 0;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,digitCount,2388,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,for (; limit > 0; limit--) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,digitCount,2389,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,char c = text.charAt(position + amount);
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,digitCount,2390,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (c < '0' || c > '9') {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,digitCount,2393,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,amount++;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,digitCount,2395,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return amount;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,estimateParsedLength,2207,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return estimatePrintedLength();
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,estimatePrintedLength,2070,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int est = 1 + iMinFields << 1;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,estimatePrintedLength,2071,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (iShowSeparators) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,estimatePrintedLength,2072,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,est += iMinFields - 1;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,estimatePrintedLength,2074,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,estimatePrintedLength,2077,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return est;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2211,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,int limit = text.length() - position;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2214,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (iZeroOffsetParseText != null) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2215,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (iZeroOffsetParseText.length() == 0) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2226,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {"
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2227,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,bucket.setOffset(0);
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2228,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return position + iZeroOffsetParseText.length();
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2234,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (limit <= 1) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2239,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,char c = text.charAt(position);
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2240,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (c == '-') {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2241,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,negative = true;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2248,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,limit--;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2249,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,position++;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2263,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"if (digitCount(text, position, 2) < 2) {"
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2270,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"int hours = FormatUtils.parseTwoDigits(text, position);"
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2271,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (hours > 23) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2274,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,offset = hours * DateTimeConstants.MILLIS_PER_HOUR;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2275,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,limit -= 2;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2276,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,position += 2;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2282,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (limit <= 0) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2287,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,c = text.charAt(position);
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2288,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (c == ':') {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2289,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,expectSeparators = true;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2290,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,limit--;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2291,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,position++;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2300,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"int count = digitCount(text, position, 2);"
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2301,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (count == 0 && !expectSeparators) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2303,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,} else if (count < 2) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2308,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"int minutes = FormatUtils.parseTwoDigits(text, position);"
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2309,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (minutes > 59) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2312,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2313,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,limit -= 2;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2314,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,position += 2;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2318,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (limit <= 0) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2319,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,break parse;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2322,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (expectSeparators) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2323,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (text.charAt(position) != ':') {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2326,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,limit--;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2327,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,position++;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2330,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"count = digitCount(text, position, 2);"
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2331,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (count == 0 && !expectSeparators) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2333,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,} else if (count < 2) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2338,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"int seconds = FormatUtils.parseTwoDigits(text, position);"
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2339,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (seconds > 59) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2342,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2343,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,limit -= 2;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2344,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,position += 2;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2348,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,if (limit <= 0) {
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2349,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,break parse;
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2377,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,bucket.setOffset(negative ? -offset : offset);
11,org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset,parseInto,2378,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return position;
11,org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber,<init>,1334,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,"super(fieldType, maxParsedDigits, signed);"
11,org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber,<init>,1335,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,}
11,org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber,estimatePrintedLength,1338,/JodaTime/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,return iMaxParsedDigits;
11,org.joda.time.format.DateTimeParserBucket,<init>,68,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,/** Used for parsing month/day without year. */
11,org.joda.time.format.DateTimeParserBucket,<init>,96,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* @param locale  the locale to use
11,org.joda.time.format.DateTimeParserBucket,<init>,97,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* @param pivotYear  the pivot year to use when parsing two-digit years
11,org.joda.time.format.DateTimeParserBucket,<init>,98,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* @since 1.1
11,org.joda.time.format.DateTimeParserBucket,<init>,99,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* @deprecated Use longer constructor
11,org.joda.time.format.DateTimeParserBucket,<init>,100,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*/
11,org.joda.time.format.DateTimeParserBucket,<init>,101,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,@Deprecated
11,org.joda.time.format.DateTimeParserBucket,<init>,102,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear) {"
11,org.joda.time.format.DateTimeParserBucket,<init>,103,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"this(instantLocal, chrono, locale, pivotYear, 2000);"
11,org.joda.time.format.DateTimeParserBucket,access$302,54,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*/
11,org.joda.time.format.DateTimeParserBucket,computeMillis,305,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,public long computeMillis() {
11,org.joda.time.format.DateTimeParserBucket,computeMillis,306,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"return computeMillis(false, null);"
11,org.joda.time.format.DateTimeParserBucket,computeMillis,307,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,}
11,org.joda.time.format.DateTimeParserBucket,computeMillis,308,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,
11,org.joda.time.format.DateTimeParserBucket,computeMillis,309,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,/**
11,org.joda.time.format.DateTimeParserBucket,computeMillis,311,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* This method is idempotent, but it is not thread-safe."
11,org.joda.time.format.DateTimeParserBucket,computeMillis,313,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* @param resetFields false by default, but when true, unsaved field values are cleared"
11,org.joda.time.format.DateTimeParserBucket,computeMillis,315,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* @throws IllegalArgumentException if any field is out of range
11,org.joda.time.format.DateTimeParserBucket,computeMillis,316,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*/
11,org.joda.time.format.DateTimeParserBucket,computeMillis,323,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* This method is idempotent, but it is not thread-safe."
11,org.joda.time.format.DateTimeParserBucket,computeMillis,325,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* @param resetFields false by default, but when true, unsaved field values are cleared"
11,org.joda.time.format.DateTimeParserBucket,computeMillis,326,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* @param text optional text being parsed, to be included in any error message"
11,org.joda.time.format.DateTimeParserBucket,computeMillis,340,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,// alter base year for parsing if first field is month or day
11,org.joda.time.format.DateTimeParserBucket,getChronology,110,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* @param instantLocal  the initial millis from 1970-01-01T00:00:00, local time"
11,org.joda.time.format.DateTimeParserBucket,restoreState,262,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,savedFields[savedFieldsCount] = field;
11,org.joda.time.format.DateTimeParserBucket,restoreState,263,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,iSavedFieldsCount = savedFieldsCount + 1;
11,org.joda.time.format.DateTimeParserBucket,restoreState,264,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,}
11,org.joda.time.format.DateTimeParserBucket,restoreState,265,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,
11,org.joda.time.format.DateTimeParserBucket,saveField,197,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* @since 1.1
11,org.joda.time.format.DateTimeParserBucket,saveField,198,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*/
11,org.joda.time.format.DateTimeParserBucket,saveField,207,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* behaviour should be used.
11,org.joda.time.format.DateTimeParserBucket,saveField,208,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*
11,org.joda.time.format.DateTimeParserBucket,saveField,222,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*/
11,org.joda.time.format.DateTimeParserBucket,saveField,223,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"public void saveField(DateTimeField field, int value) {"
11,org.joda.time.format.DateTimeParserBucket,saveField,225,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,}
11,org.joda.time.format.DateTimeParserBucket,saveField,227,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,/**
11,org.joda.time.format.DateTimeParserBucket,saveField,229,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*
11,org.joda.time.format.DateTimeParserBucket,saveField,230,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* @param fieldType  the field type
11,org.joda.time.format.DateTimeParserBucket,saveField,231,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* @param value  the value
11,org.joda.time.format.DateTimeParserBucket,saveField,234,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"saveField(new SavedField(fieldType.getField(iChrono), value));"
11,org.joda.time.format.DateTimeParserBucket,saveField,235,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,}
11,org.joda.time.format.DateTimeParserBucket,saveField,236,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,
11,org.joda.time.format.DateTimeParserBucket,saveField,237,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,/**
11,org.joda.time.format.DateTimeParserBucket,saveState,247,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,
11,org.joda.time.format.DateTimeParserBucket,saveState,248,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,private void saveField(SavedField field) {
11,org.joda.time.format.DateTimeParserBucket,saveState,250,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,int savedFieldsCount = iSavedFieldsCount;
11,org.joda.time.format.DateTimeParserBucket,setOffset,158,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*
11,org.joda.time.format.DateTimeParserBucket,setOffset,159,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* @param zone the date time zone to operate in, or null if UTC"
11,org.joda.time.format.DateTimeParserBucket,setOffset,160,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*/
11,org.joda.time.format.DateTimeParserBucket,setOffset,161,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,public void setZone(DateTimeZone zone) {
11,org.joda.time.format.DateTimeParserBucket,setZone,139,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*
11,org.joda.time.format.DateTimeParserBucket,setZone,140,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* @return the locale to use
11,org.joda.time.format.DateTimeParserBucket,setZone,141,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,*/
11,org.joda.time.format.DateTimeParserBucket,setZone,142,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,public Locale getLocale() {
11,org.joda.time.format.DateTimeParserBucket,sort,362,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,if (iZone == null) {
11,org.joda.time.format.DateTimeParserBucket,sort,365,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,int offset = iZone.getOffsetFromLocal(millis);
11,org.joda.time.format.DateTimeParserBucket,sort,366,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,millis -= offset;
11,org.joda.time.format.DateTimeParserBucket,sort,373,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,throw new IllegalArgumentException(message);
11,org.joda.time.format.DateTimeParserBucket$SavedField,<init>,413,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,final DateTimeZone iZone;
11,org.joda.time.format.DateTimeParserBucket$SavedField,<init>,414,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,final int iOffset;
11,org.joda.time.format.DateTimeParserBucket$SavedField,<init>,415,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,final SavedField[] iSavedFields;
11,org.joda.time.format.DateTimeParserBucket$SavedField,<init>,416,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,final int iSavedFieldsCount;
11,org.joda.time.format.DateTimeParserBucket$SavedField,<init>,417,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,
11,org.joda.time.format.DateTimeParserBucket$SavedField,<init>,418,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,SavedState() {
11,org.joda.time.format.DateTimeParserBucket$SavedField,compareReverse,456,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,
11,org.joda.time.format.DateTimeParserBucket$SavedField,compareReverse,457,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"SavedField(DateTimeField field, String text, Locale locale) {"
11,org.joda.time.format.DateTimeParserBucket$SavedField,compareReverse,460,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,iText = text;
11,org.joda.time.format.DateTimeParserBucket$SavedField,compareReverse,462,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,}
11,org.joda.time.format.DateTimeParserBucket$SavedField,compareReverse,465,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,if (iText == null) {
11,org.joda.time.format.DateTimeParserBucket$SavedField,compareTo,445,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,final DateTimeField iField;
11,org.joda.time.format.DateTimeParserBucket$SavedField,compareTo,446,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,final int iValue;
11,org.joda.time.format.DateTimeParserBucket$SavedField,compareTo,448,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,final Locale iLocale;
11,org.joda.time.format.DateTimeParserBucket$SavedField,compareTo,449,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,
11,org.joda.time.format.DateTimeParserBucket$SavedField,set,428,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,}
11,org.joda.time.format.DateTimeParserBucket$SavedField,set,429,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,enclosing.iZone = this.iZone;
11,org.joda.time.format.DateTimeParserBucket$SavedField,set,433,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"// Since count is being restored to a lower count, the"
11,org.joda.time.format.DateTimeParserBucket$SavedField,set,434,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,// potential exists for new saved fields to destroy data being
11,org.joda.time.format.DateTimeParserBucket$SavedField,set,436,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,// of saved fields is cloned prior to modification.
11,org.joda.time.format.DateTimeParserBucket$SavedState,<init>,381,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* Sorts elements [0,high). Calling java.util.Arrays isn't always the right"
11,org.joda.time.format.DateTimeParserBucket$SavedState,<init>,382,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* choice since it always creates an internal copy of the array, even if it"
11,org.joda.time.format.DateTimeParserBucket$SavedState,<init>,383,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* doesn't need to. If the array slice is small enough, an insertion sort"
11,org.joda.time.format.DateTimeParserBucket$SavedState,<init>,384,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* is chosen instead, but it doesn't need a copy!"
11,org.joda.time.format.DateTimeParserBucket$SavedState,<init>,385,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* <p>
11,org.joda.time.format.DateTimeParserBucket$SavedState,<init>,386,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* This method has a modified version of that insertion sort, except it"
11,org.joda.time.format.DateTimeParserBucket$SavedState,restoreState,389,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* faster than insertion sort on large lists.
11,org.joda.time.format.DateTimeParserBucket$SavedState,restoreState,392,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* Since the amount of saved fields is small, the insertion sort is a"
11,org.joda.time.format.DateTimeParserBucket$SavedState,restoreState,393,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* better choice. Additional performance is gained since there is no extra
11,org.joda.time.format.DateTimeParserBucket$SavedState,restoreState,394,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"* array allocation and copying. Also, the insertion sort here does not"
11,org.joda.time.format.DateTimeParserBucket$SavedState,restoreState,395,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,* perform any casting operations. The version in java.util.Arrays performs
11,org.joda.time.format.DateTimeParserBucket$SavedState,restoreState,400,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,"Arrays.sort(array, 0, high);"
11,org.joda.time.format.DateTimeParserBucket$SavedState,restoreState,402,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,for (int i=0; i<high; i++) {
11,org.joda.time.format.DateTimeParserBucket$SavedState,restoreState,403,/JodaTime/src/main/java/org/joda/time/format/DateTimeParserBucket.java,for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {
11,org.joda.time.format.FormatUtils,<clinit>,31,/JodaTime/src/main/java/org/joda/time/format/FormatUtils.java,private static final double LOG_10 = Math.log(10);
11,org.joda.time.format.FormatUtils,parseTwoDigits,352,/JodaTime/src/main/java/org/joda/time/format/FormatUtils.java,int value = text.charAt(position) - '0';
11,org.joda.time.format.FormatUtils,parseTwoDigits,353,/JodaTime/src/main/java/org/joda/time/format/FormatUtils.java,return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';
11,org.joda.time.format.ISODateTimeFormat,dateElementParser,611,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (dpe == null) {
11,org.joda.time.format.ISODateTimeFormat,dateElementParser,612,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,dpe = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,dateElementParser,634,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return dpe;
11,org.joda.time.format.ISODateTimeFormat,dateOptionalTimeParser,799,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (dotp == null) {
11,org.joda.time.format.ISODateTimeFormat,dateOptionalTimeParser,800,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,dateOptionalTimeParser,805,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,dotp = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,dateOptionalTimeParser,810,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return dotp;
11,org.joda.time.format.ISODateTimeFormat,dateTimeParser,766,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (dtp == null) {
11,org.joda.time.format.ISODateTimeFormat,dateTimeParser,769,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,DateTimeParser time = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,dateTimeParser,774,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,dtp = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,dateTimeParser,778,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return dtp;
11,org.joda.time.format.ISODateTimeFormat,dayOfMonthElement,1572,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (dme == null) {
11,org.joda.time.format.ISODateTimeFormat,dayOfMonthElement,1573,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,dme = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,dayOfMonthElement,1578,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return dme;
11,org.joda.time.format.ISODateTimeFormat,dayOfWeekElement,1601,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (dwe == null) {
11,org.joda.time.format.ISODateTimeFormat,dayOfWeekElement,1602,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,dwe = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,dayOfWeekElement,1607,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return dwe;
11,org.joda.time.format.ISODateTimeFormat,dayOfYearElement,1611,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (dye == null) {
11,org.joda.time.format.ISODateTimeFormat,dayOfYearElement,1612,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,dye = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,dayOfYearElement,1617,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return dye;
11,org.joda.time.format.ISODateTimeFormat,fractionElement,1659,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (fse == null) {
11,org.joda.time.format.ISODateTimeFormat,fractionElement,1660,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,fse = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,fractionElement,1667,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return fse;
11,org.joda.time.format.ISODateTimeFormat,hourElement,1630,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (hde == null) {
11,org.joda.time.format.ISODateTimeFormat,hourElement,1631,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,hde = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,hourElement,1635,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return hde;
11,org.joda.time.format.ISODateTimeFormat,hourMinuteSecondFraction,1450,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (hmsf == null) {
11,org.joda.time.format.ISODateTimeFormat,hourMinuteSecondFraction,1451,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,hmsf = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,hourMinuteSecondFraction,1458,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return hmsf;
11,org.joda.time.format.ISODateTimeFormat,minuteElement,1639,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (mhe == null) {
11,org.joda.time.format.ISODateTimeFormat,minuteElement,1640,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,mhe = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,minuteElement,1645,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return mhe;
11,org.joda.time.format.ISODateTimeFormat,monthElement,1562,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (mye == null) {
11,org.joda.time.format.ISODateTimeFormat,monthElement,1563,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,mye = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,monthElement,1568,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return mye;
11,org.joda.time.format.ISODateTimeFormat,offsetElement,1671,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (ze == null) {
11,org.joda.time.format.ISODateTimeFormat,offsetElement,1672,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,ze = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,offsetElement,1676,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return ze;
11,org.joda.time.format.ISODateTimeFormat,secondElement,1649,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (sme == null) {
11,org.joda.time.format.ISODateTimeFormat,secondElement,1650,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,sme = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,secondElement,1655,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return sme;
11,org.joda.time.format.ISODateTimeFormat,timeElementParser,695,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (tpe == null) {
11,org.joda.time.format.ISODateTimeFormat,timeElementParser,697,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,DateTimeParser decimalPoint = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,timeElementParser,708,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,tpe = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,timeElementParser,744,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return tpe;
11,org.joda.time.format.ISODateTimeFormat,weekElement,1591,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (wwe == null) {
11,org.joda.time.format.ISODateTimeFormat,weekElement,1592,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,wwe = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,weekElement,1597,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return wwe;
11,org.joda.time.format.ISODateTimeFormat,weekyearElement,1582,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (we == null) {
11,org.joda.time.format.ISODateTimeFormat,weekyearElement,1583,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,we = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,weekyearElement,1587,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return we;
11,org.joda.time.format.ISODateTimeFormat,yearElement,1553,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,if (ye == null) {
11,org.joda.time.format.ISODateTimeFormat,yearElement,1554,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,ye = new DateTimeFormatterBuilder()
11,org.joda.time.format.ISODateTimeFormat,yearElement,1558,/JodaTime/src/main/java/org/joda/time/format/ISODateTimeFormat.java,return ye;
11,org.joda.time.tz.CachedDateTimeZone,<clinit>,39,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,"i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");"
11,org.joda.time.tz.CachedDateTimeZone,<clinit>,42,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,}
11,org.joda.time.tz.CachedDateTimeZone,<clinit>,45,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (i == null) {
11,org.joda.time.tz.CachedDateTimeZone,<clinit>,48,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,cacheSize = 512; // (1 << 9)
11,org.joda.time.tz.CachedDateTimeZone,<clinit>,61,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,cInfoCacheMask = cacheSize - 1;
11,org.joda.time.tz.CachedDateTimeZone,<clinit>,62,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,}
11,org.joda.time.tz.CachedDateTimeZone,<init>,87,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,super(zone.getID());
11,org.joda.time.tz.CachedDateTimeZone,<init>,88,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iZone = zone;
11,org.joda.time.tz.CachedDateTimeZone,<init>,89,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iInfoCache = new Info[cInfoCacheMask + 1];
11,org.joda.time.tz.CachedDateTimeZone,<init>,90,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,}
11,org.joda.time.tz.CachedDateTimeZone,createInfo,160,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,long periodStart = millis & (0xffffffffL << 32);
11,org.joda.time.tz.CachedDateTimeZone,createInfo,161,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,"Info info = new Info(iZone, periodStart);"
11,org.joda.time.tz.CachedDateTimeZone,createInfo,163,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,long end = periodStart | 0xffffffffL;
11,org.joda.time.tz.CachedDateTimeZone,createInfo,164,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,Info chain = info;
11,org.joda.time.tz.CachedDateTimeZone,createInfo,166,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,long next = iZone.nextTransition(periodStart);
11,org.joda.time.tz.CachedDateTimeZone,createInfo,167,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (next == periodStart || next > end) {
11,org.joda.time.tz.CachedDateTimeZone,createInfo,168,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,break;
11,org.joda.time.tz.CachedDateTimeZone,createInfo,170,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,periodStart = next;
11,org.joda.time.tz.CachedDateTimeZone,createInfo,171,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,"chain = (chain.iNextInfo = new Info(iZone, periodStart));"
11,org.joda.time.tz.CachedDateTimeZone,createInfo,172,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,}
11,org.joda.time.tz.CachedDateTimeZone,createInfo,174,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return info;
11,org.joda.time.tz.CachedDateTimeZone,equals,135,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (this == obj) {
11,org.joda.time.tz.CachedDateTimeZone,equals,138,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (obj instanceof CachedDateTimeZone) {
11,org.joda.time.tz.CachedDateTimeZone,equals,139,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iZone.equals(((CachedDateTimeZone)obj).iZone);
11,org.joda.time.tz.CachedDateTimeZone,forZone,68,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (zone instanceof CachedDateTimeZone) {
11,org.joda.time.tz.CachedDateTimeZone,forZone,71,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return new CachedDateTimeZone(zone);
11,org.joda.time.tz.CachedDateTimeZone,getInfo,148,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,int period = (int)(millis >> 32);
11,org.joda.time.tz.CachedDateTimeZone,getInfo,149,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,Info[] cache = iInfoCache;
11,org.joda.time.tz.CachedDateTimeZone,getInfo,150,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,int index = period & cInfoCacheMask;
11,org.joda.time.tz.CachedDateTimeZone,getInfo,151,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,Info info = cache[index];
11,org.joda.time.tz.CachedDateTimeZone,getInfo,152,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (info == null || (int)((info.iPeriodStart >> 32)) != period) {
11,org.joda.time.tz.CachedDateTimeZone,getInfo,153,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,info = createInfo(millis);
11,org.joda.time.tz.CachedDateTimeZone,getInfo,154,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,cache[index] = info;
11,org.joda.time.tz.CachedDateTimeZone,getInfo,156,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return info;
11,org.joda.time.tz.CachedDateTimeZone,getNameKey,107,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return getInfo(instant).getNameKey(instant);
11,org.joda.time.tz.CachedDateTimeZone,getOffset,111,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return getInfo(instant).getOffset(instant);
11,org.joda.time.tz.CachedDateTimeZone,getStandardOffset,115,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return getInfo(instant).getStandardOffset(instant);
11,org.joda.time.tz.CachedDateTimeZone,getUncachedZone,103,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iZone;
11,org.joda.time.tz.CachedDateTimeZone,isFixed,119,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iZone.isFixed();
11,org.joda.time.tz.CachedDateTimeZone,nextTransition,123,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iZone.nextTransition(instant);
11,org.joda.time.tz.CachedDateTimeZone,previousTransition,127,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iZone.previousTransition(instant);
11,org.joda.time.tz.CachedDateTimeZone$Info,<init>,185,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,private int iOffset = Integer.MIN_VALUE;
11,org.joda.time.tz.CachedDateTimeZone$Info,<init>,186,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,private int iStandardOffset = Integer.MIN_VALUE;
11,org.joda.time.tz.CachedDateTimeZone$Info,<init>,188,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,"Info(DateTimeZone zone, long periodStart) {"
11,org.joda.time.tz.CachedDateTimeZone$Info,<init>,189,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iPeriodStart = periodStart;
11,org.joda.time.tz.CachedDateTimeZone$Info,<init>,190,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iZoneRef = zone;
11,org.joda.time.tz.CachedDateTimeZone$Info,<init>,191,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,}
11,org.joda.time.tz.CachedDateTimeZone$Info,getNameKey,194,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
11,org.joda.time.tz.CachedDateTimeZone$Info,getNameKey,195,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (iNameKey == null) {
11,org.joda.time.tz.CachedDateTimeZone$Info,getNameKey,196,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iNameKey = iZoneRef.getNameKey(iPeriodStart);
11,org.joda.time.tz.CachedDateTimeZone$Info,getNameKey,198,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iNameKey;
11,org.joda.time.tz.CachedDateTimeZone$Info,getNameKey,200,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iNextInfo.getNameKey(millis);
11,org.joda.time.tz.CachedDateTimeZone$Info,getOffset,204,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
11,org.joda.time.tz.CachedDateTimeZone$Info,getOffset,205,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (iOffset == Integer.MIN_VALUE) {
11,org.joda.time.tz.CachedDateTimeZone$Info,getOffset,206,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iOffset = iZoneRef.getOffset(iPeriodStart);
11,org.joda.time.tz.CachedDateTimeZone$Info,getOffset,208,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iOffset;
11,org.joda.time.tz.CachedDateTimeZone$Info,getOffset,210,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iNextInfo.getOffset(millis);
11,org.joda.time.tz.CachedDateTimeZone$Info,getStandardOffset,214,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
11,org.joda.time.tz.CachedDateTimeZone$Info,getStandardOffset,215,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (iStandardOffset == Integer.MIN_VALUE) {
11,org.joda.time.tz.CachedDateTimeZone$Info,getStandardOffset,216,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);
11,org.joda.time.tz.CachedDateTimeZone$Info,getStandardOffset,218,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iStandardOffset;
11,org.joda.time.tz.CachedDateTimeZone$Info,getStandardOffset,220,/JodaTime/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iNextInfo.getStandardOffset(millis);
11,org.joda.time.tz.DateTimeZoneBuilder,<init>,225,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,public DateTimeZoneBuilder() {
11,org.joda.time.tz.DateTimeZoneBuilder,<init>,226,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iRuleSets = new ArrayList<RuleSet>(10);
11,org.joda.time.tz.DateTimeZoneBuilder,<init>,227,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder,addCutover,252,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,OfYear ofYear = new OfYear
11,org.joda.time.tz.DateTimeZoneBuilder,addCutover,254,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iRuleSets.size() > 0) {
11,org.joda.time.tz.DateTimeZoneBuilder,addCutover,255,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);
11,org.joda.time.tz.DateTimeZoneBuilder,addCutover,256,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"lastRuleSet.setUpperLimit(year, ofYear);"
11,org.joda.time.tz.DateTimeZoneBuilder,addCutover,258,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iRuleSets.add(new RuleSet());
11,org.joda.time.tz.DateTimeZoneBuilder,addCutover,259,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return this;
11,org.joda.time.tz.DateTimeZoneBuilder,addRecurringSavings,309,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (fromYear <= toYear) {
11,org.joda.time.tz.DateTimeZoneBuilder,addRecurringSavings,310,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,OfYear ofYear = new OfYear
11,org.joda.time.tz.DateTimeZoneBuilder,addRecurringSavings,312,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);"
11,org.joda.time.tz.DateTimeZoneBuilder,addRecurringSavings,313,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"Rule rule = new Rule(recurrence, fromYear, toYear);"
11,org.joda.time.tz.DateTimeZoneBuilder,addRecurringSavings,314,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,getLastRuleSet().addRule(rule);
11,org.joda.time.tz.DateTimeZoneBuilder,addRecurringSavings,316,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return this;
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,404,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int size = transitions.size();
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,405,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (size == 0) {
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,406,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,transitions.add(tr);
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,407,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return true;
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,410,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Transition last = transitions.get(size - 1);
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,411,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (!tr.isTransitionFrom(last)) {
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,412,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return false;
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,417,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int offsetForLast = 0;
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,418,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (size >= 2) {
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,419,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,offsetForLast = transitions.get(size - 2).getWallOffset();
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,421,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int offsetForNew = last.getWallOffset();
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,423,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long lastLocal = last.getMillis() + offsetForLast;
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,424,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long newLocal = tr.getMillis() + offsetForNew;
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,426,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (newLocal != lastLocal) {
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,427,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,transitions.add(tr);
11,org.joda.time.tz.DateTimeZoneBuilder,addTransition,428,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return true;
11,org.joda.time.tz.DateTimeZoneBuilder,getLastRuleSet,320,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iRuleSets.size() == 0) {
11,org.joda.time.tz.DateTimeZoneBuilder,getLastRuleSet,321,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);"
11,org.joda.time.tz.DateTimeZoneBuilder,getLastRuleSet,323,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iRuleSets.get(iRuleSets.size() - 1);
11,org.joda.time.tz.DateTimeZoneBuilder,readFrom,110,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,switch (in.readUnsignedByte()) {
11,org.joda.time.tz.DateTimeZoneBuilder,readFrom,119,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));"
11,org.joda.time.tz.DateTimeZoneBuilder,readFrom,95,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (in instanceof DataInput) {
11,org.joda.time.tz.DateTimeZoneBuilder,readFrom,98,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return readFrom((DataInput)new DataInputStream(in), id);"
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,183,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int v = in.readUnsignedByte();
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,184,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,switch (v >> 6) {
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,187,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,v = (v << (32 - 6)) >> (32 - 6);
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,188,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return v * (30 * 60000L);
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,192,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,v = (v << (32 - 6)) >> (32 - 30);
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,193,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,v |= (in.readUnsignedByte()) << 16;
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,194,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,v |= (in.readUnsignedByte()) << 8;
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,195,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,v |= (in.readUnsignedByte());
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,196,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return v * 60000L;
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,200,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long w = (((long)v) << (64 - 6)) >> (64 - 38);
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,201,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,w |= (in.readUnsignedByte()) << 24;
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,202,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,w |= (in.readUnsignedByte()) << 16;
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,203,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,w |= (in.readUnsignedByte()) << 8;
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,204,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,w |= (in.readUnsignedByte());
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,205,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return w * 1000L;
11,org.joda.time.tz.DateTimeZoneBuilder,readMillis,209,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return in.readLong();
11,org.joda.time.tz.DateTimeZoneBuilder,setFixedSavings,276,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"getLastRuleSet().setFixedSavings(nameKey, saveMillis);"
11,org.joda.time.tz.DateTimeZoneBuilder,setFixedSavings,277,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return this;
11,org.joda.time.tz.DateTimeZoneBuilder,setStandardOffset,268,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,getLastRuleSet().setStandardOffset(standardOffset);
11,org.joda.time.tz.DateTimeZoneBuilder,setStandardOffset,269,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return this;
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,333,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (id == null) {
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,339,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,ArrayList<Transition> transitions = new ArrayList<Transition>();
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,343,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,DSTZone tailZone = null;
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,345,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long millis = Long.MIN_VALUE;
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,346,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int saveMillis = 0;
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,348,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int ruleSetCount = iRuleSets.size();
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,349,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i=0; i<ruleSetCount; i++) {
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,350,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,RuleSet rs = iRuleSets.get(i);
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,351,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Transition next = rs.firstTransition(millis);
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,352,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (next == null) {
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,355,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"addTransition(transitions, next);"
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,356,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,millis = next.getMillis();
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,357,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,saveMillis = next.getSaveMillis();
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,360,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,rs = new RuleSet(rs);
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,362,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"while ((next = rs.nextTransition(millis, saveMillis)) != null) {"
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,363,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"if (addTransition(transitions, next)) {"
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,364,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (tailZone != null) {
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,366,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,break;
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,369,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,millis = next.getMillis();
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,370,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,saveMillis = next.getSaveMillis();
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,371,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (tailZone == null && i == ruleSetCount - 1) {
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,372,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,tailZone = rs.buildTailZone(id);
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,379,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,millis = rs.getUpperLimit(saveMillis);
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,383,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (transitions.size() == 0) {
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,390,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (transitions.size() == 1 && tailZone == null) {
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,396,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);"
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,397,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (zone.isCachable()) {
11,org.joda.time.tz.DateTimeZoneBuilder,toDateTimeZone,398,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return CachedDateTimeZone.forZone(zone);
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,140,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (millis % (30 * 60000L) == 0) {
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,142,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long units = millis / (30 * 60000L);
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,143,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (((units << (64 - 6)) >> (64 - 6)) == units) {
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,145,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeByte((int)(units & 0x3f));
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,146,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return;
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,150,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (millis % 60000L == 0) {
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,152,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long minutes = millis / 60000L;
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,153,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,155,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,156,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return;
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,160,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (millis % 1000L == 0) {
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,162,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long seconds = millis / 1000L;
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,163,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,165,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,166,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeInt((int)(seconds & 0xffffffff));
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,167,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return;
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,175,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeByte(millis < 0 ? 0xff : 0xc0);
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,176,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeLong(millis);
11,org.joda.time.tz.DateTimeZoneBuilder,writeMillis,177,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder,writeTo,459,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"DateTimeZone zone = toDateTimeZone(zoneID, false);"
11,org.joda.time.tz.DateTimeZoneBuilder,writeTo,461,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (zone instanceof FixedDateTimeZone) {
11,org.joda.time.tz.DateTimeZoneBuilder,writeTo,467,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (zone instanceof CachedDateTimeZone) {
11,org.joda.time.tz.DateTimeZoneBuilder,writeTo,468,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"out.writeByte('C'); // 'C' for cached, precalculated"
11,org.joda.time.tz.DateTimeZoneBuilder,writeTo,469,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,zone = ((CachedDateTimeZone)zone).getUncachedZone();
11,org.joda.time.tz.DateTimeZoneBuilder,writeTo,473,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,((PrecalculatedZone)zone).writeTo(out);
11,org.joda.time.tz.DateTimeZoneBuilder,writeTo,475,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder,writeTo,443,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (out instanceof DataOutput) {
11,org.joda.time.tz.DateTimeZoneBuilder,writeTo,446,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"writeTo(zoneID, (DataOutput)new DataOutputStream(out));"
11,org.joda.time.tz.DateTimeZoneBuilder,writeTo,448,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,<init>,1176,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,super(id);
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,<init>,1177,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStandardOffset = standardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,<init>,1178,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStartRecurrence = startRecurrence;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,<init>,1179,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iEndRecurrence = endRecurrence;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,<init>,1180,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,equals,1283,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (this == obj) {
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,equals,1286,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (obj instanceof DSTZone) {
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,equals,1287,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,DSTZone other = (DSTZone)obj;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,equals,1288,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,findMatchingRecurrence,1304,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int standardOffset = iStandardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,findMatchingRecurrence,1305,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Recurrence startRecurrence = iStartRecurrence;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,findMatchingRecurrence,1306,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Recurrence endRecurrence = iEndRecurrence;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,findMatchingRecurrence,1311,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,start = startRecurrence.next
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,findMatchingRecurrence,1319,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,findMatchingRecurrence,1322,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,end = endRecurrence.next
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,findMatchingRecurrence,1330,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,findMatchingRecurrence,1332,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return (start > end) ? startRecurrence : endRecurrence;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,getNameKey,1183,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return findMatchingRecurrence(instant).getNameKey();
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,getOffset,1187,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,getStandardOffset,1191,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iStandardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,nextTransition,1199,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int standardOffset = iStandardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,nextTransition,1200,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Recurrence startRecurrence = iStartRecurrence;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,nextTransition,1201,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Recurrence endRecurrence = iEndRecurrence;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,nextTransition,1206,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,start = startRecurrence.next
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,nextTransition,1208,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (instant > 0 && start < 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,nextTransition,1218,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,nextTransition,1221,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,end = endRecurrence.next
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,nextTransition,1223,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (instant > 0 && end < 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,nextTransition,1233,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,nextTransition,1235,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return (start > end) ? end : start;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1241,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,instant++;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1243,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int standardOffset = iStandardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1244,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Recurrence startRecurrence = iStartRecurrence;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1245,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Recurrence endRecurrence = iEndRecurrence;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1250,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,start = startRecurrence.previous
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1252,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (instant < 0 && start > 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1262,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1265,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,end = endRecurrence.previous
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1267,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (instant < 0 && end > 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1277,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,previousTransition,1279,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return ((start > end) ? start : end) - 1;
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,readFrom,1166,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return new DSTZone(id, (int)readMillis(in),"
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,writeTo,1298,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"writeMillis(out, iStandardOffset);"
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,writeTo,1299,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStartRecurrence.writeTo(out);
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,writeTo,1300,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iEndRecurrence.writeTo(out);
11,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,writeTo,1301,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,504,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,{
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,505,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (mode != 'u' && mode != 'w' && mode != 's') {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,509,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iMode = mode;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,510,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iMonthOfYear = monthOfYear;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,511,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iDayOfMonth = dayOfMonth;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,512,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iDayOfWeek = dayOfWeek;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,513,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iAdvance = advanceDayOfWeek;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,514,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iMillisOfDay = millisOfDay;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,515,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,equals,629,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (this == obj) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,equals,632,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (obj instanceof OfYear) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,equals,633,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,OfYear other = (OfYear)obj;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,equals,634,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,549,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iMode == 'w') {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,550,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,offset = standardOffset + saveMillis;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,551,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,} else if (iMode == 's') {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,554,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,offset = 0;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,558,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,instant += offset;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,560,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Chronology chrono = ISOChronology.getInstanceUTC();
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,561,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"long next = chrono.monthOfYear().set(instant, iMonthOfYear);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,563,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = chrono.millisOfDay().set(next, 0);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,564,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = chrono.millisOfDay().add(next, iMillisOfDay);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,565,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = setDayOfMonthNext(chrono, next);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,567,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iDayOfWeek == 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,568,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (next <= instant) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,569,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = chrono.year().add(next, 1);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,570,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = setDayOfMonthNext(chrono, next);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,573,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = setDayOfWeek(chrono, next);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,574,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (next <= instant) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,575,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = chrono.year().add(next, 1);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,576,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = chrono.monthOfYear().set(next, iMonthOfYear);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,577,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = setDayOfMonthNext(chrono, next);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,578,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = setDayOfWeek(chrono, next);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,next,583,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return next - offset;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,591,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iMode == 'w') {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,592,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,offset = standardOffset + saveMillis;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,600,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,instant += offset;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,602,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Chronology chrono = ISOChronology.getInstanceUTC();
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,603,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"long prev = chrono.monthOfYear().set(instant, iMonthOfYear);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,605,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"prev = chrono.millisOfDay().set(prev, 0);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,606,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"prev = chrono.millisOfDay().add(prev, iMillisOfDay);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,607,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"prev = setDayOfMonthPrevious(chrono, prev);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,609,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iDayOfWeek == 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,615,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"prev = setDayOfWeek(chrono, prev);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,616,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (prev >= instant) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,617,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"prev = chrono.year().add(prev, -1);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,618,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"prev = chrono.monthOfYear().set(prev, iMonthOfYear);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,619,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"prev = setDayOfMonthPrevious(chrono, prev);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,620,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"prev = setDayOfWeek(chrono, prev);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,previous,625,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return prev - offset;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,readFrom,482,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return new OfYear((char)in.readUnsignedByte(),"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonth,706,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iDayOfMonth >= 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonth,707,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"instant = chrono.dayOfMonth().set(instant, iDayOfMonth);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonth,709,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"instant = chrono.dayOfMonth().set(instant, 1);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonth,710,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"instant = chrono.monthOfYear().add(instant, 1);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonth,711,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"instant = chrono.dayOfMonth().add(instant, iDayOfMonth);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonth,713,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return instant;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonthNext,672,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"next = setDayOfMonth(chrono, next);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonthNext,682,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonthNext,683,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return next;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonthPrevious,691,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"prev = setDayOfMonth(chrono, prev);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonthPrevious,701,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfMonthPrevious,702,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return prev;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfWeek,717,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int dayOfWeek = chrono.dayOfWeek().get(instant);
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfWeek,718,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int daysToAdd = iDayOfWeek - dayOfWeek;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfWeek,719,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (daysToAdd != 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfWeek,720,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iAdvance) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfWeek,721,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (daysToAdd < 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfWeek,725,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (daysToAdd > 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfWeek,726,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,daysToAdd -= 7;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfWeek,729,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"instant = chrono.dayOfWeek().add(instant, daysToAdd);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setDayOfWeek,731,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return instant;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setInstant,522,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iMode == 'w') {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setInstant,523,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,offset = standardOffset + saveMillis;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setInstant,530,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Chronology chrono = ISOChronology.getInstanceUTC();
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setInstant,531,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"long millis = chrono.year().set(0, year);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setInstant,532,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"millis = chrono.monthOfYear().set(millis, iMonthOfYear);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setInstant,533,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"millis = chrono.millisOfDay().set(millis, iMillisOfDay);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setInstant,534,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"millis = setDayOfMonth(chrono, millis);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setInstant,536,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iDayOfWeek != 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,setInstant,541,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return millis - offset;
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,writeTo,659,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeByte(iMode);
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,writeTo,660,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeByte(iMonthOfYear);
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,writeTo,661,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeByte(iDayOfMonth);
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,writeTo,662,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeByte(iDayOfWeek);
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,writeTo,663,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeBoolean(iAdvance);
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,writeTo,664,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"writeMillis(out, iMillisOfDay);"
11,org.joda.time.tz.DateTimeZoneBuilder$OfYear,writeTo,665,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1500,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,super(id);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1501,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iTransitions = transitions;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1502,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iWallOffsets = wallOffsets;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1503,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStandardOffsets = standardOffsets;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1504,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iNameKeys = nameKeys;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1505,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iTailZone = tailZone;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1506,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1389,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int size = transitions.size();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1390,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (size == 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1394,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long[] trans = new long[size];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1395,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int[] wallOffsets = new int[size];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1396,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int[] standardOffsets = new int[size];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1397,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String[] nameKeys = new String[size];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1399,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Transition last = null;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1400,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i=0; i<size; i++) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1401,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Transition tr = transitions.get(i);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1403,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (!tr.isTransitionFrom(last)) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1407,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,trans[i] = tr.getMillis();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1408,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,wallOffsets[i] = tr.getWallOffset();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1409,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,standardOffsets[i] = tr.getStandardOffset();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1410,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,nameKeys[i] = tr.getNameKey();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1412,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,last = tr;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1417,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String[] zoneNameData = new String[5];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1418,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1419,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int j = 0; j < zoneStrings.length; j++) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1420,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String[] set = zoneStrings[j];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1421,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (set != null && set.length == 5 && id.equals(set[0])) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1422,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,zoneNameData = set;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1426,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Chronology chrono = ISOChronology.getInstanceUTC();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1428,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i = 0; i < nameKeys.length - 1; i++) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1429,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String curNameKey = nameKeys[i];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1430,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String nextNameKey = nameKeys[i + 1];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1431,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long curOffset = wallOffsets[i];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1432,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long nextOffset = wallOffsets[i + 1];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1433,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long curStdOffset = standardOffsets[i];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1434,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long nextStdOffset = standardOffsets[i + 1];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1435,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);"
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1436,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (curOffset != nextOffset &&
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1457,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (tailZone != null) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1458,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (tailZone.iStartRecurrence.getNameKey()
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,create,1480,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return new PrecalculatedZone
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,equals,1619,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (this == obj) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,equals,1622,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (obj instanceof PrecalculatedZone) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,equals,1623,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,PrecalculatedZone other = (PrecalculatedZone)obj;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,equals,1624,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getNameKey,1509,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long[] transitions = iTransitions;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getNameKey,1510,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"int i = Arrays.binarySearch(transitions, instant);"
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getNameKey,1511,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i >= 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getNameKey,1512,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iNameKeys[i];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getNameKey,1514,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,i = ~i;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getNameKey,1515,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i < transitions.length) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getNameKey,1516,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i > 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getNameKey,1517,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iNameKeys[i - 1];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getNameKey,1521,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iTailZone == null) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getNameKey,1524,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iTailZone.getNameKey(instant);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1528,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long[] transitions = iTransitions;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1529,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"int i = Arrays.binarySearch(transitions, instant);"
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1530,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i >= 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1531,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iWallOffsets[i];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1533,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,i = ~i;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1534,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i < transitions.length) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1535,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i > 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1536,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iWallOffsets[i - 1];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1540,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iTailZone == null) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1543,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iTailZone.getOffset(instant);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getStandardOffset,1547,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long[] transitions = iTransitions;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getStandardOffset,1548,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"int i = Arrays.binarySearch(transitions, instant);"
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getStandardOffset,1549,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i >= 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getStandardOffset,1550,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iStandardOffsets[i];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getStandardOffset,1552,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,i = ~i;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getStandardOffset,1553,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i < transitions.length) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getStandardOffset,1554,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i > 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getStandardOffset,1555,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iStandardOffsets[i - 1];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getStandardOffset,1559,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iTailZone == null) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getStandardOffset,1562,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iTailZone.getStandardOffset(instant);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,isCachable,1690,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iTailZone != null) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,isCachable,1691,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return true;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,isFixed,1566,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return false;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1570,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long[] transitions = iTransitions;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1571,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"int i = Arrays.binarySearch(transitions, instant);"
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1572,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,i = (i >= 0) ? (i + 1) : ~i;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1573,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i < transitions.length) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1574,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return transitions[i];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1576,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iTailZone == null) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1579,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long end = transitions[transitions.length - 1];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1580,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (instant < end) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1583,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iTailZone.nextTransition(instant);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1587,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long[] transitions = iTransitions;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1588,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"int i = Arrays.binarySearch(transitions, instant);"
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1589,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i >= 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1595,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,i = ~i;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1596,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i < transitions.length) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1597,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i > 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1598,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long prev = transitions[i - 1];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1599,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (prev > Long.MIN_VALUE) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1600,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return prev - 1;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1605,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iTailZone != null) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1606,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long prev = iTailZone.previousTransition(instant);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1607,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (prev < instant) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,previousTransition,1608,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return prev;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1341,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int poolSize = in.readUnsignedShort();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1342,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String[] pool = new String[poolSize];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1343,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i=0; i<poolSize; i++) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1344,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,pool[i] = in.readUTF();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1347,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int size = in.readInt();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1348,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long[] transitions = new long[size];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1349,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int[] wallOffsets = new int[size];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1350,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int[] standardOffsets = new int[size];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1351,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String[] nameKeys = new String[size];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1353,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i=0; i<size; i++) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1354,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,transitions[i] = readMillis(in);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1355,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,wallOffsets[i] = (int)readMillis(in);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1356,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,standardOffsets[i] = (int)readMillis(in);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1359,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (poolSize < 256) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1360,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,index = in.readUnsignedByte();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1364,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,nameKeys[i] = pool[index];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1367,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1370,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,DSTZone tailZone = null;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1371,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (in.readBoolean()) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1372,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"tailZone = DSTZone.readFrom(in, id);"
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1375,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return new PrecalculatedZone
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1638,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int size = iTransitions.length;
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1641,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Set<String> poolSet = new HashSet<String>();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1642,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i=0; i<size; i++) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1643,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,poolSet.add(iNameKeys[i]);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1646,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int poolSize = poolSet.size();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1647,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (poolSize > 65535) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1650,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String[] pool = new String[poolSize];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1651,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Iterator<String> it = poolSet.iterator();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1652,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i=0; it.hasNext(); i++) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1653,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,pool[i] = it.next();
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1657,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeShort(poolSize);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1658,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i=0; i<poolSize; i++) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1659,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeUTF(pool[i]);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1662,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeInt(size);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1664,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i=0; i<size; i++) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1665,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"writeMillis(out, iTransitions[i]);"
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1666,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"writeMillis(out, iWallOffsets[i]);"
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1667,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"writeMillis(out, iStandardOffsets[i]);"
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1670,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String nameKey = iNameKeys[i];
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1671,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int j=0; j<poolSize; j++) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1672,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (pool[j].equals(nameKey)) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1673,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (poolSize < 256) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1674,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeByte(j);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1683,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeBoolean(iTailZone != null);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1684,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iTailZone != null) {
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1685,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iTailZone.writeTo(out);
11,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,writeTo,1687,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,<init>,747,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"Recurrence(OfYear ofYear, String nameKey, int saveMillis) {"
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,<init>,748,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iOfYear = ofYear;
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,<init>,749,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iNameKey = nameKey;
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,<init>,750,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iSaveMillis = saveMillis;
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,<init>,751,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,equals,780,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (this == obj) {
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,equals,783,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (obj instanceof Recurrence) {
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,equals,784,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Recurrence other = (Recurrence)obj;
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,equals,785,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,getNameKey,772,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iNameKey;
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,getSaveMillis,776,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iSaveMillis;
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,next,761,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return iOfYear.next(instant, standardOffset, saveMillis);"
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,previous,768,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return iOfYear.previous(instant, standardOffset, saveMillis);"
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,readFrom,740,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));"
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,writeTo,794,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iOfYear.writeTo(out);
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,writeTo,795,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,out.writeUTF(iNameKey);
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,writeTo,796,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"writeMillis(out, iSaveMillis);"
11,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,writeTo,797,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,<init>,816,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"Rule(Recurrence recurrence, int fromYear, int toYear) {"
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,<init>,817,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iRecurrence = recurrence;
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,<init>,818,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iFromYear = fromYear;
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,<init>,819,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iToYear = toYear;
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,<init>,820,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,getNameKey,835,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iRecurrence.getNameKey();
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,getSaveMillis,839,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iRecurrence.getSaveMillis();
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,getToYear,827,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iToYear;
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,843,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Chronology chrono = ISOChronology.getInstanceUTC();
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,845,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,final int wallOffset = standardOffset + saveMillis;
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,846,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long testInstant = instant;
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,849,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (instant == Long.MIN_VALUE) {
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,850,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,year = Integer.MIN_VALUE;
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,852,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,year = chrono.year().get(instant + wallOffset);
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,855,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (year < iFromYear) {
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,857,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"testInstant = chrono.year().set(0, iFromYear) - wallOffset;"
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,860,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,testInstant -= 1;
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,863,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"long next = iRecurrence.next(testInstant, standardOffset, saveMillis);"
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,865,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (next > instant) {
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,866,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,year = chrono.year().get(next + wallOffset);
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,867,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (year > iToYear) {
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,869,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,next = instant;
11,org.joda.time.tz.DateTimeZoneBuilder$Rule,next,873,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return next;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<clinit>,948,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long now = DateTimeUtils.currentTimeMillis();
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<clinit>,949,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<clinit>,950,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,963,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,RuleSet() {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,964,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iRules = new ArrayList<Rule>(10);
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,965,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iUpperYear = Integer.MAX_VALUE;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,966,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,971,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,RuleSet(RuleSet rs) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,972,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStandardOffset = rs.iStandardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,973,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iRules = new ArrayList<Rule>(rs.iRules);
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,974,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iInitialNameKey = rs.iInitialNameKey;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,975,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iInitialSaveMillis = rs.iInitialSaveMillis;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,976,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iUpperYear = rs.iUpperYear;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,977,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iUpperOfYear = rs.iUpperOfYear;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,<init>,978,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,addRule,994,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (!iRules.contains(rule)) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,addRule,995,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iRules.add(rule);
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,addRule,997,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,buildTailZone,1141,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iRules.size() == 2) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,buildTailZone,1142,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Rule startRule = iRules.get(0);
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,buildTailZone,1143,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Rule endRule = iRules.get(1);
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,buildTailZone,1144,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (startRule.getToYear() == Integer.MAX_VALUE &&
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,buildTailZone,1154,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return new DSTZone(id, iStandardOffset,"
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,buildTailZone,1158,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return null;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1011,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iInitialNameKey != null) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1013,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return new Transition(firstMillis, iInitialNameKey,"
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1018,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,ArrayList<Rule> copy = new ArrayList<Rule>(iRules);
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1024,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long millis = Long.MIN_VALUE;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1025,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int saveMillis = 0;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1026,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Transition first = null;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1029,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"while ((next = nextTransition(millis, saveMillis)) != null) {"
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1030,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,millis = next.getMillis();
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1032,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (millis == firstMillis) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1037,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (millis > firstMillis) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1038,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (first == null) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1042,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (Rule rule : copy) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1043,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (rule.getSaveMillis() == 0) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1044,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"first = new Transition(firstMillis, rule, iStandardOffset);"
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1045,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,break;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1047,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1049,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (first == null) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1061,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"first = new Transition(firstMillis, next);"
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1063,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,saveMillis = next.getSaveMillis();
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1066,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iRules = copy;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,firstTransition,1067,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return first;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,getUpperLimit,1131,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iUpperYear == Integer.MAX_VALUE) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,getUpperLimit,1132,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return Long.MAX_VALUE;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,getUpperLimit,1134,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);"
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1082,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Chronology chrono = ISOChronology.getInstanceUTC();
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1085,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Rule nextRule = null;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1086,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long nextMillis = Long.MAX_VALUE;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1088,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Iterator<Rule> it = iRules.iterator();
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1089,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,while (it.hasNext()) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1090,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,Rule rule = it.next();
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1091,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"long next = rule.next(instant, iStandardOffset, saveMillis);"
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1092,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (next <= instant) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1093,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,it.remove();
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1094,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,continue;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1098,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (next <= nextMillis) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1100,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,nextRule = rule;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1101,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,nextMillis = next;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1103,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1105,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (nextRule == null) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1106,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return null;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1110,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1115,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iUpperYear < Integer.MAX_VALUE) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1116,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long upperMillis =
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1118,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (nextMillis >= upperMillis) {
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1120,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return null;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,nextTransition,1124,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return new Transition(nextMillis, nextRule, iStandardOffset);"
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,setFixedSavings,989,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iInitialNameKey = nameKey;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,setFixedSavings,990,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iInitialSaveMillis = saveMillis;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,setFixedSavings,991,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,setStandardOffset,985,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStandardOffset = standardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,setStandardOffset,986,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,setUpperLimit,1000,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iUpperYear = year;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,setUpperLimit,1001,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iUpperOfYear = ofYear;
11,org.joda.time.tz.DateTimeZoneBuilder$RuleSet,setUpperLimit,1002,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,898,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"int wallOffset, int standardOffset) {"
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,899,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iMillis = millis;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,900,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iNameKey = nameKey;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,901,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iWallOffset = wallOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,902,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStandardOffset = standardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,903,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,890,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"Transition(long millis, Rule rule, int standardOffset) {"
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,891,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iMillis = millis;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,892,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iNameKey = rule.getNameKey();
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,893,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iWallOffset = standardOffset + rule.getSaveMillis();
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,894,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStandardOffset = standardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,895,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,883,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"Transition(long millis, Transition tr) {"
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,884,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iMillis = millis;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,885,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iNameKey = tr.iNameKey;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,886,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iWallOffset = tr.iWallOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,887,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStandardOffset = tr.iStandardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,<init>,888,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,getMillis,906,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iMillis;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,getNameKey,910,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iNameKey;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,getSaveMillis,922,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iWallOffset - iStandardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,getStandardOffset,918,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iStandardOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,getWallOffset,914,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iWallOffset;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,isTransitionFrom,929,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (other == null) {
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,isTransitionFrom,930,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return true;
11,org.joda.time.tz.DateTimeZoneBuilder$Transition,isTransitionFrom,932,/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iMillis > other.iMillis &&
11,org.joda.time.tz.DefaultNameProvider,<init>,37,/JodaTime/src/main/java/org/joda/time/tz/DefaultNameProvider.java,"private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();"
11,org.joda.time.tz.DefaultNameProvider,<init>,39,/JodaTime/src/main/java/org/joda/time/tz/DefaultNameProvider.java,public DefaultNameProvider() {
11,org.joda.time.tz.DefaultNameProvider,<init>,40,/JodaTime/src/main/java/org/joda/time/tz/DefaultNameProvider.java,}
11,org.joda.time.tz.DefaultNameProvider,createCache,87,/JodaTime/src/main/java/org/joda/time/tz/DefaultNameProvider.java,return new HashMap(7);
11,org.joda.time.tz.FixedDateTimeZone,<init>,38,/JodaTime/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,super(id);
11,org.joda.time.tz.FixedDateTimeZone,<init>,39,/JodaTime/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,iNameKey = nameKey;
11,org.joda.time.tz.FixedDateTimeZone,<init>,40,/JodaTime/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,iWallOffset = wallOffset;
11,org.joda.time.tz.FixedDateTimeZone,<init>,41,/JodaTime/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,iStandardOffset = standardOffset;
11,org.joda.time.tz.FixedDateTimeZone,<init>,42,/JodaTime/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,}
11,org.joda.time.tz.FixedDateTimeZone,equals,88,/JodaTime/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,if (this == obj) {
11,org.joda.time.tz.FixedDateTimeZone,equals,89,/JodaTime/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,return true;
11,org.joda.time.tz.FixedDateTimeZone,getOffset,49,/JodaTime/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,return iWallOffset;
11,org.joda.time.tz.FixedDateTimeZone,hashCode,102,/JodaTime/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
11,org.joda.time.tz.ZoneInfoCompiler,<clinit>,68,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();
11,org.joda.time.tz.ZoneInfoCompiler,<clinit>,70,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,cVerbose.set(Boolean.FALSE);
11,org.joda.time.tz.ZoneInfoCompiler,<clinit>,71,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,<init>,354,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,public ZoneInfoCompiler() {
11,org.joda.time.tz.ZoneInfoCompiler,<init>,355,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"iRuleSets = new HashMap<String, RuleSet>();"
11,org.joda.time.tz.ZoneInfoCompiler,<init>,356,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iZones = new ArrayList<Zone>();
11,org.joda.time.tz.ZoneInfoCompiler,<init>,357,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iLinks = new ArrayList<String>();
11,org.joda.time.tz.ZoneInfoCompiler,<init>,358,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,compile,367,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (sources != null) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,368,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,for (int i=0; i<sources.length; i++) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,369,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,BufferedReader in = new BufferedReader(new FileReader(sources[i]));
11,org.joda.time.tz.ZoneInfoCompiler,compile,370,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,parseDataFile(in);
11,org.joda.time.tz.ZoneInfoCompiler,compile,371,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,in.close();
11,org.joda.time.tz.ZoneInfoCompiler,compile,375,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (outputDir != null) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,376,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (!outputDir.exists()) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,379,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (!outputDir.isDirectory()) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,384,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"Map<String, DateTimeZone> map = new TreeMap<String, DateTimeZone>();"
11,org.joda.time.tz.ZoneInfoCompiler,compile,386,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"System.out.println(""Writing zoneinfo files"");"
11,org.joda.time.tz.ZoneInfoCompiler,compile,387,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,for (int i=0; i<iZones.size(); i++) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,388,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,Zone zone = iZones.get(i);
11,org.joda.time.tz.ZoneInfoCompiler,compile,389,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,DateTimeZoneBuilder builder = new DateTimeZoneBuilder();
11,org.joda.time.tz.ZoneInfoCompiler,compile,390,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"zone.addToBuilder(builder, iRuleSets);"
11,org.joda.time.tz.ZoneInfoCompiler,compile,391,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"final DateTimeZone original = builder.toDateTimeZone(zone.iName, true);"
11,org.joda.time.tz.ZoneInfoCompiler,compile,392,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,DateTimeZone tz = original;
11,org.joda.time.tz.ZoneInfoCompiler,compile,393,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"if (test(tz.getID(), tz)) {"
11,org.joda.time.tz.ZoneInfoCompiler,compile,394,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"map.put(tz.getID(), tz);"
11,org.joda.time.tz.ZoneInfoCompiler,compile,395,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (outputDir != null) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,396,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (ZoneInfoCompiler.verbose()) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,399,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"File file = new File(outputDir, tz.getID());"
11,org.joda.time.tz.ZoneInfoCompiler,compile,400,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (!file.getParentFile().exists()) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,401,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,file.getParentFile().mkdirs();
11,org.joda.time.tz.ZoneInfoCompiler,compile,403,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,OutputStream out = new FileOutputStream(file);
11,org.joda.time.tz.ZoneInfoCompiler,compile,404,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"builder.writeTo(zone.iName, out);"
11,org.joda.time.tz.ZoneInfoCompiler,compile,405,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,out.close();
11,org.joda.time.tz.ZoneInfoCompiler,compile,408,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,InputStream in = new FileInputStream(file);
11,org.joda.time.tz.ZoneInfoCompiler,compile,409,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"DateTimeZone tz2 = DateTimeZoneBuilder.readFrom(in, tz.getID());"
11,org.joda.time.tz.ZoneInfoCompiler,compile,410,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,in.close();
11,org.joda.time.tz.ZoneInfoCompiler,compile,412,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (!original.equals(tz2)) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,420,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,for (int pass=0; pass<2; pass++) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,421,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,for (int i=0; i<iLinks.size(); i += 2) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,436,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (outputDir != null) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,437,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"System.out.println(""Writing ZoneInfoMap"");"
11,org.joda.time.tz.ZoneInfoCompiler,compile,438,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"File file = new File(outputDir, ""ZoneInfoMap"");"
11,org.joda.time.tz.ZoneInfoCompiler,compile,439,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (!file.getParentFile().exists()) {
11,org.joda.time.tz.ZoneInfoCompiler,compile,443,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,OutputStream out = new FileOutputStream(file);
11,org.joda.time.tz.ZoneInfoCompiler,compile,444,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,DataOutputStream dout = new DataOutputStream(out);
11,org.joda.time.tz.ZoneInfoCompiler,compile,446,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"Map<String, DateTimeZone> zimap = new TreeMap<String, DateTimeZone>(String.CASE_INSENSITIVE_ORDER);"
11,org.joda.time.tz.ZoneInfoCompiler,compile,447,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,zimap.putAll(map);
11,org.joda.time.tz.ZoneInfoCompiler,compile,448,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"writeZoneInfoMap(dout, zimap);"
11,org.joda.time.tz.ZoneInfoCompiler,compile,449,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,dout.close();
11,org.joda.time.tz.ZoneInfoCompiler,compile,452,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return map;
11,org.joda.time.tz.ZoneInfoCompiler,getLenientISOChronology,155,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (cLenientISO == null) {
11,org.joda.time.tz.ZoneInfoCompiler,getLenientISOChronology,156,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,cLenientISO = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
11,org.joda.time.tz.ZoneInfoCompiler,getLenientISOChronology,158,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return cLenientISO;
11,org.joda.time.tz.ZoneInfoCompiler,getStartOfYear,148,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (cStartOfYear == null) {
11,org.joda.time.tz.ZoneInfoCompiler,getStartOfYear,149,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,cStartOfYear = new DateTimeOfYear();
11,org.joda.time.tz.ZoneInfoCompiler,getStartOfYear,151,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return cStartOfYear;
11,org.joda.time.tz.ZoneInfoCompiler,main,94,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (args.length == 0) {
11,org.joda.time.tz.ZoneInfoCompiler,main,99,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,File inputDir = null;
11,org.joda.time.tz.ZoneInfoCompiler,main,100,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,File outputDir = null;
11,org.joda.time.tz.ZoneInfoCompiler,main,101,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,boolean verbose = false;
11,org.joda.time.tz.ZoneInfoCompiler,main,104,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,for (i=0; i<args.length; i++) {
11,org.joda.time.tz.ZoneInfoCompiler,main,106,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"if (""-src"".equals(args[i])) {"
11,org.joda.time.tz.ZoneInfoCompiler,main,107,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,inputDir = new File(args[++i]);
11,org.joda.time.tz.ZoneInfoCompiler,main,108,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"} else if (""-dst"".equals(args[i])) {"
11,org.joda.time.tz.ZoneInfoCompiler,main,109,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,outputDir = new File(args[++i]);
11,org.joda.time.tz.ZoneInfoCompiler,main,110,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"} else if (""-verbose"".equals(args[i])) {"
11,org.joda.time.tz.ZoneInfoCompiler,main,112,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"} else if (""-?"".equals(args[i])) {"
11,org.joda.time.tz.ZoneInfoCompiler,main,116,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,break;
11,org.joda.time.tz.ZoneInfoCompiler,main,121,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,main,124,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (i >= args.length) {
11,org.joda.time.tz.ZoneInfoCompiler,main,129,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,File[] sources = new File[args.length - i];
11,org.joda.time.tz.ZoneInfoCompiler,main,130,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"for (int j=0; i<args.length; i++,j++) {"
11,org.joda.time.tz.ZoneInfoCompiler,main,131,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"sources[j] = inputDir == null ? new File(args[i]) : new File(inputDir, args[i]);"
11,org.joda.time.tz.ZoneInfoCompiler,main,134,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,cVerbose.set(verbose);
11,org.joda.time.tz.ZoneInfoCompiler,main,135,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,ZoneInfoCompiler zic = new ZoneInfoCompiler();
11,org.joda.time.tz.ZoneInfoCompiler,main,136,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"zic.compile(outputDir, sources);"
11,org.joda.time.tz.ZoneInfoCompiler,main,137,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,456,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,Zone zone = null;
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,458,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,while ((line = in.readLine()) != null) {
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,459,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,String trimmed = line.trim();
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,460,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (trimmed.length() == 0 || trimmed.charAt(0) == '#') {
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,461,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,continue;
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,464,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int index = line.indexOf('#');
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,465,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (index >= 0) {
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,466,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"line = line.substring(0, index);"
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,471,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"StringTokenizer st = new StringTokenizer(line, "" \t"");"
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,473,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens()) {
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,474,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (zone != null) {
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,476,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,zone.chain(st);
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,480,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (zone != null) {
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,483,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,zone = null;
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,486,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (st.hasMoreTokens()) {
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,487,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,String token = st.nextToken();
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,488,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"if (token.equalsIgnoreCase(""Rule"")) {"
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,489,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,Rule r = new Rule(st);
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,490,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,RuleSet rs = iRuleSets.get(r.iName);
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,491,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (rs == null) {
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,492,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,rs = new RuleSet(r);
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,493,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"iRuleSets.put(r.iName, rs);"
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,495,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,rs.addRule(r);
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,497,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"} else if (token.equalsIgnoreCase(""Zone"")) {"
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,498,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,zone = new Zone(st);
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,506,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,508,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (zone != null) {
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,509,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iZones.add(zone);
11,org.joda.time.tz.ZoneInfoCompiler,parseDataFile,511,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,parseDayOfWeek,225,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,DateTimeField field = ISOChronology.getInstanceUTC().dayOfWeek();
11,org.joda.time.tz.ZoneInfoCompiler,parseDayOfWeek,226,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"return field.get(field.set(0, str, Locale.ENGLISH));"
11,org.joda.time.tz.ZoneInfoCompiler,parseMonth,220,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,DateTimeField field = ISOChronology.getInstanceUTC().monthOfYear();
11,org.joda.time.tz.ZoneInfoCompiler,parseMonth,221,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"return field.get(field.set(0, str, Locale.ENGLISH));"
11,org.joda.time.tz.ZoneInfoCompiler,parseOptional,230,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"return (str.equals(""-"")) ? null : str;"
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,234,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,DateTimeFormatter p = ISODateTimeFormat.hourMinuteSecondFraction();
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,235,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"MutableDateTime mdt = new MutableDateTime(0, getLenientISOChronology());"
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,236,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int pos = 0;
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,237,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"if (str.startsWith(""-"")) {"
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,238,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,pos = 1;
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,240,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"int newPos = p.parseInto(mdt, str, pos);"
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,241,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (newPos == ~pos) {
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,242,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,throw new IllegalArgumentException(str);
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,244,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int millis = (int)mdt.getMillis();
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,245,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (pos == 1) {
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,246,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,millis = -millis;
11,org.joda.time.tz.ZoneInfoCompiler,parseTime,248,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return millis;
11,org.joda.time.tz.ZoneInfoCompiler,parseYear,208,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,str = str.toLowerCase();
11,org.joda.time.tz.ZoneInfoCompiler,parseYear,209,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"if (str.equals(""minimum"") || str.equals(""min"")) {"
11,org.joda.time.tz.ZoneInfoCompiler,parseYear,211,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"} else if (str.equals(""maximum"") || str.equals(""max"")) {"
11,org.joda.time.tz.ZoneInfoCompiler,parseYear,212,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return Integer.MAX_VALUE;
11,org.joda.time.tz.ZoneInfoCompiler,parseYear,213,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"} else if (str.equals(""only"")) {"
11,org.joda.time.tz.ZoneInfoCompiler,parseYear,214,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return def;
11,org.joda.time.tz.ZoneInfoCompiler,parseYear,216,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return Integer.parseInt(str);
11,org.joda.time.tz.ZoneInfoCompiler,parseZoneChar,252,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,switch (c) {
11,org.joda.time.tz.ZoneInfoCompiler,parseZoneChar,258,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return 'u';
11,org.joda.time.tz.ZoneInfoCompiler,parseZoneChar,261,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return 'w';
11,org.joda.time.tz.ZoneInfoCompiler,test,269,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (!id.equals(tz.getID())) {
11,org.joda.time.tz.ZoneInfoCompiler,test,275,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"long millis = ISOChronology.getInstanceUTC().year().set(0, 1850);"
11,org.joda.time.tz.ZoneInfoCompiler,test,276,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"long end = ISOChronology.getInstanceUTC().year().set(0, 2050);"
11,org.joda.time.tz.ZoneInfoCompiler,test,278,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int offset = tz.getOffset(millis);
11,org.joda.time.tz.ZoneInfoCompiler,test,279,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,String key = tz.getNameKey(millis);
11,org.joda.time.tz.ZoneInfoCompiler,test,281,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,List<Long> transitions = new ArrayList<Long>();
11,org.joda.time.tz.ZoneInfoCompiler,test,284,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,long next = tz.nextTransition(millis);
11,org.joda.time.tz.ZoneInfoCompiler,test,285,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (next == millis || next > end) {
11,org.joda.time.tz.ZoneInfoCompiler,test,286,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,break;
11,org.joda.time.tz.ZoneInfoCompiler,test,289,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,millis = next;
11,org.joda.time.tz.ZoneInfoCompiler,test,291,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int nextOffset = tz.getOffset(millis);
11,org.joda.time.tz.ZoneInfoCompiler,test,292,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,String nextKey = tz.getNameKey(millis);
11,org.joda.time.tz.ZoneInfoCompiler,test,294,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (offset == nextOffset
11,org.joda.time.tz.ZoneInfoCompiler,test,302,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"if (nextKey == null || (nextKey.length() < 3 && !""??"".equals(nextKey))) {"
11,org.joda.time.tz.ZoneInfoCompiler,test,310,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,transitions.add(Long.valueOf(millis));
11,org.joda.time.tz.ZoneInfoCompiler,test,312,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,offset = nextOffset;
11,org.joda.time.tz.ZoneInfoCompiler,test,313,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,key = nextKey;
11,org.joda.time.tz.ZoneInfoCompiler,test,314,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,test,318,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"millis = ISOChronology.getInstanceUTC().year().set(0, 2050);"
11,org.joda.time.tz.ZoneInfoCompiler,test,319,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"end = ISOChronology.getInstanceUTC().year().set(0, 1850);"
11,org.joda.time.tz.ZoneInfoCompiler,test,321,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,for (int i=transitions.size(); --i>= 0; ) {
11,org.joda.time.tz.ZoneInfoCompiler,test,322,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,long prev = tz.previousTransition(millis);
11,org.joda.time.tz.ZoneInfoCompiler,test,323,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (prev == millis || prev < end) {
11,org.joda.time.tz.ZoneInfoCompiler,test,327,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,millis = prev;
11,org.joda.time.tz.ZoneInfoCompiler,test,329,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,long trans = transitions.get(i).longValue();
11,org.joda.time.tz.ZoneInfoCompiler,test,331,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (trans - 1 != millis) {
11,org.joda.time.tz.ZoneInfoCompiler,test,340,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,test,342,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return true;
11,org.joda.time.tz.ZoneInfoCompiler,verbose,78,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return cVerbose.get();
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,166,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"Map<String, Short> idToIndex = new HashMap<String, Short>(zimap.size());"
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,167,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"TreeMap<Short, String> indexToId = new TreeMap<Short, String>();"
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,169,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,short count = 0;
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,170,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"for (Entry<String, DateTimeZone> entry : zimap.entrySet()) {"
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,171,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,String id = (String)entry.getKey();
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,172,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (!idToIndex.containsKey(id)) {
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,173,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,Short index = Short.valueOf(count);
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,174,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"idToIndex.put(id, index);"
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,175,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"indexToId.put(index, id);"
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,176,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (++count == 0) {
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,180,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,id = ((DateTimeZone)entry.getValue()).getID();
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,181,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (!idToIndex.containsKey(id)) {
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,189,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,192,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,dout.writeShort(indexToId.size());
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,193,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,for (String id : indexToId.values()) {
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,194,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,dout.writeUTF(id);
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,195,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,198,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,dout.writeShort(zimap.size());
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,199,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"for (Entry<String, DateTimeZone> entry : zimap.entrySet()) {"
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,200,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,String id = entry.getKey();
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,201,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,dout.writeShort(idToIndex.get(id).shortValue());
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,202,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,id = entry.getValue().getID();
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,203,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,dout.writeShort(idToIndex.get(id).shortValue());
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,204,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler,writeZoneInfoMap,205,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,521,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,DateTimeOfYear() {
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,522,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iMonthOfYear = 1;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,523,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iDayOfMonth = 1;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,524,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iDayOfWeek = 0;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,525,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iAdvanceDayOfWeek = false;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,526,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iMillisOfDay = 0;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,527,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iZoneChar = 'w';
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,528,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,530,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,DateTimeOfYear(StringTokenizer st) {
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,531,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int month = 1;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,532,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int day = 1;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,533,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int dayOfWeek = 0;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,534,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int millis = 0;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,535,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,boolean advance = false;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,536,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,char zoneChar = 'w';
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,538,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (st.hasMoreTokens()) {
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,539,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,month = parseMonth(st.nextToken());
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,541,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (st.hasMoreTokens()) {
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,542,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,String str = st.nextToken();
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,543,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"if (str.startsWith(""last"")) {"
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,544,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,day = -1;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,545,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,dayOfWeek = parseDayOfWeek(str.substring(4));
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,546,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,advance = false;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,549,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,day = Integer.parseInt(str);
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,550,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,dayOfWeek = 0;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,551,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,advance = false;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,552,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,} catch (NumberFormatException e) {
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,553,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"int index = str.indexOf("">="");"
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,554,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (index > 0) {
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,555,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,day = Integer.parseInt(str.substring(index + 2));
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,556,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"dayOfWeek = parseDayOfWeek(str.substring(0, index));"
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,557,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,advance = true;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,568,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,571,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (st.hasMoreTokens()) {
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,572,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,str = st.nextToken();
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,573,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,zoneChar = parseZoneChar(str.charAt(str.length() - 1));
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,574,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"if (str.equals(""24:00"")) {"
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,583,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,millis = parseTime(str);
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,589,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iMonthOfYear = month;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,590,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iDayOfMonth = day;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,591,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iDayOfWeek = dayOfWeek;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,592,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iAdvanceDayOfWeek = advance;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,593,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iMillisOfDay = millis;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,594,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iZoneChar = zoneChar;
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,<init>,595,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,addCutover,617,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"builder.addCutover(year,"
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,addCutover,624,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,addRecurring,603,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"builder.addRecurringSavings(nameKey, saveMillis,"
11,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear,addRecurring,611,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$Rule,<init>,646,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,Rule(StringTokenizer st) {
11,org.joda.time.tz.ZoneInfoCompiler$Rule,<init>,647,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iName = st.nextToken().intern();
11,org.joda.time.tz.ZoneInfoCompiler$Rule,<init>,648,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"iFromYear = parseYear(st.nextToken(), 0);"
11,org.joda.time.tz.ZoneInfoCompiler$Rule,<init>,649,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"iToYear = parseYear(st.nextToken(), iFromYear);"
11,org.joda.time.tz.ZoneInfoCompiler$Rule,<init>,650,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (iToYear < iFromYear) {
11,org.joda.time.tz.ZoneInfoCompiler$Rule,<init>,653,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iType = parseOptional(st.nextToken());
11,org.joda.time.tz.ZoneInfoCompiler$Rule,<init>,654,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iDateTimeOfYear = new DateTimeOfYear(st);
11,org.joda.time.tz.ZoneInfoCompiler$Rule,<init>,655,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iSaveMillis = parseTime(st.nextToken());
11,org.joda.time.tz.ZoneInfoCompiler$Rule,<init>,656,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iLetterS = parseOptional(st.nextToken());
11,org.joda.time.tz.ZoneInfoCompiler$Rule,<init>,657,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$Rule,addRecurring,663,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,String nameKey = formatName(nameFormat);
11,org.joda.time.tz.ZoneInfoCompiler$Rule,addRecurring,664,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iDateTimeOfYear.addRecurring
11,org.joda.time.tz.ZoneInfoCompiler$Rule,addRecurring,666,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$Rule,formatName,669,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int index = nameFormat.indexOf('/');
11,org.joda.time.tz.ZoneInfoCompiler$Rule,formatName,670,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (index > 0) {
11,org.joda.time.tz.ZoneInfoCompiler$Rule,formatName,678,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"index = nameFormat.indexOf(""%s"");"
11,org.joda.time.tz.ZoneInfoCompiler$Rule,formatName,679,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (index < 0) {
11,org.joda.time.tz.ZoneInfoCompiler$Rule,formatName,682,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"String left = nameFormat.substring(0, index);"
11,org.joda.time.tz.ZoneInfoCompiler$Rule,formatName,683,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,String right = nameFormat.substring(index + 2);
11,org.joda.time.tz.ZoneInfoCompiler$Rule,formatName,685,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (iLetterS == null) {
11,org.joda.time.tz.ZoneInfoCompiler$Rule,formatName,688,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,name = left + iLetterS + right;
11,org.joda.time.tz.ZoneInfoCompiler$Rule,formatName,690,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,return name.intern();
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,<init>,709,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,RuleSet(Rule rule) {
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,<init>,710,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iRules = new ArrayList<Rule>();
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,<init>,711,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iRules.add(rule);
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,<init>,712,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,addRecurring,725,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,for (int i=0; i<iRules.size(); i++) {
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,addRecurring,726,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,Rule rule = iRules.get(i);
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,addRecurring,727,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"rule.addRecurring(builder, nameFormat);"
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,addRecurring,729,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,addRule,715,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (!(rule.iName.equals(iRules.get(0).iName))) {
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,addRule,718,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iRules.add(rule);
11,org.joda.time.tz.ZoneInfoCompiler$RuleSet,addRule,719,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,746,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"private Zone(String name, StringTokenizer st) {"
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,747,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iName = name.intern();
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,748,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iOffsetMillis = parseTime(st.nextToken());
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,749,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iRules = parseOptional(st.nextToken());
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,750,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iFormat = st.nextToken().intern();
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,752,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int year = Integer.MAX_VALUE;
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,753,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,DateTimeOfYear dtOfYear = getStartOfYear();
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,755,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (st.hasMoreTokens()) {
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,756,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,year = Integer.parseInt(st.nextToken());
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,757,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (st.hasMoreTokens()) {
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,758,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,dtOfYear = new DateTimeOfYear(st);
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,762,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iUntilYear = year;
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,763,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iUntilDateTimeOfYear = dtOfYear;
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,764,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,743,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"this(st.nextToken(), st);"
11,org.joda.time.tz.ZoneInfoCompiler$Zone,<init>,744,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,786,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"addToBuilder(this, builder, ruleSets);"
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,787,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,793,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,for (; zone != null; zone = zone.iNext) {
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,794,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,builder.setStandardOffset(zone.iOffsetMillis);
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,796,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (zone.iRules == null) {
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,797,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"builder.setFixedSavings(zone.iFormat, 0);"
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,801,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,int saveMillis = parseTime(zone.iRules);
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,804,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,catch (Exception e) {
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,805,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,RuleSet rs = ruleSets.get(zone.iRules);
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,806,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (rs == null) {
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,810,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"rs.addRecurring(builder, zone.iFormat);"
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,814,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (zone.iUntilYear == Integer.MAX_VALUE) {
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,815,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,break;
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,818,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"zone.iUntilDateTimeOfYear.addCutover(builder, zone.iUntilYear);"
11,org.joda.time.tz.ZoneInfoCompiler$Zone,addToBuilder,820,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoCompiler$Zone,chain,767,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,if (iNext != null) {
11,org.joda.time.tz.ZoneInfoCompiler$Zone,chain,768,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,iNext.chain(st);
11,org.joda.time.tz.ZoneInfoCompiler$Zone,chain,770,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,"iNext = new Zone(iName, st);"
11,org.joda.time.tz.ZoneInfoCompiler$Zone,chain,772,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java,}
11,org.joda.time.tz.ZoneInfoProvider,<init>,56,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,public ZoneInfoProvider(File fileDir) throws IOException {
11,org.joda.time.tz.ZoneInfoProvider,<init>,57,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (fileDir == null) {
11,org.joda.time.tz.ZoneInfoProvider,<init>,60,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (!fileDir.exists()) {
11,org.joda.time.tz.ZoneInfoProvider,<init>,63,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (!fileDir.isDirectory()) {
11,org.joda.time.tz.ZoneInfoProvider,<init>,67,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,iFileDir = fileDir;
11,org.joda.time.tz.ZoneInfoProvider,<init>,68,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,iResourcePath = null;
11,org.joda.time.tz.ZoneInfoProvider,<init>,69,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,iLoader = null;
11,org.joda.time.tz.ZoneInfoProvider,<init>,71,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));"
11,org.joda.time.tz.ZoneInfoProvider,<init>,72,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
11,org.joda.time.tz.ZoneInfoProvider,<init>,82,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"this(resourcePath, null, false);"
11,org.joda.time.tz.ZoneInfoProvider,<init>,83,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
11,org.joda.time.tz.ZoneInfoProvider,<init>,106,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,{
11,org.joda.time.tz.ZoneInfoProvider,<init>,107,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (resourcePath == null) {
11,org.joda.time.tz.ZoneInfoProvider,<init>,110,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"if (!resourcePath.endsWith(""/"")) {"
11,org.joda.time.tz.ZoneInfoProvider,<init>,111,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,resourcePath += '/';
11,org.joda.time.tz.ZoneInfoProvider,<init>,114,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,iFileDir = null;
11,org.joda.time.tz.ZoneInfoProvider,<init>,115,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,iResourcePath = resourcePath;
11,org.joda.time.tz.ZoneInfoProvider,<init>,117,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (loader == null && !favorSystemLoader) {
11,org.joda.time.tz.ZoneInfoProvider,<init>,118,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,loader = getClass().getClassLoader();
11,org.joda.time.tz.ZoneInfoProvider,<init>,121,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,iLoader = loader;
11,org.joda.time.tz.ZoneInfoProvider,<init>,123,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));"
11,org.joda.time.tz.ZoneInfoProvider,<init>,124,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
11,org.joda.time.tz.ZoneInfoProvider,getAvailableIDs,174,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return new TreeSet<String>(iZoneInfoMap.keySet());
11,org.joda.time.tz.ZoneInfoProvider,getZone,136,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (id == null) {
11,org.joda.time.tz.ZoneInfoProvider,getZone,140,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,Object obj = iZoneInfoMap.get(id);
11,org.joda.time.tz.ZoneInfoProvider,getZone,141,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (obj == null) {
11,org.joda.time.tz.ZoneInfoProvider,getZone,145,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (id.equals(obj)) {
11,org.joda.time.tz.ZoneInfoProvider,getZone,147,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return loadZoneData(id);
11,org.joda.time.tz.ZoneInfoProvider,getZone,150,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (obj instanceof SoftReference<?>) {
11,org.joda.time.tz.ZoneInfoProvider,getZone,152,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
11,org.joda.time.tz.ZoneInfoProvider,getZone,153,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,DateTimeZone tz = ref.get();
11,org.joda.time.tz.ZoneInfoProvider,getZone,154,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (tz != null) {
11,org.joda.time.tz.ZoneInfoProvider,getZone,155,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return tz;
11,org.joda.time.tz.ZoneInfoProvider,loadZoneData,224,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,InputStream in = null;
11,org.joda.time.tz.ZoneInfoProvider,loadZoneData,226,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,in = openResource(id);
11,org.joda.time.tz.ZoneInfoProvider,loadZoneData,227,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);"
11,org.joda.time.tz.ZoneInfoProvider,loadZoneData,228,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));"
11,org.joda.time.tz.ZoneInfoProvider,loadZoneData,229,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return tz;
11,org.joda.time.tz.ZoneInfoProvider,loadZoneData,236,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (in != null) {
11,org.joda.time.tz.ZoneInfoProvider,loadZoneData,237,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,in.close();
11,org.joda.time.tz.ZoneInfoProvider,loadZoneData,240,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
11,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,252,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"Map<String, Object> map = new ConcurrentHashMap<String, Object>();"
11,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,253,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,DataInputStream din = new DataInputStream(in);
11,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,255,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"readZoneInfoMap(din, map);"
11,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,258,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,din.close();
11,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,260,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
11,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,262,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));"
11,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,263,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return map;
11,org.joda.time.tz.ZoneInfoProvider,openResource,196,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (iFileDir != null) {
11,org.joda.time.tz.ZoneInfoProvider,openResource,197,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"in = new FileInputStream(new File(iFileDir, name));"
11,org.joda.time.tz.ZoneInfoProvider,openResource,199,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,String path = iResourcePath.concat(name);
11,org.joda.time.tz.ZoneInfoProvider,openResource,200,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (iLoader != null) {
11,org.joda.time.tz.ZoneInfoProvider,openResource,201,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,in = iLoader.getResourceAsStream(path);
11,org.joda.time.tz.ZoneInfoProvider,openResource,205,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (in == null) {
11,org.joda.time.tz.ZoneInfoProvider,openResource,214,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return in;
11,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,274,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,int size = din.readUnsignedShort();
11,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,275,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,String[] pool = new String[size];
11,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,276,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,for (int i=0; i<size; i++) {
11,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,277,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,pool[i] = din.readUTF().intern();
11,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,281,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,size = din.readUnsignedShort();
11,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,282,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,for (int i=0; i<size; i++) {
11,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,284,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);"
11,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,287,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
11,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,289,/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
