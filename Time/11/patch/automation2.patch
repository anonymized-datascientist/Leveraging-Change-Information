diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index 0c9fe32f..711de47a 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -32,10 +32,8 @@ import java.util.HashSet;
 import java.util.Locale;
 import java.util.Set;
 import java.util.TimeZone;
-
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
-
 import org.joda.time.tz.DefaultNameProvider;
 import org.joda.time.tz.NameProvider;
 import org.joda.time.tz.Provider;
@@ -48,86 +46,129 @@ import org.joda.time.tz.ZoneInfoProvider;
  * @author Stephen Colebourne
  */
 public class TestDateTimeZone extends TestCase {
+
+public void testForID_String_old() {
+    Map<String, String> map = new LinkedHashMap<String, String>();
+    map.put("GMT", "UTC");
+    map.put("WET", "WET");
+    map.put("CET", "CET");
+    map.put("MET", "CET");
+    map.put("ECT", "CET");
+    map.put("EET", "EET");
+    map.put("MIT", "Pacific/Apia");
+    map.put("HST", "Pacific/Honolulu");
+    map.put("AST", "America/Anchorage");
+    map.put("PST", "America/Los_Angeles");
+    map.put("MST", "America/Denver");
+    map.put("PNT", "America/Phoenix");
+    map.put("CST", "America/Chicago");
+    map.put("EST", "America/New_York");
+    map.put("IET", "America/Indiana/Indianapolis");
+    map.put("PRT", "America/Puerto_Rico");
+    map.put("CNT", "America/St_Johns");
+    map.put("AGT", "America/Argentina/Buenos_Aires");
+    map.put("BET", "America/Sao_Paulo");
+    map.put("ART", "Africa/Cairo");
+    map.put("CAT", "Africa/Harare");
+    map.put("EAT", "Africa/Addis_Ababa");
+    map.put("NET", "Asia/Yerevan");
+    map.put("PLT", "Asia/Karachi");
+    map.put("IST", "Asia/Kolkata");
+    map.put("BST", "Asia/Dhaka");
+    map.put("VST", "Asia/Ho_Chi_Minh");
+    map.put("CTT", "Asia/Shanghai");
+    map.put("JST", "Asia/Tokyo");
+    map.put("ACT", "Australia/Darwin");
+    map.put("AET", "Australia/Sydney");
+    map.put("SST", "Pacific/Guadalcanal");
+    map.put("NST", "Pacific/Auckland");
+    for (String key : map.keySet()) {
+        String value = map.get(key);
+        TimeZone juZone = TimeZone.getTimeZone(key);
+        DateTimeZone zone = DateTimeZone.forTimeZone(juZone);
+        assertEquals(value, zone.getID());
+    // System.out.println(juZone);
+    // System.out.println(juZone.getDisplayName());
+    // System.out.println(zone);
+    // System.out.println("------");
+    }
+}
+
     private static final boolean OLD_JDK;
+
     static {
         String str = System.getProperty("java.version");
         boolean old = true;
-        if (str.length() > 3 &&
-            str.charAt(0) == '1' &&
-            str.charAt(1) == '.' &&
-            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {
+        if (str.length() > 3 && str.charAt(0) == '1' && str.charAt(1) == '.' && (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {
             old = false;
         }
         OLD_JDK = old;
     }
-    
+
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
-
     private static final DateTimeZone PARIS = DateTimeZone.getInstance("Europe/Paris");
+
     private static final DateTimeZone LONDON = DateTimeZone.getInstance("Europe/London");
-    
-    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
-                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
-                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
-                     366 + 365;
-    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
-                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
-                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
-                     366 + 365 + 365;
-    
+
+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365;
+
+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365;
+
     // 2002-06-09
-    private long TEST_TIME_SUMMER =
-            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
-            
+    private long TEST_TIME_SUMMER = (y2002days + 31L + 28L + 31L + 30L + 31L + 9L - 1L) * DateTimeConstants.MILLIS_PER_DAY;
+
     // 2002-01-09
-    private long TEST_TIME_WINTER =
-            (y2002days + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
-            
+    private long TEST_TIME_WINTER = (y2002days + 9L - 1L) * DateTimeConstants.MILLIS_PER_DAY;
+
     // 2002-04-05 Fri
-    private long TEST_TIME1 =
-            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
-            + 12L * DateTimeConstants.MILLIS_PER_HOUR
-            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
-        
+    private long TEST_TIME1 = (y2002days + 31L + 28L + 31L + 5L - 1L) * DateTimeConstants.MILLIS_PER_DAY + 12L * DateTimeConstants.MILLIS_PER_HOUR + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
+
     // 2003-05-06 Tue
-    private long TEST_TIME2 =
-            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
-            + 14L * DateTimeConstants.MILLIS_PER_HOUR
-            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
-    
+    private long TEST_TIME2 = (y2003days + 31L + 28L + 31L + 30L + 6L - 1L) * DateTimeConstants.MILLIS_PER_DAY + 14L * DateTimeConstants.MILLIS_PER_HOUR + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
+
     private static final Policy RESTRICT;
+
     private static final Policy ALLOW;
+
     static {
         // don't call Policy.getPolicy()
         RESTRICT = new Policy() {
+
             public PermissionCollection getPermissions(CodeSource codesource) {
                 Permissions p = new Permissions();
-                p.add(new AllPermission());  // enable everything
+                // enable everything
+                p.add(new AllPermission());
                 return p;
             }
+
             public void refresh() {
             }
+
             public boolean implies(ProtectionDomain domain, Permission permission) {
                 if (permission instanceof JodaTimePermission) {
                     return false;
                 }
                 return true;
-//                return super.implies(domain, permission);
+            // return super.implies(domain, permission);
             }
         };
         ALLOW = new Policy() {
+
             public PermissionCollection getPermissions(CodeSource codesource) {
                 Permissions p = new Permissions();
-                p.add(new AllPermission());  // enable everything
+                // enable everything
+                p.add(new AllPermission());
                 return p;
             }
+
             public void refresh() {
             }
         };
     }
-    
+
     private DateTimeZone zone;
+
     private Locale locale;
 
     public static void main(String[] args) {
@@ -153,19 +194,18 @@ public class TestDateTimeZone extends TestCase {
         DateTimeZone.setDefault(zone);
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testDefault() {
         assertNotNull(DateTimeZone.getDefault());
-        
         DateTimeZone.setDefault(PARIS);
         assertSame(PARIS, DateTimeZone.getDefault());
-        
         try {
             DateTimeZone.setDefault(null);
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (IllegalArgumentException ex) {
+        }
     }
-            
+
     public void testDefaultSecurity() {
         if (OLD_JDK) {
             return;
@@ -176,58 +216,53 @@ public class TestDateTimeZone extends TestCase {
             DateTimeZone.setDefault(PARIS);
             fail();
         } catch (SecurityException ex) {
-            // ok
+        // ok
         } finally {
             System.setSecurityManager(null);
             Policy.setPolicy(ALLOW);
         }
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testGetInstance_String() {
         assertEquals(DateTimeZone.getDefault(), DateTimeZone.getInstance((String) null));
-        
         DateTimeZone zone = DateTimeZone.getInstance("Europe/London");
         assertEquals("Europe/London", zone.getID());
-        
         zone = DateTimeZone.getInstance("UTC");
         assertSame(DateTimeZone.UTC, zone);
-        
         zone = DateTimeZone.getInstance("+00:00");
         assertSame(DateTimeZone.UTC, zone);
-        
         zone = DateTimeZone.getInstance("+00");
         assertSame(DateTimeZone.UTC, zone);
-        
         zone = DateTimeZone.getInstance("+01:23");
         assertEquals("+01:23", zone.getID());
-        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),
-                zone.getOffset(TEST_TIME_SUMMER));
-        
+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER));
         zone = DateTimeZone.getInstance("-02:00");
         assertEquals("-02:00", zone.getID());
-        assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR),
-                zone.getOffset(TEST_TIME_SUMMER));
-        
+        assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));
         try {
             DateTimeZone.getInstance("SST");
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (IllegalArgumentException ex) {
+        }
         try {
             DateTimeZone.getInstance("Europe/UK");
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (IllegalArgumentException ex) {
+        }
         try {
             DateTimeZone.getInstance("+");
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (IllegalArgumentException ex) {
+        }
         try {
             DateTimeZone.getInstance("+0");
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (IllegalArgumentException ex) {
+        }
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testGetInstance_int() {
         assertEquals(DateTimeZone.UTC, DateTimeZone.getInstance(0));
         assertEquals(DateTimeZone.getInstance("+03:00"), DateTimeZone.getInstance(3));
@@ -235,10 +270,11 @@ public class TestDateTimeZone extends TestCase {
         try {
             DateTimeZone.getInstance(999999);
             fail();
-        } catch (IllegalArgumentException ex) {}
-    }        
+        } catch (IllegalArgumentException ex) {
+        }
+    }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testGetInstance_int_int() {
         assertEquals(DateTimeZone.UTC, DateTimeZone.getInstance(0));
         assertEquals(DateTimeZone.getInstance("+03:15"), DateTimeZone.getInstance(3, 15));
@@ -247,89 +283,86 @@ public class TestDateTimeZone extends TestCase {
         try {
             DateTimeZone.getInstance(2, 60);
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (IllegalArgumentException ex) {
+        }
         try {
             DateTimeZone.getInstance(-2, 60);
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (IllegalArgumentException ex) {
+        }
         try {
             DateTimeZone.getInstance(2, -1);
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (IllegalArgumentException ex) {
+        }
         try {
             DateTimeZone.getInstance(-2, -1);
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (IllegalArgumentException ex) {
+        }
         try {
             DateTimeZone.getInstance(999999, 0);
             fail();
-        } catch (IllegalArgumentException ex) {}
-    }        
+        } catch (IllegalArgumentException ex) {
+        }
+    }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testGetInstance_TimeZone() {
         assertEquals(DateTimeZone.getDefault(), DateTimeZone.getInstance((TimeZone) null));
-        
         DateTimeZone zone = DateTimeZone.getInstance(TimeZone.getTimeZone("Europe/London"));
         assertEquals("Europe/London", zone.getID());
         assertSame(DateTimeZone.UTC, DateTimeZone.getInstance(TimeZone.getTimeZone("UTC")));
-        
         zone = DateTimeZone.getInstance(TimeZone.getTimeZone("+00:00"));
         assertSame(DateTimeZone.UTC, zone);
-        
         zone = DateTimeZone.getInstance(TimeZone.getTimeZone("GMT+00:00"));
         assertSame(DateTimeZone.UTC, zone);
-        
         zone = DateTimeZone.getInstance(TimeZone.getTimeZone("GMT+00:00"));
         assertSame(DateTimeZone.UTC, zone);
-        
         zone = DateTimeZone.getInstance(TimeZone.getTimeZone("GMT+00"));
         assertSame(DateTimeZone.UTC, zone);
-        
         zone = DateTimeZone.getInstance(TimeZone.getTimeZone("GMT+01:23"));
         assertEquals("+01:23", zone.getID());
-        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),
-                zone.getOffset(TEST_TIME_SUMMER));
-        
+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE), zone.getOffset(TEST_TIME_SUMMER));
         zone = DateTimeZone.getInstance(TimeZone.getTimeZone("GMT-02:00"));
         assertEquals("-02:00", zone.getID());
         assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));
-        
         zone = DateTimeZone.getInstance(TimeZone.getTimeZone("EST"));
         assertEquals("America/New_York", zone.getID());
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testGetAvailableIDs() {
         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC"));
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testProvider() {
         try {
             assertNotNull(DateTimeZone.getProvider());
-        
             Provider provider = DateTimeZone.getProvider();
             DateTimeZone.setProvider(null);
             assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass());
-        
             try {
                 DateTimeZone.setProvider(new MockNullIDSProvider());
                 fail();
-            } catch (IllegalArgumentException ex) {}
+            } catch (IllegalArgumentException ex) {
+            }
             try {
                 DateTimeZone.setProvider(new MockEmptyIDSProvider());
                 fail();
-            } catch (IllegalArgumentException ex) {}
+            } catch (IllegalArgumentException ex) {
+            }
             try {
                 DateTimeZone.setProvider(new MockNoUTCProvider());
                 fail();
-            } catch (IllegalArgumentException ex) {}
+            } catch (IllegalArgumentException ex) {
+            }
             try {
                 DateTimeZone.setProvider(new MockBadUTCProvider());
                 fail();
-            } catch (IllegalArgumentException ex) {}
-        
+            } catch (IllegalArgumentException ex) {
+            }
             Provider prov = new MockOKProvider();
             DateTimeZone.setProvider(prov);
             assertSame(prov, DateTimeZone.getProvider());
@@ -340,7 +373,6 @@ public class TestDateTimeZone extends TestCase {
             DateTimeZone.setProvider(null);
             assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());
         }
-        
         try {
             System.setProperty("org.joda.time.DateTimeZone.Provider", "org.joda.time.tz.UTCProvider");
             DateTimeZone.setProvider(null);
@@ -350,15 +382,12 @@ public class TestDateTimeZone extends TestCase {
             DateTimeZone.setProvider(null);
             assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());
         }
-        
         PrintStream syserr = System.err;
         try {
             System.setProperty("org.joda.time.DateTimeZone.Provider", "xxx");
             ByteArrayOutputStream baos = new ByteArrayOutputStream();
             System.setErr(new PrintStream(baos));
-            
             DateTimeZone.setProvider(null);
-            
             assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());
             String str = new String(baos.toByteArray());
             assertTrue(str.indexOf("java.lang.ClassNotFoundException") >= 0);
@@ -369,7 +398,7 @@ public class TestDateTimeZone extends TestCase {
             assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());
         }
     }
-    
+
     public void testProviderSecurity() {
         if (OLD_JDK) {
             return;
@@ -380,7 +409,7 @@ public class TestDateTimeZone extends TestCase {
             DateTimeZone.setProvider(new MockOKProvider());
             fail();
         } catch (SecurityException ex) {
-            // ok
+        // ok
         } finally {
             System.setSecurityManager(null);
             Policy.setPolicy(ALLOW);
@@ -388,73 +417,83 @@ public class TestDateTimeZone extends TestCase {
     }
 
     static class MockNullIDSProvider implements Provider {
+
         public Set getAvailableIDs() {
             return null;
         }
+
         public DateTimeZone getZone(String id) {
             return null;
         }
     }
+
     static class MockEmptyIDSProvider implements Provider {
+
         public Set getAvailableIDs() {
             return new HashSet();
         }
+
         public DateTimeZone getZone(String id) {
             return null;
         }
     }
+
     static class MockNoUTCProvider implements Provider {
+
         public Set getAvailableIDs() {
             Set set = new HashSet();
             set.add("Europe/London");
             return set;
         }
+
         public DateTimeZone getZone(String id) {
             return null;
         }
     }
+
     static class MockBadUTCProvider implements Provider {
+
         public Set getAvailableIDs() {
             Set set = new HashSet();
             set.add("UTC");
             set.add("Europe/London");
             return set;
         }
+
         public DateTimeZone getZone(String id) {
             return null;
         }
     }
+
     static class MockOKProvider implements Provider {
+
         public Set getAvailableIDs() {
             Set set = new HashSet();
             set.add("UTC");
             set.add("Europe/London");
             return set;
         }
+
         public DateTimeZone getZone(String id) {
             return DateTimeZone.UTC;
         }
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testNameProvider() {
         try {
             assertNotNull(DateTimeZone.getNameProvider());
-        
             NameProvider provider = DateTimeZone.getNameProvider();
             DateTimeZone.setNameProvider(null);
             assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass());
-        
             provider = new MockOKButNullNameProvider();
             DateTimeZone.setNameProvider(provider);
             assertSame(provider, DateTimeZone.getNameProvider());
-            
             assertEquals("+00:00", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER));
             assertEquals("+00:00", DateTimeZone.UTC.getName(TEST_TIME_SUMMER));
         } finally {
             DateTimeZone.setNameProvider(null);
         }
-        
         try {
             System.setProperty("org.joda.time.DateTimeZone.NameProvider", "org.joda.time.tz.DefaultNameProvider");
             DateTimeZone.setNameProvider(null);
@@ -464,15 +503,12 @@ public class TestDateTimeZone extends TestCase {
             DateTimeZone.setNameProvider(null);
             assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());
         }
-        
         PrintStream syserr = System.err;
         try {
             System.setProperty("org.joda.time.DateTimeZone.NameProvider", "xxx");
             ByteArrayOutputStream baos = new ByteArrayOutputStream();
             System.setErr(new PrintStream(baos));
-            
             DateTimeZone.setNameProvider(null);
-            
             assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());
             String str = new String(baos.toByteArray());
             assertTrue(str.indexOf("java.lang.ClassNotFoundException") >= 0);
@@ -482,8 +518,8 @@ public class TestDateTimeZone extends TestCase {
             DateTimeZone.setNameProvider(null);
             assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());
         }
-    }        
-    
+    }
+
     public void testNameProviderSecurity() {
         if (OLD_JDK) {
             return;
@@ -494,7 +530,7 @@ public class TestDateTimeZone extends TestCase {
             DateTimeZone.setNameProvider(new MockOKButNullNameProvider());
             fail();
         } catch (SecurityException ex) {
-            // ok
+        // ok
         } finally {
             System.setSecurityManager(null);
             Policy.setPolicy(ALLOW);
@@ -502,46 +538,56 @@ public class TestDateTimeZone extends TestCase {
     }
 
     static class MockOKButNullNameProvider implements NameProvider {
+
         public String getShortName(Locale locale, String id, String nameKey) {
             return null;
         }
+
         public String getName(Locale locale, String id, String nameKey) {
             return null;
         }
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testConstructor() {
         assertEquals(1, DateTimeZone.class.getDeclaredConstructors().length);
         assertTrue(Modifier.isProtected(DateTimeZone.class.getDeclaredConstructors()[0].getModifiers()));
         try {
             new DateTimeZone(null) {
+
                 public String getNameKey(long instant) {
                     return null;
                 }
+
                 public int getOffset(long instant) {
                     return 0;
                 }
+
                 public int getStandardOffset(long instant) {
                     return 0;
                 }
+
                 public boolean isFixed() {
                     return false;
                 }
+
                 public long nextTransition(long instant) {
                     return 0;
                 }
+
                 public long previousTransition(long instant) {
                     return 0;
                 }
+
                 public boolean equals(Object object) {
                     return false;
                 }
             };
-        } catch (IllegalArgumentException ex) {}
+        } catch (IllegalArgumentException ex) {
+        }
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testGetID() {
         DateTimeZone zone = DateTimeZone.getInstance("Europe/Paris");
         assertEquals("Europe/Paris", zone.getID());
@@ -559,80 +605,84 @@ public class TestDateTimeZone extends TestCase {
         assertEquals("GMT", zone.getShortName(TEST_TIME_WINTER));
         assertEquals("BST", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));
     }
-            
+
     public void testGetShortNameProviderName() {
         assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, "Europe/London", "BST"));
         assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, "BST"));
         assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, "Europe/London", null));
         assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null));
     }
-    
+
     public void testGetShortNameNullKey() {
         DateTimeZone zone = new MockDateTimeZone("Europe/London");
         assertEquals("Europe/London", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));
     }
-    
+
     public void testGetName() {
         DateTimeZone zone = DateTimeZone.getInstance("Europe/London");
         assertEquals("British Summer Time", zone.getName(TEST_TIME_SUMMER));
         assertEquals("Greenwich Mean Time", zone.getName(TEST_TIME_WINTER));
         assertEquals("British Summer Time", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));
-        
     }
-    
+
     public void testGetNameProviderName() {
         assertEquals(null, DateTimeZone.getNameProvider().getName(null, "Europe/London", "BST"));
         assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, null, "BST"));
         assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, "Europe/London", null));
         assertEquals(null, DateTimeZone.getNameProvider().getName(null, null, null));
     }
-    
+
     public void testGetNameNullKey() {
         DateTimeZone zone = new MockDateTimeZone("Europe/London");
         assertEquals("Europe/London", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));
     }
-    
+
     static class MockDateTimeZone extends DateTimeZone {
+
         public MockDateTimeZone(String id) {
             super(id);
         }
+
         public String getNameKey(long instant) {
-            return null;  // null
+            // null
+            return null;
         }
+
         public int getOffset(long instant) {
             return 0;
         }
+
         public int getStandardOffset(long instant) {
             return 0;
         }
+
         public boolean isFixed() {
             return false;
         }
+
         public long nextTransition(long instant) {
             return 0;
         }
+
         public long previousTransition(long instant) {
             return 0;
         }
+
         public boolean equals(Object object) {
             return false;
         }
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testGetOffset() {
         DateTimeZone zone = DateTimeZone.getInstance("Europe/Paris");
         assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));
-        
         assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));
-        
         assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));
-        
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));
-        
         assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));
     }
@@ -641,27 +691,21 @@ public class TestDateTimeZone extends TestCase {
         DateTimeZone zone = DateTimeZone.getInstance("+01:00");
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));
-        
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));
-        
         assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));
-        
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));
-        
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testGetMillisKeepLocal() {
         long millisLondon = TEST_TIME_SUMMER;
         long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR;
-        
         assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon));
         assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis));
-        
         DateTimeZone zone = DateTimeZone.getDefault();
         try {
             DateTimeZone.setDefault(LONDON);
@@ -671,14 +715,14 @@ public class TestDateTimeZone extends TestCase {
         }
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testIsFixed() {
         DateTimeZone zone = DateTimeZone.getInstance("Europe/Paris");
         assertEquals(false, zone.isFixed());
         assertEquals(true, DateTimeZone.UTC.isFixed());
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testTransitionFixed() {
         DateTimeZone zone = DateTimeZone.getInstance("+01:00");
         assertEquals(TEST_TIME_SUMMER, zone.nextTransition(TEST_TIME_SUMMER));
@@ -687,14 +731,14 @@ public class TestDateTimeZone extends TestCase {
         assertEquals(TEST_TIME_WINTER, zone.previousTransition(TEST_TIME_WINTER));
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testToTimeZone() {
         DateTimeZone zone = DateTimeZone.getInstance("Europe/Paris");
         TimeZone tz = zone.toTimeZone();
         assertEquals("Europe/Paris", tz.getID());
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testEqualsHashCode() {
         DateTimeZone zone1 = DateTimeZone.getInstance("Europe/Paris");
         DateTimeZone zone2 = DateTimeZone.getInstance("Europe/Paris");
@@ -703,7 +747,6 @@ public class TestDateTimeZone extends TestCase {
         assertEquals(true, zone2.equals(zone1));
         assertEquals(true, zone2.equals(zone2));
         assertEquals(true, zone1.hashCode() == zone2.hashCode());
-        
         DateTimeZone zone3 = DateTimeZone.getInstance("Europe/London");
         assertEquals(true, zone3.equals(zone3));
         assertEquals(false, zone1.equals(zone3));
@@ -712,7 +755,6 @@ public class TestDateTimeZone extends TestCase {
         assertEquals(false, zone3.equals(zone2));
         assertEquals(false, zone1.hashCode() == zone3.hashCode());
         assertEquals(true, zone3.hashCode() == zone3.hashCode());
-        
         DateTimeZone zone4 = DateTimeZone.getInstance("+01:00");
         assertEquals(true, zone4.equals(zone4));
         assertEquals(false, zone1.equals(zone4));
@@ -723,7 +765,6 @@ public class TestDateTimeZone extends TestCase {
         assertEquals(false, zone4.equals(zone3));
         assertEquals(false, zone1.hashCode() == zone4.hashCode());
         assertEquals(true, zone4.hashCode() == zone4.hashCode());
-        
         DateTimeZone zone5 = DateTimeZone.getInstance("+02:00");
         assertEquals(true, zone5.equals(zone5));
         assertEquals(false, zone1.equals(zone5));
@@ -738,47 +779,40 @@ public class TestDateTimeZone extends TestCase {
         assertEquals(true, zone5.hashCode() == zone5.hashCode());
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testToString() {
         DateTimeZone zone = DateTimeZone.getInstance("Europe/Paris");
         assertEquals("Europe/Paris", zone.toString());
         assertEquals("UTC", DateTimeZone.UTC.toString());
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testSerialization1() throws Exception {
         DateTimeZone zone = DateTimeZone.getInstance("Europe/Paris");
-        
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         ObjectOutputStream oos = new ObjectOutputStream(baos);
         oos.writeObject(zone);
         byte[] bytes = baos.toByteArray();
         oos.close();
-        
         ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
         ObjectInputStream ois = new ObjectInputStream(bais);
         DateTimeZone result = (DateTimeZone) ois.readObject();
         ois.close();
-        
         assertSame(zone, result);
     }
 
-    //-----------------------------------------------------------------------
+    // -----------------------------------------------------------------------
     public void testSerialization2() throws Exception {
         DateTimeZone zone = DateTimeZone.getInstance("+01:00");
-        
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         ObjectOutputStream oos = new ObjectOutputStream(baos);
         oos.writeObject(zone);
         byte[] bytes = baos.toByteArray();
         oos.close();
-        
         ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
         ObjectInputStream ois = new ObjectInputStream(bais);
         DateTimeZone result = (DateTimeZone) ois.readObject();
         ois.close();
-        
         assertSame(zone, result);
     }
-
 }
