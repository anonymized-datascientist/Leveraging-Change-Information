bug,class,method,line,path,line_source
2,org.joda.time.Chronology,<init>,63,/src/main/java/org/joda/time/Chronology.java,public abstract class Chronology {
2,org.joda.time.DateTime,<init>,516,/src/main/java/org/joda/time/DateTime.java,"super(year, monthOfYear, dayOfMonth,"
2,org.joda.time.DateTime,<init>,518,/src/main/java/org/joda/time/DateTime.java,}
2,org.joda.time.DateTime,toDateTime,527,/src/main/java/org/joda/time/DateTime.java,return this;
2,org.joda.time.DateTimeField,<init>,33,/src/main/java/org/joda/time/DateTimeField.java,public abstract class DateTimeField {
2,org.joda.time.DateTimeFieldType,<clinit>,73,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,76,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,79,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,82,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,85,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,88,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,91,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,94,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,97,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,100,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,103,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,106,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,110,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,113,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,116,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,119,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,122,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,125,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,128,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,131,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,134,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,137,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<clinit>,140,/src/main/java/org/joda/time/DateTimeFieldType.java,private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(
2,org.joda.time.DateTimeFieldType,<init>,153,/src/main/java/org/joda/time/DateTimeFieldType.java,super();
2,org.joda.time.DateTimeFieldType,<init>,154,/src/main/java/org/joda/time/DateTimeFieldType.java,iName = name;
2,org.joda.time.DateTimeFieldType,<init>,155,/src/main/java/org/joda/time/DateTimeFieldType.java,}
2,org.joda.time.DateTimeFieldType,centuryOfEra,354,/src/main/java/org/joda/time/DateTimeFieldType.java,return CENTURY_OF_ERA_TYPE;
2,org.joda.time.DateTimeFieldType,clockhourOfDay,227,/src/main/java/org/joda/time/DateTimeFieldType.java,return CLOCKHOUR_OF_DAY_TYPE;
2,org.joda.time.DateTimeFieldType,clockhourOfHalfday,245,/src/main/java/org/joda/time/DateTimeFieldType.java,return CLOCKHOUR_OF_HALFDAY_TYPE;
2,org.joda.time.DateTimeFieldType,dayOfMonth,273,/src/main/java/org/joda/time/DateTimeFieldType.java,return DAY_OF_MONTH_TYPE;
2,org.joda.time.DateTimeFieldType,dayOfWeek,264,/src/main/java/org/joda/time/DateTimeFieldType.java,return DAY_OF_WEEK_TYPE;
2,org.joda.time.DateTimeFieldType,dayOfYear,282,/src/main/java/org/joda/time/DateTimeFieldType.java,return DAY_OF_YEAR_TYPE;
2,org.joda.time.DateTimeFieldType,era,363,/src/main/java/org/joda/time/DateTimeFieldType.java,return ERA_TYPE;
2,org.joda.time.DateTimeFieldType,halfdayOfDay,254,/src/main/java/org/joda/time/DateTimeFieldType.java,return HALFDAY_OF_DAY_TYPE;
2,org.joda.time.DateTimeFieldType,hourOfDay,218,/src/main/java/org/joda/time/DateTimeFieldType.java,return HOUR_OF_DAY_TYPE;
2,org.joda.time.DateTimeFieldType,hourOfHalfday,236,/src/main/java/org/joda/time/DateTimeFieldType.java,return HOUR_OF_HALFDAY_TYPE;
2,org.joda.time.DateTimeFieldType,millisOfDay,173,/src/main/java/org/joda/time/DateTimeFieldType.java,return MILLIS_OF_DAY_TYPE;
2,org.joda.time.DateTimeFieldType,millisOfSecond,164,/src/main/java/org/joda/time/DateTimeFieldType.java,return MILLIS_OF_SECOND_TYPE;
2,org.joda.time.DateTimeFieldType,minuteOfDay,209,/src/main/java/org/joda/time/DateTimeFieldType.java,return MINUTE_OF_DAY_TYPE;
2,org.joda.time.DateTimeFieldType,minuteOfHour,200,/src/main/java/org/joda/time/DateTimeFieldType.java,return MINUTE_OF_HOUR_TYPE;
2,org.joda.time.DateTimeFieldType,monthOfYear,318,/src/main/java/org/joda/time/DateTimeFieldType.java,return MONTH_OF_YEAR_TYPE;
2,org.joda.time.DateTimeFieldType,secondOfDay,191,/src/main/java/org/joda/time/DateTimeFieldType.java,return SECOND_OF_DAY_TYPE;
2,org.joda.time.DateTimeFieldType,secondOfMinute,182,/src/main/java/org/joda/time/DateTimeFieldType.java,return SECOND_OF_MINUTE_TYPE;
2,org.joda.time.DateTimeFieldType,weekOfWeekyear,291,/src/main/java/org/joda/time/DateTimeFieldType.java,return WEEK_OF_WEEKYEAR_TYPE;
2,org.joda.time.DateTimeFieldType,weekyear,300,/src/main/java/org/joda/time/DateTimeFieldType.java,return WEEKYEAR_TYPE;
2,org.joda.time.DateTimeFieldType,weekyearOfCentury,309,/src/main/java/org/joda/time/DateTimeFieldType.java,return WEEKYEAR_OF_CENTURY_TYPE;
2,org.joda.time.DateTimeFieldType,year,327,/src/main/java/org/joda/time/DateTimeFieldType.java,return YEAR_TYPE;
2,org.joda.time.DateTimeFieldType,yearOfCentury,345,/src/main/java/org/joda/time/DateTimeFieldType.java,return YEAR_OF_CENTURY_TYPE;
2,org.joda.time.DateTimeFieldType,yearOfEra,336,/src/main/java/org/joda/time/DateTimeFieldType.java,return YEAR_OF_ERA_TYPE;
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,<init>,444,/src/main/java/org/joda/time/DateTimeFieldType.java,super(name);
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,<init>,445,/src/main/java/org/joda/time/DateTimeFieldType.java,iOrdinal = ordinal;
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,<init>,446,/src/main/java/org/joda/time/DateTimeFieldType.java,iUnitType = unitType;
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,<init>,447,/src/main/java/org/joda/time/DateTimeFieldType.java,iRangeType = rangeType;
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,<init>,448,/src/main/java/org/joda/time/DateTimeFieldType.java,}
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getDurationType,452,/src/main/java/org/joda/time/DateTimeFieldType.java,return iUnitType;
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,480,/src/main/java/org/joda/time/DateTimeFieldType.java,chronology = DateTimeUtils.getChronology(chronology);
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,482,/src/main/java/org/joda/time/DateTimeFieldType.java,switch (iOrdinal) {
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,492,/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.year();
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,496,/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.monthOfYear();
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,498,/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.dayOfMonth();
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,516,/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.hourOfDay();
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,520,/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.minuteOfHour();
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,524,/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.secondOfMinute();
2,org.joda.time.DateTimeFieldType$StandardDateTimeFieldType,getField,528,/src/main/java/org/joda/time/DateTimeFieldType.java,return chronology.millisOfSecond();
2,org.joda.time.DateTimeUtils,<clinit>,41,/src/main/java/org/joda/time/DateTimeUtils.java,private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
2,org.joda.time.DateTimeUtils,<clinit>,43,/src/main/java/org/joda/time/DateTimeUtils.java,private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;
2,org.joda.time.DateTimeUtils,<clinit>,49,/src/main/java/org/joda/time/DateTimeUtils.java,"Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();"
2,org.joda.time.DateTimeUtils,<clinit>,50,/src/main/java/org/joda/time/DateTimeUtils.java,"map.put(""UT"", DateTimeZone.UTC);"
2,org.joda.time.DateTimeUtils,<clinit>,51,/src/main/java/org/joda/time/DateTimeUtils.java,"map.put(""UTC"", DateTimeZone.UTC);"
2,org.joda.time.DateTimeUtils,<clinit>,52,/src/main/java/org/joda/time/DateTimeUtils.java,"map.put(""GMT"", DateTimeZone.UTC);"
2,org.joda.time.DateTimeUtils,<clinit>,53,/src/main/java/org/joda/time/DateTimeUtils.java,"put(map, ""EST"", ""America/New_York"");"
2,org.joda.time.DateTimeUtils,<clinit>,54,/src/main/java/org/joda/time/DateTimeUtils.java,"put(map, ""EDT"", ""America/New_York"");"
2,org.joda.time.DateTimeUtils,<clinit>,55,/src/main/java/org/joda/time/DateTimeUtils.java,"put(map, ""CST"", ""America/Chicago"");"
2,org.joda.time.DateTimeUtils,<clinit>,56,/src/main/java/org/joda/time/DateTimeUtils.java,"put(map, ""CDT"", ""America/Chicago"");"
2,org.joda.time.DateTimeUtils,<clinit>,57,/src/main/java/org/joda/time/DateTimeUtils.java,"put(map, ""MST"", ""America/Denver"");"
2,org.joda.time.DateTimeUtils,<clinit>,58,/src/main/java/org/joda/time/DateTimeUtils.java,"put(map, ""MDT"", ""America/Denver"");"
2,org.joda.time.DateTimeUtils,<clinit>,59,/src/main/java/org/joda/time/DateTimeUtils.java,"put(map, ""PST"", ""America/Los_Angeles"");"
2,org.joda.time.DateTimeUtils,<clinit>,60,/src/main/java/org/joda/time/DateTimeUtils.java,"put(map, ""PDT"", ""America/Los_Angeles"");"
2,org.joda.time.DateTimeUtils,<clinit>,61,/src/main/java/org/joda/time/DateTimeUtils.java,cZoneNames = Collections.unmodifiableMap(map);
2,org.joda.time.DateTimeUtils,<clinit>,62,/src/main/java/org/joda/time/DateTimeUtils.java,}
2,org.joda.time.DateTimeUtils,checkPermission,161,/src/main/java/org/joda/time/DateTimeUtils.java,SecurityManager sm = System.getSecurityManager();
2,org.joda.time.DateTimeUtils,checkPermission,162,/src/main/java/org/joda/time/DateTimeUtils.java,if (sm != null) {
2,org.joda.time.DateTimeUtils,checkPermission,165,/src/main/java/org/joda/time/DateTimeUtils.java,}
2,org.joda.time.DateTimeUtils,currentTimeMillis,88,/src/main/java/org/joda/time/DateTimeUtils.java,return cMillisProvider.getMillis();
2,org.joda.time.DateTimeUtils,getChronology,284,/src/main/java/org/joda/time/DateTimeUtils.java,if (chrono == null) {
2,org.joda.time.DateTimeUtils,getChronology,285,/src/main/java/org/joda/time/DateTimeUtils.java,return ISOChronology.getInstance();
2,org.joda.time.DateTimeUtils,getChronology,287,/src/main/java/org/joda/time/DateTimeUtils.java,return chrono;
2,org.joda.time.DateTimeUtils,getZone,301,/src/main/java/org/joda/time/DateTimeUtils.java,if (zone == null) {
2,org.joda.time.DateTimeUtils,getZone,304,/src/main/java/org/joda/time/DateTimeUtils.java,return zone;
2,org.joda.time.DateTimeUtils,put,65,/src/main/java/org/joda/time/DateTimeUtils.java,"map.put(name, DateTimeZone.forID(id));"
2,org.joda.time.DateTimeUtils,put,68,/src/main/java/org/joda/time/DateTimeUtils.java,}
2,org.joda.time.DateTimeUtils,put,69,/src/main/java/org/joda/time/DateTimeUtils.java,}
2,org.joda.time.DateTimeUtils,setCurrentMillisFixed,114,/src/main/java/org/joda/time/DateTimeUtils.java,checkPermission();
2,org.joda.time.DateTimeUtils,setCurrentMillisFixed,115,/src/main/java/org/joda/time/DateTimeUtils.java,cMillisProvider = new FixedMillisProvider(fixedMillis);
2,org.joda.time.DateTimeUtils,setCurrentMillisFixed,116,/src/main/java/org/joda/time/DateTimeUtils.java,}
2,org.joda.time.DateTimeUtils,setCurrentMillisSystem,100,/src/main/java/org/joda/time/DateTimeUtils.java,checkPermission();
2,org.joda.time.DateTimeUtils,setCurrentMillisSystem,101,/src/main/java/org/joda/time/DateTimeUtils.java,cMillisProvider = SYSTEM_MILLIS_PROVIDER;
2,org.joda.time.DateTimeUtils,setCurrentMillisSystem,102,/src/main/java/org/joda/time/DateTimeUtils.java,}
2,org.joda.time.DateTimeUtils$FixedMillisProvider,<init>,547,/src/main/java/org/joda/time/DateTimeUtils.java,FixedMillisProvider(long fixedMillis) {
2,org.joda.time.DateTimeUtils$FixedMillisProvider,<init>,548,/src/main/java/org/joda/time/DateTimeUtils.java,iMillis = fixedMillis;
2,org.joda.time.DateTimeUtils$FixedMillisProvider,<init>,549,/src/main/java/org/joda/time/DateTimeUtils.java,}
2,org.joda.time.DateTimeUtils$FixedMillisProvider,getMillis,556,/src/main/java/org/joda/time/DateTimeUtils.java,return iMillis;
2,org.joda.time.DateTimeUtils$SystemMillisProvider,<init>,526,/src/main/java/org/joda/time/DateTimeUtils.java,static class SystemMillisProvider implements MillisProvider {
2,org.joda.time.DateTimeZone,<clinit>,94,/src/main/java/org/joda/time/DateTimeZone.java,"public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);"
2,org.joda.time.DateTimeZone,<clinit>,116,/src/main/java/org/joda/time/DateTimeZone.java,setProvider0(null);
2,org.joda.time.DateTimeZone,<clinit>,117,/src/main/java/org/joda/time/DateTimeZone.java,setNameProvider0(null);
2,org.joda.time.DateTimeZone,<clinit>,118,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,<init>,714,/src/main/java/org/joda/time/DateTimeZone.java,protected DateTimeZone(String id) {
2,org.joda.time.DateTimeZone,<init>,715,/src/main/java/org/joda/time/DateTimeZone.java,if (id == null) {
2,org.joda.time.DateTimeZone,<init>,718,/src/main/java/org/joda/time/DateTimeZone.java,iID = id;
2,org.joda.time.DateTimeZone,<init>,719,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,convertLocalToUTC,999,/src/main/java/org/joda/time/DateTimeZone.java,int offsetLocal = getOffset(instantLocal);
2,org.joda.time.DateTimeZone,convertLocalToUTC,1001,/src/main/java/org/joda/time/DateTimeZone.java,int offset = getOffset(instantLocal - offsetLocal);
2,org.joda.time.DateTimeZone,convertLocalToUTC,1003,/src/main/java/org/joda/time/DateTimeZone.java,if (offsetLocal != offset) {
2,org.joda.time.DateTimeZone,convertLocalToUTC,1032,/src/main/java/org/joda/time/DateTimeZone.java,long instantUTC = instantLocal - offset;
2,org.joda.time.DateTimeZone,convertLocalToUTC,1034,/src/main/java/org/joda/time/DateTimeZone.java,if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
2,org.joda.time.DateTimeZone,convertLocalToUTC,1037,/src/main/java/org/joda/time/DateTimeZone.java,return instantUTC;
2,org.joda.time.DateTimeZone,convertLocalToUTC,976,/src/main/java/org/joda/time/DateTimeZone.java,int offsetOriginal = getOffset(originalInstantUTC);
2,org.joda.time.DateTimeZone,convertLocalToUTC,977,/src/main/java/org/joda/time/DateTimeZone.java,long instantUTC = instantLocal - offsetOriginal;
2,org.joda.time.DateTimeZone,convertLocalToUTC,978,/src/main/java/org/joda/time/DateTimeZone.java,int offsetLocalFromOriginal = getOffset(instantUTC);
2,org.joda.time.DateTimeZone,convertLocalToUTC,979,/src/main/java/org/joda/time/DateTimeZone.java,if (offsetLocalFromOriginal == offsetOriginal) {
2,org.joda.time.DateTimeZone,convertLocalToUTC,980,/src/main/java/org/joda/time/DateTimeZone.java,return instantUTC;
2,org.joda.time.DateTimeZone,convertLocalToUTC,982,/src/main/java/org/joda/time/DateTimeZone.java,"return convertLocalToUTC(instantLocal, strict);"
2,org.joda.time.DateTimeZone,convertUTCToLocal,949,/src/main/java/org/joda/time/DateTimeZone.java,int offset = getOffset(instantUTC);
2,org.joda.time.DateTimeZone,convertUTCToLocal,950,/src/main/java/org/joda/time/DateTimeZone.java,long instantLocal = instantUTC + offset;
2,org.joda.time.DateTimeZone,convertUTCToLocal,952,/src/main/java/org/joda/time/DateTimeZone.java,if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
2,org.joda.time.DateTimeZone,convertUTCToLocal,955,/src/main/java/org/joda/time/DateTimeZone.java,return instantLocal;
2,org.joda.time.DateTimeZone,forID,205,/src/main/java/org/joda/time/DateTimeZone.java,if (id == null) {
2,org.joda.time.DateTimeZone,forID,208,/src/main/java/org/joda/time/DateTimeZone.java,"if (id.equals(""UTC"")) {"
2,org.joda.time.DateTimeZone,forID,211,/src/main/java/org/joda/time/DateTimeZone.java,DateTimeZone zone = cProvider.getZone(id);
2,org.joda.time.DateTimeZone,forID,212,/src/main/java/org/joda/time/DateTimeZone.java,if (zone != null) {
2,org.joda.time.DateTimeZone,forID,213,/src/main/java/org/joda/time/DateTimeZone.java,return zone;
2,org.joda.time.DateTimeZone,getDefault,134,/src/main/java/org/joda/time/DateTimeZone.java,DateTimeZone zone = cDefault;
2,org.joda.time.DateTimeZone,getDefault,135,/src/main/java/org/joda/time/DateTimeZone.java,if (zone == null) {
2,org.joda.time.DateTimeZone,getDefault,136,/src/main/java/org/joda/time/DateTimeZone.java,synchronized(DateTimeZone.class) {
2,org.joda.time.DateTimeZone,getDefault,137,/src/main/java/org/joda/time/DateTimeZone.java,zone = cDefault;
2,org.joda.time.DateTimeZone,getDefault,138,/src/main/java/org/joda/time/DateTimeZone.java,if (zone == null) {
2,org.joda.time.DateTimeZone,getDefault,139,/src/main/java/org/joda/time/DateTimeZone.java,DateTimeZone temp = null;
2,org.joda.time.DateTimeZone,getDefault,142,/src/main/java/org/joda/time/DateTimeZone.java,"String id = System.getProperty(""user.timezone"");"
2,org.joda.time.DateTimeZone,getDefault,143,/src/main/java/org/joda/time/DateTimeZone.java,if (id != null) {  // null check avoids stack overflow
2,org.joda.time.DateTimeZone,getDefault,144,/src/main/java/org/joda/time/DateTimeZone.java,temp = forID(id);
2,org.joda.time.DateTimeZone,getDefault,148,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,getDefault,149,/src/main/java/org/joda/time/DateTimeZone.java,if (temp == null) {
2,org.joda.time.DateTimeZone,getDefault,154,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,getDefault,155,/src/main/java/org/joda/time/DateTimeZone.java,if (temp == null) {
2,org.joda.time.DateTimeZone,getDefault,158,/src/main/java/org/joda/time/DateTimeZone.java,cDefault = zone = temp;
2,org.joda.time.DateTimeZone,getDefault,160,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,getDefault,162,/src/main/java/org/joda/time/DateTimeZone.java,return zone;
2,org.joda.time.DateTimeZone,getDefaultNameProvider,554,/src/main/java/org/joda/time/DateTimeZone.java,NameProvider nameProvider = null;
2,org.joda.time.DateTimeZone,getDefaultNameProvider,556,/src/main/java/org/joda/time/DateTimeZone.java,"String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");"
2,org.joda.time.DateTimeZone,getDefaultNameProvider,557,/src/main/java/org/joda/time/DateTimeZone.java,if (providerClass != null) {
2,org.joda.time.DateTimeZone,getDefaultNameProvider,566,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,getDefaultNameProvider,568,/src/main/java/org/joda/time/DateTimeZone.java,if (nameProvider == null) {
2,org.joda.time.DateTimeZone,getDefaultNameProvider,569,/src/main/java/org/joda/time/DateTimeZone.java,nameProvider = new DefaultNameProvider();
2,org.joda.time.DateTimeZone,getDefaultNameProvider,572,/src/main/java/org/joda/time/DateTimeZone.java,return nameProvider;
2,org.joda.time.DateTimeZone,getDefaultProvider,471,/src/main/java/org/joda/time/DateTimeZone.java,Provider provider = null;
2,org.joda.time.DateTimeZone,getDefaultProvider,474,/src/main/java/org/joda/time/DateTimeZone.java,"String providerClass = System.getProperty(""org.joda.time.DateTimeZone.Provider"");"
2,org.joda.time.DateTimeZone,getDefaultProvider,475,/src/main/java/org/joda/time/DateTimeZone.java,if (providerClass != null) {
2,org.joda.time.DateTimeZone,getDefaultProvider,484,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,getDefaultProvider,486,/src/main/java/org/joda/time/DateTimeZone.java,if (provider == null) {
2,org.joda.time.DateTimeZone,getDefaultProvider,488,/src/main/java/org/joda/time/DateTimeZone.java,"provider = new ZoneInfoProvider(""org/joda/time/tz/data"");"
2,org.joda.time.DateTimeZone,getDefaultProvider,491,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,getDefaultProvider,494,/src/main/java/org/joda/time/DateTimeZone.java,if (provider == null) {
2,org.joda.time.DateTimeZone,getDefaultProvider,498,/src/main/java/org/joda/time/DateTimeZone.java,return provider;
2,org.joda.time.DateTimeZone,getID,731,/src/main/java/org/joda/time/DateTimeZone.java,return iID;
2,org.joda.time.DateTimeZone,getMillisKeepLocal,1051,/src/main/java/org/joda/time/DateTimeZone.java,if (newZone == null) {
2,org.joda.time.DateTimeZone,getMillisKeepLocal,1054,/src/main/java/org/joda/time/DateTimeZone.java,if (newZone == this) {
2,org.joda.time.DateTimeZone,getMillisKeepLocal,1055,/src/main/java/org/joda/time/DateTimeZone.java,return oldInstant;
2,org.joda.time.DateTimeZone,hashCode,1273,/src/main/java/org/joda/time/DateTimeZone.java,return 57 + getID().hashCode();
2,org.joda.time.DateTimeZone,setDefault,175,/src/main/java/org/joda/time/DateTimeZone.java,SecurityManager sm = System.getSecurityManager();
2,org.joda.time.DateTimeZone,setDefault,176,/src/main/java/org/joda/time/DateTimeZone.java,if (sm != null) {
2,org.joda.time.DateTimeZone,setDefault,179,/src/main/java/org/joda/time/DateTimeZone.java,if (zone == null) {
2,org.joda.time.DateTimeZone,setDefault,182,/src/main/java/org/joda/time/DateTimeZone.java,synchronized(DateTimeZone.class) {
2,org.joda.time.DateTimeZone,setDefault,183,/src/main/java/org/joda/time/DateTimeZone.java,cDefault = zone;
2,org.joda.time.DateTimeZone,setDefault,184,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,setDefault,185,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,setNameProvider0,539,/src/main/java/org/joda/time/DateTimeZone.java,if (nameProvider == null) {
2,org.joda.time.DateTimeZone,setNameProvider0,540,/src/main/java/org/joda/time/DateTimeZone.java,nameProvider = getDefaultNameProvider();
2,org.joda.time.DateTimeZone,setNameProvider0,542,/src/main/java/org/joda/time/DateTimeZone.java,cNameProvider = nameProvider;
2,org.joda.time.DateTimeZone,setNameProvider0,543,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DateTimeZone,setProvider0,443,/src/main/java/org/joda/time/DateTimeZone.java,if (provider == null) {
2,org.joda.time.DateTimeZone,setProvider0,444,/src/main/java/org/joda/time/DateTimeZone.java,provider = getDefaultProvider();
2,org.joda.time.DateTimeZone,setProvider0,446,/src/main/java/org/joda/time/DateTimeZone.java,Set<String> ids = provider.getAvailableIDs();
2,org.joda.time.DateTimeZone,setProvider0,447,/src/main/java/org/joda/time/DateTimeZone.java,if (ids == null || ids.size() == 0) {
2,org.joda.time.DateTimeZone,setProvider0,451,/src/main/java/org/joda/time/DateTimeZone.java,"if (!ids.contains(""UTC"")) {"
2,org.joda.time.DateTimeZone,setProvider0,454,/src/main/java/org/joda/time/DateTimeZone.java,"if (!UTC.equals(provider.getZone(""UTC""))) {"
2,org.joda.time.DateTimeZone,setProvider0,457,/src/main/java/org/joda/time/DateTimeZone.java,cProvider = provider;
2,org.joda.time.DateTimeZone,setProvider0,458,/src/main/java/org/joda/time/DateTimeZone.java,cAvailableIDs = ids;
2,org.joda.time.DateTimeZone,setProvider0,459,/src/main/java/org/joda/time/DateTimeZone.java,}
2,org.joda.time.DurationField,<init>,30,/src/main/java/org/joda/time/DurationField.java,public abstract class DurationField implements Comparable<DurationField> {
2,org.joda.time.DurationFieldType,<clinit>,60,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);"
2,org.joda.time.DurationFieldType,<clinit>,62,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);"
2,org.joda.time.DurationFieldType,<clinit>,64,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);"
2,org.joda.time.DurationFieldType,<clinit>,66,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);"
2,org.joda.time.DurationFieldType,<clinit>,68,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);"
2,org.joda.time.DurationFieldType,<clinit>,70,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);"
2,org.joda.time.DurationFieldType,<clinit>,72,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);"
2,org.joda.time.DurationFieldType,<clinit>,74,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);"
2,org.joda.time.DurationFieldType,<clinit>,76,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);"
2,org.joda.time.DurationFieldType,<clinit>,78,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);"
2,org.joda.time.DurationFieldType,<clinit>,80,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);"
2,org.joda.time.DurationFieldType,<clinit>,82,/src/main/java/org/joda/time/DurationFieldType.java,"static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);"
2,org.joda.time.DurationFieldType,<init>,94,/src/main/java/org/joda/time/DurationFieldType.java,super();
2,org.joda.time.DurationFieldType,<init>,95,/src/main/java/org/joda/time/DurationFieldType.java,iName = name;
2,org.joda.time.DurationFieldType,<init>,96,/src/main/java/org/joda/time/DurationFieldType.java,}
2,org.joda.time.DurationFieldType,centuries,196,/src/main/java/org/joda/time/DurationFieldType.java,return CENTURIES_TYPE;
2,org.joda.time.DurationFieldType,days,151,/src/main/java/org/joda/time/DurationFieldType.java,return DAYS_TYPE;
2,org.joda.time.DurationFieldType,eras,205,/src/main/java/org/joda/time/DurationFieldType.java,return ERAS_TYPE;
2,org.joda.time.DurationFieldType,halfdays,141,/src/main/java/org/joda/time/DurationFieldType.java,return HALFDAYS_TYPE;
2,org.joda.time.DurationFieldType,hours,132,/src/main/java/org/joda/time/DurationFieldType.java,return HOURS_TYPE;
2,org.joda.time.DurationFieldType,millis,105,/src/main/java/org/joda/time/DurationFieldType.java,return MILLIS_TYPE;
2,org.joda.time.DurationFieldType,minutes,123,/src/main/java/org/joda/time/DurationFieldType.java,return MINUTES_TYPE;
2,org.joda.time.DurationFieldType,months,178,/src/main/java/org/joda/time/DurationFieldType.java,return MONTHS_TYPE;
2,org.joda.time.DurationFieldType,seconds,114,/src/main/java/org/joda/time/DurationFieldType.java,return SECONDS_TYPE;
2,org.joda.time.DurationFieldType,weeks,160,/src/main/java/org/joda/time/DurationFieldType.java,return WEEKS_TYPE;
2,org.joda.time.DurationFieldType,weekyears,169,/src/main/java/org/joda/time/DurationFieldType.java,return WEEKYEARS_TYPE;
2,org.joda.time.DurationFieldType,years,187,/src/main/java/org/joda/time/DurationFieldType.java,return YEARS_TYPE;
2,org.joda.time.DurationFieldType$StandardDurationFieldType,<init>,259,/src/main/java/org/joda/time/DurationFieldType.java,super(name);
2,org.joda.time.DurationFieldType$StandardDurationFieldType,<init>,260,/src/main/java/org/joda/time/DurationFieldType.java,iOrdinal = ordinal;
2,org.joda.time.DurationFieldType$StandardDurationFieldType,<init>,261,/src/main/java/org/joda/time/DurationFieldType.java,}
2,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,282,/src/main/java/org/joda/time/DurationFieldType.java,chronology = DateTimeUtils.getChronology(chronology);
2,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,284,/src/main/java/org/joda/time/DurationFieldType.java,switch (iOrdinal) {
2,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,302,/src/main/java/org/joda/time/DurationFieldType.java,return chronology.hours();
2,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,304,/src/main/java/org/joda/time/DurationFieldType.java,return chronology.minutes();
2,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,306,/src/main/java/org/joda/time/DurationFieldType.java,return chronology.seconds();
2,org.joda.time.DurationFieldType$StandardDurationFieldType,getField,308,/src/main/java/org/joda/time/DurationFieldType.java,return chronology.millis();
2,org.joda.time.DurationFieldType$StandardDurationFieldType,hashCode,278,/src/main/java/org/joda/time/DurationFieldType.java,return (1 << iOrdinal);
2,org.joda.time.Instant,<init>,118,/src/main/java/org/joda/time/Instant.java,super();
2,org.joda.time.Instant,<init>,119,/src/main/java/org/joda/time/Instant.java,iMillis = instant;
2,org.joda.time.Instant,<init>,120,/src/main/java/org/joda/time/Instant.java,}
2,org.joda.time.Instant,getMillis,256,/src/main/java/org/joda/time/Instant.java,return iMillis;
2,org.joda.time.Instant,toInstant,144,/src/main/java/org/joda/time/Instant.java,return this;
2,org.joda.time.LocalDate,<clinit>,96,/src/main/java/org/joda/time/LocalDate.java,private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();
2,org.joda.time.LocalDate,<clinit>,98,/src/main/java/org/joda/time/LocalDate.java,DATE_DURATION_TYPES.add(DurationFieldType.days());
2,org.joda.time.LocalDate,<clinit>,99,/src/main/java/org/joda/time/LocalDate.java,DATE_DURATION_TYPES.add(DurationFieldType.weeks());
2,org.joda.time.LocalDate,<clinit>,100,/src/main/java/org/joda/time/LocalDate.java,DATE_DURATION_TYPES.add(DurationFieldType.months());
2,org.joda.time.LocalDate,<clinit>,101,/src/main/java/org/joda/time/LocalDate.java,DATE_DURATION_TYPES.add(DurationFieldType.weekyears());
2,org.joda.time.LocalDate,<clinit>,102,/src/main/java/org/joda/time/LocalDate.java,DATE_DURATION_TYPES.add(DurationFieldType.years());
2,org.joda.time.LocalDate,<clinit>,103,/src/main/java/org/joda/time/LocalDate.java,DATE_DURATION_TYPES.add(DurationFieldType.centuries());
2,org.joda.time.LocalDate,<clinit>,105,/src/main/java/org/joda/time/LocalDate.java,DATE_DURATION_TYPES.add(DurationFieldType.eras());
2,org.joda.time.LocalDate,<clinit>,106,/src/main/java/org/joda/time/LocalDate.java,}
2,org.joda.time.LocalDate,<init>,335,/src/main/java/org/joda/time/LocalDate.java,"public LocalDate(long instant, Chronology chronology) {"
2,org.joda.time.LocalDate,<init>,336,/src/main/java/org/joda/time/LocalDate.java,chronology = DateTimeUtils.getChronology(chronology);
2,org.joda.time.LocalDate,<init>,338,/src/main/java/org/joda/time/LocalDate.java,"long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);"
2,org.joda.time.LocalDate,<init>,339,/src/main/java/org/joda/time/LocalDate.java,chronology = chronology.withUTC();
2,org.joda.time.LocalDate,<init>,340,/src/main/java/org/joda/time/LocalDate.java,iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);
2,org.joda.time.LocalDate,<init>,341,/src/main/java/org/joda/time/LocalDate.java,iChronology = chronology;
2,org.joda.time.LocalDate,<init>,342,/src/main/java/org/joda/time/LocalDate.java,}
2,org.joda.time.LocalDate,getChronology,619,/src/main/java/org/joda/time/LocalDate.java,return iChronology;
2,org.joda.time.LocalDate,getLocalMillis,610,/src/main/java/org/joda/time/LocalDate.java,return iLocalMillis;
2,org.joda.time.LocalDate,getYear,1462,/src/main/java/org/joda/time/LocalDate.java,return getChronology().year().get(getLocalMillis());
2,org.joda.time.Partial,<init>,296,/src/main/java/org/joda/time/Partial.java,*/
2,org.joda.time.Partial,<init>,297,/src/main/java/org/joda/time/Partial.java,"Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) {"
2,org.joda.time.Partial,<init>,298,/src/main/java/org/joda/time/Partial.java,super();
2,org.joda.time.Partial,<init>,299,/src/main/java/org/joda/time/Partial.java,iChronology = chronology;
2,org.joda.time.Partial,<init>,300,/src/main/java/org/joda/time/Partial.java,iTypes = types;
2,org.joda.time.Partial,<init>,190,/src/main/java/org/joda/time/Partial.java,super();
2,org.joda.time.Partial,<init>,191,/src/main/java/org/joda/time/Partial.java,chronology = DateTimeUtils.getChronology(chronology).withUTC();
2,org.joda.time.Partial,<init>,192,/src/main/java/org/joda/time/Partial.java,iChronology = chronology;
2,org.joda.time.Partial,<init>,193,/src/main/java/org/joda/time/Partial.java,if (types == null) {
2,org.joda.time.Partial,<init>,196,/src/main/java/org/joda/time/Partial.java,if (values == null) {
2,org.joda.time.Partial,<init>,199,/src/main/java/org/joda/time/Partial.java,if (values.length != types.length) {
2,org.joda.time.Partial,<init>,202,/src/main/java/org/joda/time/Partial.java,if (types.length == 0) {
2,org.joda.time.Partial,<init>,207,/src/main/java/org/joda/time/Partial.java,for (int i = 0; i < types.length; i++) {
2,org.joda.time.Partial,<init>,208,/src/main/java/org/joda/time/Partial.java,if (types[i] == null) {
2,org.joda.time.Partial,<init>,212,/src/main/java/org/joda/time/Partial.java,DurationField lastUnitField = null;
2,org.joda.time.Partial,<init>,213,/src/main/java/org/joda/time/Partial.java,for (int i = 0; i < types.length; i++) {
2,org.joda.time.Partial,<init>,214,/src/main/java/org/joda/time/Partial.java,DateTimeFieldType loopType = types[i];
2,org.joda.time.Partial,<init>,215,/src/main/java/org/joda/time/Partial.java,DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
2,org.joda.time.Partial,<init>,216,/src/main/java/org/joda/time/Partial.java,if (i > 0) {
2,org.joda.time.Partial,<init>,217,/src/main/java/org/joda/time/Partial.java,int compare = lastUnitField.compareTo(loopUnitField);
2,org.joda.time.Partial,<init>,218,/src/main/java/org/joda/time/Partial.java,if (compare < 0) {
2,org.joda.time.Partial,<init>,221,/src/main/java/org/joda/time/Partial.java,} else if (compare == 0) {
2,org.joda.time.Partial,<init>,243,/src/main/java/org/joda/time/Partial.java,}
2,org.joda.time.Partial,<init>,246,/src/main/java/org/joda/time/Partial.java,}
2,org.joda.time.Partial,<init>,247,/src/main/java/org/joda/time/Partial.java,
2,org.joda.time.Partial,<init>,248,/src/main/java/org/joda/time/Partial.java,iTypes = (DateTimeFieldType[]) types.clone();
2,org.joda.time.Partial,<init>,249,/src/main/java/org/joda/time/Partial.java,"chronology.validate(this, values);"
2,org.joda.time.Partial,getChronology,321,/src/main/java/org/joda/time/Partial.java,*/
2,org.joda.time.Partial,getField,333,/src/main/java/org/joda/time/Partial.java,*/
2,org.joda.time.Partial,getFieldType,344,/src/main/java/org/joda/time/Partial.java,*/
2,org.joda.time.Partial,getValue,368,/src/main/java/org/joda/time/Partial.java,*/
2,org.joda.time.Partial,size,309,/src/main/java/org/joda/time/Partial.java,*/
2,org.joda.time.Partial,without,485,/src/main/java/org/joda/time/Partial.java,*
2,org.joda.time.Partial,without,486,/src/main/java/org/joda/time/Partial.java,"* @param fieldType  the field type to remove, may be null"
2,org.joda.time.Partial,without,487,/src/main/java/org/joda/time/Partial.java,* @return a copy of this instance with the field removed
2,org.joda.time.Partial,without,488,/src/main/java/org/joda/time/Partial.java,*/
2,org.joda.time.Partial,without,489,/src/main/java/org/joda/time/Partial.java,public Partial without(DateTimeFieldType fieldType) {
2,org.joda.time.Partial,without,490,/src/main/java/org/joda/time/Partial.java,int index = indexOf(fieldType);
2,org.joda.time.Partial,without,491,/src/main/java/org/joda/time/Partial.java,if (index != -1) {
2,org.joda.time.Partial,without,492,/src/main/java/org/joda/time/Partial.java,DateTimeFieldType[] newTypes = new DateTimeFieldType[size() - 1];
2,org.joda.time.Partial,without,493,/src/main/java/org/joda/time/Partial.java,int[] newValues = new int[size() - 1];
2,org.joda.time.Partial,without,494,/src/main/java/org/joda/time/Partial.java,"System.arraycopy(iTypes, 0, newTypes, 0, index);"
2,org.joda.time.Partial,without,495,/src/main/java/org/joda/time/Partial.java,"System.arraycopy(iTypes, index + 1, newTypes, index, newTypes.length - index);"
2,org.joda.time.TimeOfDay,<clinit>,75,/src/main/java/org/joda/time/TimeOfDay.java,private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
2,org.joda.time.TimeOfDay,<clinit>,83,/src/main/java/org/joda/time/TimeOfDay.java,"public static final TimeOfDay MIDNIGHT = new TimeOfDay(0, 0, 0, 0);"
2,org.joda.time.TimeOfDay,<init>,381,/src/main/java/org/joda/time/TimeOfDay.java,"this(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, null);"
2,org.joda.time.TimeOfDay,<init>,382,/src/main/java/org/joda/time/TimeOfDay.java,}
2,org.joda.time.TimeOfDay,<init>,399,/src/main/java/org/joda/time/TimeOfDay.java,"super(new int[] {hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond}, chronology);"
2,org.joda.time.TimeOfDay,<init>,400,/src/main/java/org/joda/time/TimeOfDay.java,}
2,org.joda.time.TimeOfDay,getField,442,/src/main/java/org/joda/time/TimeOfDay.java,switch (index) {
2,org.joda.time.TimeOfDay,getField,444,/src/main/java/org/joda/time/TimeOfDay.java,return chrono.hourOfDay();
2,org.joda.time.TimeOfDay,getField,446,/src/main/java/org/joda/time/TimeOfDay.java,return chrono.minuteOfHour();
2,org.joda.time.TimeOfDay,getField,448,/src/main/java/org/joda/time/TimeOfDay.java,return chrono.secondOfMinute();
2,org.joda.time.TimeOfDay,getField,450,/src/main/java/org/joda/time/TimeOfDay.java,return chrono.millisOfSecond();
2,org.joda.time.TimeOfDay,getFieldType,464,/src/main/java/org/joda/time/TimeOfDay.java,return FIELD_TYPES[index];
2,org.joda.time.TimeOfDay,size,429,/src/main/java/org/joda/time/TimeOfDay.java,return 4;
2,org.joda.time.YearMonthDay,<clinit>,72,/src/main/java/org/joda/time/YearMonthDay.java,private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] {
2,org.joda.time.YearMonthDay,<init>,153,/src/main/java/org/joda/time/YearMonthDay.java,super();
2,org.joda.time.YearMonthDay,<init>,154,/src/main/java/org/joda/time/YearMonthDay.java,}
2,org.joda.time.YearMonthDay,getFieldType,351,/src/main/java/org/joda/time/YearMonthDay.java,return FIELD_TYPES[index];
2,org.joda.time.YearMonthDay,size,318,/src/main/java/org/joda/time/YearMonthDay.java,return 3;
2,org.joda.time.base.AbstractDateTime,<init>,51,/src/main/java/org/joda/time/base/AbstractDateTime.java,super();
2,org.joda.time.base.AbstractDateTime,<init>,52,/src/main/java/org/joda/time/base/AbstractDateTime.java,}
2,org.joda.time.base.AbstractInstant,<init>,61,/src/main/java/org/joda/time/base/AbstractInstant.java,super();
2,org.joda.time.base.AbstractInstant,<init>,62,/src/main/java/org/joda/time/base/AbstractInstant.java,}
2,org.joda.time.base.AbstractInstant,equals,259,/src/main/java/org/joda/time/base/AbstractInstant.java,if (this == readableInstant) {
2,org.joda.time.base.AbstractInstant,equals,260,/src/main/java/org/joda/time/base/AbstractInstant.java,return true;
2,org.joda.time.base.AbstractPartial,<init>,54,/src/main/java/org/joda/time/base/AbstractPartial.java,super();
2,org.joda.time.base.AbstractPartial,<init>,55,/src/main/java/org/joda/time/base/AbstractPartial.java,}
2,org.joda.time.base.AbstractPartial,compareTo,311,/src/main/java/org/joda/time/base/AbstractPartial.java,if (this == other) {
2,org.joda.time.base.AbstractPartial,compareTo,312,/src/main/java/org/joda/time/base/AbstractPartial.java,return 0;
2,org.joda.time.base.AbstractPartial,compareTo,314,/src/main/java/org/joda/time/base/AbstractPartial.java,if (size() != other.size()) {
2,org.joda.time.base.AbstractPartial,compareTo,315,/src/main/java/org/joda/time/base/AbstractPartial.java,"throw new ClassCastException(""ReadablePartial objects must have matching field types"");"
2,org.joda.time.base.AbstractPartial,compareTo,317,/src/main/java/org/joda/time/base/AbstractPartial.java,"for (int i = 0, isize = size(); i < isize; i++) {"
2,org.joda.time.base.AbstractPartial,compareTo,318,/src/main/java/org/joda/time/base/AbstractPartial.java,if (getFieldType(i) != other.getFieldType(i)) {
2,org.joda.time.base.AbstractPartial,compareTo,319,/src/main/java/org/joda/time/base/AbstractPartial.java,"throw new ClassCastException(""ReadablePartial objects must have matching field types"");"
2,org.joda.time.base.AbstractPartial,compareTo,323,/src/main/java/org/joda/time/base/AbstractPartial.java,"for (int i = 0, isize = size(); i < isize; i++) {"
2,org.joda.time.base.AbstractPartial,compareTo,324,/src/main/java/org/joda/time/base/AbstractPartial.java,if (getValue(i) > other.getValue(i)) {
2,org.joda.time.base.AbstractPartial,compareTo,325,/src/main/java/org/joda/time/base/AbstractPartial.java,return 1;
2,org.joda.time.base.AbstractPartial,compareTo,327,/src/main/java/org/joda/time/base/AbstractPartial.java,if (getValue(i) < other.getValue(i)) {
2,org.joda.time.base.AbstractPartial,compareTo,328,/src/main/java/org/joda/time/base/AbstractPartial.java,return -1;
2,org.joda.time.base.AbstractPartial,compareTo,331,/src/main/java/org/joda/time/base/AbstractPartial.java,return 0;
2,org.joda.time.base.AbstractPartial,getField,105,/src/main/java/org/joda/time/base/AbstractPartial.java,"return getField(index, getChronology());"
2,org.joda.time.base.AbstractPartial,indexOf,170,/src/main/java/org/joda/time/base/AbstractPartial.java,"for (int i = 0, isize = size(); i < isize; i++) {"
2,org.joda.time.base.AbstractPartial,indexOf,171,/src/main/java/org/joda/time/base/AbstractPartial.java,if (getFieldType(i) == type) {
2,org.joda.time.base.AbstractPartial,indexOf,172,/src/main/java/org/joda/time/base/AbstractPartial.java,return i;
2,org.joda.time.base.BaseDateTime,<init>,252,/src/main/java/org/joda/time/base/BaseDateTime.java,super();
2,org.joda.time.base.BaseDateTime,<init>,253,/src/main/java/org/joda/time/base/BaseDateTime.java,iChronology = checkChronology(chronology);
2,org.joda.time.base.BaseDateTime,<init>,254,/src/main/java/org/joda/time/base/BaseDateTime.java,"long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
2,org.joda.time.base.BaseDateTime,<init>,256,/src/main/java/org/joda/time/base/BaseDateTime.java,"iMillis = checkInstant(instant, iChronology);"
2,org.joda.time.base.BaseDateTime,<init>,257,/src/main/java/org/joda/time/base/BaseDateTime.java,}
2,org.joda.time.base.BaseDateTime,checkChronology,270,/src/main/java/org/joda/time/base/BaseDateTime.java,return DateTimeUtils.getChronology(chronology);
2,org.joda.time.base.BaseDateTime,checkInstant,284,/src/main/java/org/joda/time/base/BaseDateTime.java,return instant;
2,org.joda.time.base.BaseLocal,<init>,48,/src/main/java/org/joda/time/base/BaseLocal.java,super();
2,org.joda.time.base.BaseLocal,<init>,49,/src/main/java/org/joda/time/base/BaseLocal.java,}
2,org.joda.time.base.BasePartial,<init>,65,/src/main/java/org/joda/time/base/BasePartial.java,"this(DateTimeUtils.currentTimeMillis(), null);"
2,org.joda.time.base.BasePartial,<init>,66,/src/main/java/org/joda/time/base/BasePartial.java,}
2,org.joda.time.base.BasePartial,<init>,108,/src/main/java/org/joda/time/base/BasePartial.java,super();
2,org.joda.time.base.BasePartial,<init>,109,/src/main/java/org/joda/time/base/BasePartial.java,chronology = DateTimeUtils.getChronology(chronology);
2,org.joda.time.base.BasePartial,<init>,110,/src/main/java/org/joda/time/base/BasePartial.java,iChronology = chronology.withUTC();
2,org.joda.time.base.BasePartial,<init>,111,/src/main/java/org/joda/time/base/BasePartial.java,"iValues = chronology.get(this, instant);"
2,org.joda.time.base.BasePartial,<init>,112,/src/main/java/org/joda/time/base/BasePartial.java,}
2,org.joda.time.base.BasePartial,<init>,180,/src/main/java/org/joda/time/base/BasePartial.java,super();
2,org.joda.time.base.BasePartial,<init>,181,/src/main/java/org/joda/time/base/BasePartial.java,chronology = DateTimeUtils.getChronology(chronology);
2,org.joda.time.base.BasePartial,<init>,182,/src/main/java/org/joda/time/base/BasePartial.java,iChronology = chronology.withUTC();
2,org.joda.time.base.BasePartial,<init>,183,/src/main/java/org/joda/time/base/BasePartial.java,"chronology.validate(this, values);"
2,org.joda.time.base.BasePartial,<init>,184,/src/main/java/org/joda/time/base/BasePartial.java,iValues = values;
2,org.joda.time.base.BasePartial,<init>,185,/src/main/java/org/joda/time/base/BasePartial.java,}
2,org.joda.time.base.BasePartial,getChronology,249,/src/main/java/org/joda/time/base/BasePartial.java,return iChronology;
2,org.joda.time.base.BasePartial,getValue,225,/src/main/java/org/joda/time/base/BasePartial.java,return iValues[index];
2,org.joda.time.chrono.AssembledChronology,<init>,99,/src/main/java/org/joda/time/chrono/AssembledChronology.java,"protected AssembledChronology(Chronology base, Object param) {"
2,org.joda.time.chrono.AssembledChronology,<init>,100,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iBase = base;
2,org.joda.time.chrono.AssembledChronology,<init>,101,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iParam = param;
2,org.joda.time.chrono.AssembledChronology,<init>,102,/src/main/java/org/joda/time/chrono/AssembledChronology.java,setFields();
2,org.joda.time.chrono.AssembledChronology,<init>,103,/src/main/java/org/joda/time/chrono/AssembledChronology.java,}
2,org.joda.time.chrono.AssembledChronology,centuries,280,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iCenturies;
2,org.joda.time.chrono.AssembledChronology,centuryOfEra,284,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iCenturyOfEra;
2,org.joda.time.chrono.AssembledChronology,clockhourOfDay,200,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iClockhourOfDay;
2,org.joda.time.chrono.AssembledChronology,clockhourOfHalfday,212,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iClockhourOfHalfday;
2,org.joda.time.chrono.AssembledChronology,dayOfMonth,228,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iDayOfMonth;
2,org.joda.time.chrono.AssembledChronology,dayOfWeek,224,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iDayOfWeek;
2,org.joda.time.chrono.AssembledChronology,dayOfYear,232,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iDayOfYear;
2,org.joda.time.chrono.AssembledChronology,days,220,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iDays;
2,org.joda.time.chrono.AssembledChronology,era,292,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iEra;
2,org.joda.time.chrono.AssembledChronology,eras,288,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iEras;
2,org.joda.time.chrono.AssembledChronology,getBase,308,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iBase;
2,org.joda.time.chrono.AssembledChronology,getDateTimeMillis,131,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if ((base = iBase) != null && (iBaseFlags & 5) == 5) {
2,org.joda.time.chrono.AssembledChronology,getDateTimeMillis,136,/src/main/java/org/joda/time/chrono/AssembledChronology.java,"return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,"
2,org.joda.time.chrono.AssembledChronology,getParam,315,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iParam;
2,org.joda.time.chrono.AssembledChronology,getZone,107,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if ((base = iBase) != null) {
2,org.joda.time.chrono.AssembledChronology,getZone,108,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return base.getZone();
2,org.joda.time.chrono.AssembledChronology,halfdayOfDay,216,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iHalfdayOfDay;
2,org.joda.time.chrono.AssembledChronology,halfdays,204,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iHalfdays;
2,org.joda.time.chrono.AssembledChronology,hourOfDay,196,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iHourOfDay;
2,org.joda.time.chrono.AssembledChronology,hourOfHalfday,208,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iHourOfHalfday;
2,org.joda.time.chrono.AssembledChronology,hours,192,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iHours;
2,org.joda.time.chrono.AssembledChronology,millis,156,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMillis;
2,org.joda.time.chrono.AssembledChronology,millisOfDay,164,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMillisOfDay;
2,org.joda.time.chrono.AssembledChronology,millisOfSecond,160,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMillisOfSecond;
2,org.joda.time.chrono.AssembledChronology,minuteOfDay,188,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMinuteOfDay;
2,org.joda.time.chrono.AssembledChronology,minuteOfHour,184,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMinuteOfHour;
2,org.joda.time.chrono.AssembledChronology,minutes,180,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMinutes;
2,org.joda.time.chrono.AssembledChronology,monthOfYear,260,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMonthOfYear;
2,org.joda.time.chrono.AssembledChronology,months,256,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iMonths;
2,org.joda.time.chrono.AssembledChronology,secondOfDay,176,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iSecondOfDay;
2,org.joda.time.chrono.AssembledChronology,secondOfMinute,172,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iSecondOfMinute;
2,org.joda.time.chrono.AssembledChronology,seconds,168,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iSeconds;
2,org.joda.time.chrono.AssembledChronology,setFields,319,/src/main/java/org/joda/time/chrono/AssembledChronology.java,Fields fields = new Fields();
2,org.joda.time.chrono.AssembledChronology,setFields,320,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (iBase != null) {
2,org.joda.time.chrono.AssembledChronology,setFields,321,/src/main/java/org/joda/time/chrono/AssembledChronology.java,fields.copyFieldsFrom(iBase);
2,org.joda.time.chrono.AssembledChronology,setFields,323,/src/main/java/org/joda/time/chrono/AssembledChronology.java,assemble(fields);
2,org.joda.time.chrono.AssembledChronology,setFields,327,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMillis    = (f = fields.millis)    != null ? f : super.millis();
2,org.joda.time.chrono.AssembledChronology,setFields,328,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();
2,org.joda.time.chrono.AssembledChronology,setFields,329,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();
2,org.joda.time.chrono.AssembledChronology,setFields,330,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iHours     = (f = fields.hours)     != null ? f : super.hours();
2,org.joda.time.chrono.AssembledChronology,setFields,331,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();
2,org.joda.time.chrono.AssembledChronology,setFields,332,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iDays      = (f = fields.days)      != null ? f : super.days();
2,org.joda.time.chrono.AssembledChronology,setFields,333,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();
2,org.joda.time.chrono.AssembledChronology,setFields,334,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();
2,org.joda.time.chrono.AssembledChronology,setFields,335,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMonths    = (f = fields.months)    != null ? f : super.months();
2,org.joda.time.chrono.AssembledChronology,setFields,336,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iYears     = (f = fields.years)     != null ? f : super.years();
2,org.joda.time.chrono.AssembledChronology,setFields,337,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iCenturies = (f = fields.centuries) != null ? f : super.centuries();
2,org.joda.time.chrono.AssembledChronology,setFields,338,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iEras      = (f = fields.eras)      != null ? f : super.eras();
2,org.joda.time.chrono.AssembledChronology,setFields,343,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();
2,org.joda.time.chrono.AssembledChronology,setFields,344,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();
2,org.joda.time.chrono.AssembledChronology,setFields,345,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();
2,org.joda.time.chrono.AssembledChronology,setFields,346,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();
2,org.joda.time.chrono.AssembledChronology,setFields,347,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();
2,org.joda.time.chrono.AssembledChronology,setFields,348,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();
2,org.joda.time.chrono.AssembledChronology,setFields,349,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();
2,org.joda.time.chrono.AssembledChronology,setFields,350,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();
2,org.joda.time.chrono.AssembledChronology,setFields,351,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();
2,org.joda.time.chrono.AssembledChronology,setFields,352,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();
2,org.joda.time.chrono.AssembledChronology,setFields,353,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();
2,org.joda.time.chrono.AssembledChronology,setFields,354,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();
2,org.joda.time.chrono.AssembledChronology,setFields,355,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();
2,org.joda.time.chrono.AssembledChronology,setFields,356,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();
2,org.joda.time.chrono.AssembledChronology,setFields,357,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();
2,org.joda.time.chrono.AssembledChronology,setFields,358,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();
2,org.joda.time.chrono.AssembledChronology,setFields,359,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();
2,org.joda.time.chrono.AssembledChronology,setFields,360,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();
2,org.joda.time.chrono.AssembledChronology,setFields,361,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iYear               = (f = fields.year)               != null ? f : super.year();
2,org.joda.time.chrono.AssembledChronology,setFields,362,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();
2,org.joda.time.chrono.AssembledChronology,setFields,363,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();
2,org.joda.time.chrono.AssembledChronology,setFields,364,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();
2,org.joda.time.chrono.AssembledChronology,setFields,365,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iEra                = (f = fields.era)                != null ? f : super.era();
2,org.joda.time.chrono.AssembledChronology,setFields,369,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (iBase == null) {
2,org.joda.time.chrono.AssembledChronology,setFields,370,/src/main/java/org/joda/time/chrono/AssembledChronology.java,flags = 0;
2,org.joda.time.chrono.AssembledChronology,setFields,372,/src/main/java/org/joda/time/chrono/AssembledChronology.java,flags =
2,org.joda.time.chrono.AssembledChronology,setFields,385,/src/main/java/org/joda/time/chrono/AssembledChronology.java,iBaseFlags = flags;
2,org.joda.time.chrono.AssembledChronology,setFields,386,/src/main/java/org/joda/time/chrono/AssembledChronology.java,}
2,org.joda.time.chrono.AssembledChronology,weekOfWeekyear,240,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iWeekOfWeekyear;
2,org.joda.time.chrono.AssembledChronology,weeks,236,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iWeeks;
2,org.joda.time.chrono.AssembledChronology,weekyear,248,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iWeekyear;
2,org.joda.time.chrono.AssembledChronology,weekyearOfCentury,252,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iWeekyearOfCentury;
2,org.joda.time.chrono.AssembledChronology,weekyears,244,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iWeekyears;
2,org.joda.time.chrono.AssembledChronology,year,268,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iYear;
2,org.joda.time.chrono.AssembledChronology,yearOfCentury,276,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iYearOfCentury;
2,org.joda.time.chrono.AssembledChronology,yearOfEra,272,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iYearOfEra;
2,org.joda.time.chrono.AssembledChronology,years,264,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return iYears;
2,org.joda.time.chrono.AssembledChronology$Fields,<init>,436,/src/main/java/org/joda/time/chrono/AssembledChronology.java,Fields() {
2,org.joda.time.chrono.AssembledChronology$Fields,<init>,437,/src/main/java/org/joda/time/chrono/AssembledChronology.java,}
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,445,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.millis())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,446,/src/main/java/org/joda/time/chrono/AssembledChronology.java,millis = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,448,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.seconds())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,449,/src/main/java/org/joda/time/chrono/AssembledChronology.java,seconds = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,451,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.minutes())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,452,/src/main/java/org/joda/time/chrono/AssembledChronology.java,minutes = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,454,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.hours())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,455,/src/main/java/org/joda/time/chrono/AssembledChronology.java,hours = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,457,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.halfdays())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,458,/src/main/java/org/joda/time/chrono/AssembledChronology.java,halfdays = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,460,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.days())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,461,/src/main/java/org/joda/time/chrono/AssembledChronology.java,days = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,463,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.weeks())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,464,/src/main/java/org/joda/time/chrono/AssembledChronology.java,weeks = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,466,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.weekyears())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,467,/src/main/java/org/joda/time/chrono/AssembledChronology.java,weekyears = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,469,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.months())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,470,/src/main/java/org/joda/time/chrono/AssembledChronology.java,months = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,472,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.years())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,473,/src/main/java/org/joda/time/chrono/AssembledChronology.java,years = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,475,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.centuries())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,476,/src/main/java/org/joda/time/chrono/AssembledChronology.java,centuries = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,478,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.eras())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,485,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.millisOfSecond())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,486,/src/main/java/org/joda/time/chrono/AssembledChronology.java,millisOfSecond = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,488,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.millisOfDay())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,489,/src/main/java/org/joda/time/chrono/AssembledChronology.java,millisOfDay = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,491,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.secondOfMinute())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,492,/src/main/java/org/joda/time/chrono/AssembledChronology.java,secondOfMinute = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,494,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.secondOfDay())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,495,/src/main/java/org/joda/time/chrono/AssembledChronology.java,secondOfDay = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,497,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.minuteOfHour())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,498,/src/main/java/org/joda/time/chrono/AssembledChronology.java,minuteOfHour = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,500,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.minuteOfDay())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,501,/src/main/java/org/joda/time/chrono/AssembledChronology.java,minuteOfDay = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,503,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.hourOfDay())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,504,/src/main/java/org/joda/time/chrono/AssembledChronology.java,hourOfDay = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,506,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.clockhourOfDay())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,507,/src/main/java/org/joda/time/chrono/AssembledChronology.java,clockhourOfDay = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,509,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.hourOfHalfday())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,510,/src/main/java/org/joda/time/chrono/AssembledChronology.java,hourOfHalfday = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,512,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.clockhourOfHalfday())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,513,/src/main/java/org/joda/time/chrono/AssembledChronology.java,clockhourOfHalfday = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,515,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.halfdayOfDay())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,516,/src/main/java/org/joda/time/chrono/AssembledChronology.java,halfdayOfDay = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,518,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.dayOfWeek())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,519,/src/main/java/org/joda/time/chrono/AssembledChronology.java,dayOfWeek = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,521,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.dayOfMonth())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,522,/src/main/java/org/joda/time/chrono/AssembledChronology.java,dayOfMonth = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,524,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.dayOfYear())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,525,/src/main/java/org/joda/time/chrono/AssembledChronology.java,dayOfYear = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,527,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.weekOfWeekyear())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,528,/src/main/java/org/joda/time/chrono/AssembledChronology.java,weekOfWeekyear = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,530,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.weekyear())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,531,/src/main/java/org/joda/time/chrono/AssembledChronology.java,weekyear = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,533,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.weekyearOfCentury())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,534,/src/main/java/org/joda/time/chrono/AssembledChronology.java,weekyearOfCentury = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,536,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.monthOfYear())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,537,/src/main/java/org/joda/time/chrono/AssembledChronology.java,monthOfYear = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,539,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.year())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,540,/src/main/java/org/joda/time/chrono/AssembledChronology.java,year = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,542,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.yearOfEra())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,543,/src/main/java/org/joda/time/chrono/AssembledChronology.java,yearOfEra = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,545,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.yearOfCentury())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,546,/src/main/java/org/joda/time/chrono/AssembledChronology.java,yearOfCentury = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,548,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.centuryOfEra())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,549,/src/main/java/org/joda/time/chrono/AssembledChronology.java,centuryOfEra = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,551,/src/main/java/org/joda/time/chrono/AssembledChronology.java,if (isSupported(f = chrono.era())) {
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,552,/src/main/java/org/joda/time/chrono/AssembledChronology.java,era = f;
2,org.joda.time.chrono.AssembledChronology$Fields,copyFieldsFrom,555,/src/main/java/org/joda/time/chrono/AssembledChronology.java,}
2,org.joda.time.chrono.AssembledChronology$Fields,isSupported,562,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return field == null ? false : field.isSupported();
2,org.joda.time.chrono.AssembledChronology$Fields,isSupported,558,/src/main/java/org/joda/time/chrono/AssembledChronology.java,return field == null ? false : field.isSupported();
2,org.joda.time.chrono.BaseChronology,<init>,54,/src/main/java/org/joda/time/chrono/BaseChronology.java,super();
2,org.joda.time.chrono.BaseChronology,<init>,55,/src/main/java/org/joda/time/chrono/BaseChronology.java,}
2,org.joda.time.chrono.BaseChronology,eras,660,/src/main/java/org/joda/time/chrono/BaseChronology.java,return UnsupportedDurationField.getInstance(DurationFieldType.eras());
2,org.joda.time.chrono.BaseChronology,get,223,/src/main/java/org/joda/time/chrono/BaseChronology.java,int size = partial.size();
2,org.joda.time.chrono.BaseChronology,get,224,/src/main/java/org/joda/time/chrono/BaseChronology.java,int[] values = new int[size];
2,org.joda.time.chrono.BaseChronology,get,225,/src/main/java/org/joda/time/chrono/BaseChronology.java,for (int i = 0; i < size; i++) {
2,org.joda.time.chrono.BaseChronology,get,226,/src/main/java/org/joda/time/chrono/BaseChronology.java,values[i] = partial.getFieldType(i).getField(this).get(instant);
2,org.joda.time.chrono.BaseChronology,get,228,/src/main/java/org/joda/time/chrono/BaseChronology.java,return values;
2,org.joda.time.chrono.BaseChronology,getDateTimeMillis,132,/src/main/java/org/joda/time/chrono/BaseChronology.java,"long instant = year().set(0, year);"
2,org.joda.time.chrono.BaseChronology,getDateTimeMillis,133,/src/main/java/org/joda/time/chrono/BaseChronology.java,"instant = monthOfYear().set(instant, monthOfYear);"
2,org.joda.time.chrono.BaseChronology,getDateTimeMillis,134,/src/main/java/org/joda/time/chrono/BaseChronology.java,"instant = dayOfMonth().set(instant, dayOfMonth);"
2,org.joda.time.chrono.BaseChronology,getDateTimeMillis,135,/src/main/java/org/joda/time/chrono/BaseChronology.java,"instant = hourOfDay().set(instant, hourOfDay);"
2,org.joda.time.chrono.BaseChronology,getDateTimeMillis,136,/src/main/java/org/joda/time/chrono/BaseChronology.java,"instant = minuteOfHour().set(instant, minuteOfHour);"
2,org.joda.time.chrono.BaseChronology,getDateTimeMillis,137,/src/main/java/org/joda/time/chrono/BaseChronology.java,"instant = secondOfMinute().set(instant, secondOfMinute);"
2,org.joda.time.chrono.BaseChronology,getDateTimeMillis,138,/src/main/java/org/joda/time/chrono/BaseChronology.java,"return millisOfSecond().set(instant, millisOfSecond);"
2,org.joda.time.chrono.BaseChronology,validate,183,/src/main/java/org/joda/time/chrono/BaseChronology.java,int size = partial.size();
2,org.joda.time.chrono.BaseChronology,validate,184,/src/main/java/org/joda/time/chrono/BaseChronology.java,for (int i = 0; i < size; i++) {
2,org.joda.time.chrono.BaseChronology,validate,185,/src/main/java/org/joda/time/chrono/BaseChronology.java,int value = values[i];
2,org.joda.time.chrono.BaseChronology,validate,186,/src/main/java/org/joda/time/chrono/BaseChronology.java,DateTimeField field = partial.getField(i);
2,org.joda.time.chrono.BaseChronology,validate,187,/src/main/java/org/joda/time/chrono/BaseChronology.java,if (value < field.getMinimumValue()) {
2,org.joda.time.chrono.BaseChronology,validate,192,/src/main/java/org/joda/time/chrono/BaseChronology.java,if (value > field.getMaximumValue()) {
2,org.joda.time.chrono.BaseChronology,validate,199,/src/main/java/org/joda/time/chrono/BaseChronology.java,for (int i = 0; i < size; i++) {
2,org.joda.time.chrono.BaseChronology,validate,200,/src/main/java/org/joda/time/chrono/BaseChronology.java,int value = values[i];
2,org.joda.time.chrono.BaseChronology,validate,201,/src/main/java/org/joda/time/chrono/BaseChronology.java,DateTimeField field = partial.getField(i);
2,org.joda.time.chrono.BaseChronology,validate,202,/src/main/java/org/joda/time/chrono/BaseChronology.java,"if (value < field.getMinimumValue(partial, values)) {"
2,org.joda.time.chrono.BaseChronology,validate,207,/src/main/java/org/joda/time/chrono/BaseChronology.java,"if (value > field.getMaximumValue(partial, values)) {"
2,org.joda.time.chrono.BaseChronology,validate,213,/src/main/java/org/joda/time/chrono/BaseChronology.java,}
2,org.joda.time.chrono.BasicChronology,<clinit>,76,/src/main/java/org/joda/time/chrono/BasicChronology.java,cMillisField = MillisDurationField.INSTANCE;
2,org.joda.time.chrono.BasicChronology,<clinit>,77,/src/main/java/org/joda/time/chrono/BasicChronology.java,cSecondsField = new PreciseDurationField
2,org.joda.time.chrono.BasicChronology,<clinit>,79,/src/main/java/org/joda/time/chrono/BasicChronology.java,cMinutesField = new PreciseDurationField
2,org.joda.time.chrono.BasicChronology,<clinit>,81,/src/main/java/org/joda/time/chrono/BasicChronology.java,cHoursField = new PreciseDurationField
2,org.joda.time.chrono.BasicChronology,<clinit>,83,/src/main/java/org/joda/time/chrono/BasicChronology.java,cHalfdaysField = new PreciseDurationField
2,org.joda.time.chrono.BasicChronology,<clinit>,85,/src/main/java/org/joda/time/chrono/BasicChronology.java,cDaysField = new PreciseDurationField
2,org.joda.time.chrono.BasicChronology,<clinit>,87,/src/main/java/org/joda/time/chrono/BasicChronology.java,cWeeksField = new PreciseDurationField
2,org.joda.time.chrono.BasicChronology,<clinit>,90,/src/main/java/org/joda/time/chrono/BasicChronology.java,cMillisOfSecondField = new PreciseDateTimeField
2,org.joda.time.chrono.BasicChronology,<clinit>,93,/src/main/java/org/joda/time/chrono/BasicChronology.java,cMillisOfDayField = new PreciseDateTimeField
2,org.joda.time.chrono.BasicChronology,<clinit>,96,/src/main/java/org/joda/time/chrono/BasicChronology.java,cSecondOfMinuteField = new PreciseDateTimeField
2,org.joda.time.chrono.BasicChronology,<clinit>,99,/src/main/java/org/joda/time/chrono/BasicChronology.java,cSecondOfDayField = new PreciseDateTimeField
2,org.joda.time.chrono.BasicChronology,<clinit>,102,/src/main/java/org/joda/time/chrono/BasicChronology.java,cMinuteOfHourField = new PreciseDateTimeField
2,org.joda.time.chrono.BasicChronology,<clinit>,105,/src/main/java/org/joda/time/chrono/BasicChronology.java,cMinuteOfDayField = new PreciseDateTimeField
2,org.joda.time.chrono.BasicChronology,<clinit>,108,/src/main/java/org/joda/time/chrono/BasicChronology.java,cHourOfDayField = new PreciseDateTimeField
2,org.joda.time.chrono.BasicChronology,<clinit>,111,/src/main/java/org/joda/time/chrono/BasicChronology.java,cHourOfHalfdayField = new PreciseDateTimeField
2,org.joda.time.chrono.BasicChronology,<clinit>,114,/src/main/java/org/joda/time/chrono/BasicChronology.java,cClockhourOfDayField = new ZeroIsMaxDateTimeField
2,org.joda.time.chrono.BasicChronology,<clinit>,117,/src/main/java/org/joda/time/chrono/BasicChronology.java,cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField
2,org.joda.time.chrono.BasicChronology,<clinit>,120,/src/main/java/org/joda/time/chrono/BasicChronology.java,cHalfdayOfDayField = new HalfdayField();
2,org.joda.time.chrono.BasicChronology,<clinit>,121,/src/main/java/org/joda/time/chrono/BasicChronology.java,}
2,org.joda.time.chrono.BasicChronology,<init>,126,/src/main/java/org/joda/time/chrono/BasicChronology.java,private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
2,org.joda.time.chrono.BasicChronology,<init>,131,/src/main/java/org/joda/time/chrono/BasicChronology.java,"super(base, param);"
2,org.joda.time.chrono.BasicChronology,<init>,133,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
2,org.joda.time.chrono.BasicChronology,<init>,138,/src/main/java/org/joda/time/chrono/BasicChronology.java,iMinDaysInFirstWeek = minDaysInFirstWeek;
2,org.joda.time.chrono.BasicChronology,<init>,139,/src/main/java/org/joda/time/chrono/BasicChronology.java,}
2,org.joda.time.chrono.BasicChronology,access$100,50,/src/main/java/org/joda/time/chrono/BasicChronology.java,abstract class BasicChronology extends AssembledChronology {
2,org.joda.time.chrono.BasicChronology,assemble,250,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.millis = cMillisField;
2,org.joda.time.chrono.BasicChronology,assemble,251,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.seconds = cSecondsField;
2,org.joda.time.chrono.BasicChronology,assemble,252,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.minutes = cMinutesField;
2,org.joda.time.chrono.BasicChronology,assemble,253,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.hours = cHoursField;
2,org.joda.time.chrono.BasicChronology,assemble,254,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.halfdays = cHalfdaysField;
2,org.joda.time.chrono.BasicChronology,assemble,255,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.days = cDaysField;
2,org.joda.time.chrono.BasicChronology,assemble,256,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.weeks = cWeeksField;
2,org.joda.time.chrono.BasicChronology,assemble,258,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.millisOfSecond = cMillisOfSecondField;
2,org.joda.time.chrono.BasicChronology,assemble,259,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.millisOfDay = cMillisOfDayField;
2,org.joda.time.chrono.BasicChronology,assemble,260,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.secondOfMinute = cSecondOfMinuteField;
2,org.joda.time.chrono.BasicChronology,assemble,261,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.secondOfDay = cSecondOfDayField;
2,org.joda.time.chrono.BasicChronology,assemble,262,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.minuteOfHour = cMinuteOfHourField;
2,org.joda.time.chrono.BasicChronology,assemble,263,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.minuteOfDay = cMinuteOfDayField;
2,org.joda.time.chrono.BasicChronology,assemble,264,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.hourOfDay = cHourOfDayField;
2,org.joda.time.chrono.BasicChronology,assemble,265,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.hourOfHalfday = cHourOfHalfdayField;
2,org.joda.time.chrono.BasicChronology,assemble,266,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.clockhourOfDay = cClockhourOfDayField;
2,org.joda.time.chrono.BasicChronology,assemble,267,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.clockhourOfHalfday = cClockhourOfHalfdayField;
2,org.joda.time.chrono.BasicChronology,assemble,268,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.halfdayOfDay = cHalfdayOfDayField;
2,org.joda.time.chrono.BasicChronology,assemble,273,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.year = new BasicYearDateTimeField(this);
2,org.joda.time.chrono.BasicChronology,assemble,274,/src/main/java/org/joda/time/chrono/BasicChronology.java,"fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);"
2,org.joda.time.chrono.BasicChronology,assemble,277,/src/main/java/org/joda/time/chrono/BasicChronology.java,DateTimeField field = new OffsetDateTimeField(
2,org.joda.time.chrono.BasicChronology,assemble,279,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.centuryOfEra = new DividedDateTimeField(
2,org.joda.time.chrono.BasicChronology,assemble,281,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.centuries = fields.centuryOfEra.getDurationField();
2,org.joda.time.chrono.BasicChronology,assemble,283,/src/main/java/org/joda/time/chrono/BasicChronology.java,field = new RemainderDateTimeField(
2,org.joda.time.chrono.BasicChronology,assemble,285,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.yearOfCentury = new OffsetDateTimeField(
2,org.joda.time.chrono.BasicChronology,assemble,288,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.era = new GJEraDateTimeField(this);
2,org.joda.time.chrono.BasicChronology,assemble,289,/src/main/java/org/joda/time/chrono/BasicChronology.java,"fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);"
2,org.joda.time.chrono.BasicChronology,assemble,290,/src/main/java/org/joda/time/chrono/BasicChronology.java,"fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);"
2,org.joda.time.chrono.BasicChronology,assemble,291,/src/main/java/org/joda/time/chrono/BasicChronology.java,"fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);"
2,org.joda.time.chrono.BasicChronology,assemble,292,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
2,org.joda.time.chrono.BasicChronology,assemble,293,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.weekyear = new BasicWeekyearDateTimeField(this);
2,org.joda.time.chrono.BasicChronology,assemble,294,/src/main/java/org/joda/time/chrono/BasicChronology.java,"fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);"
2,org.joda.time.chrono.BasicChronology,assemble,296,/src/main/java/org/joda/time/chrono/BasicChronology.java,field = new RemainderDateTimeField(
2,org.joda.time.chrono.BasicChronology,assemble,298,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.weekyearOfCentury = new OffsetDateTimeField(
2,org.joda.time.chrono.BasicChronology,assemble,303,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.years = fields.year.getDurationField();
2,org.joda.time.chrono.BasicChronology,assemble,304,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.months = fields.monthOfYear.getDurationField();
2,org.joda.time.chrono.BasicChronology,assemble,305,/src/main/java/org/joda/time/chrono/BasicChronology.java,fields.weekyears = fields.weekyear.getDurationField();
2,org.joda.time.chrono.BasicChronology,assemble,306,/src/main/java/org/joda/time/chrono/BasicChronology.java,}
2,org.joda.time.chrono.BasicChronology,getDateMidnightMillis,611,/src/main/java/org/joda/time/chrono/BasicChronology.java,"FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());"
2,org.joda.time.chrono.BasicChronology,getDateMidnightMillis,612,/src/main/java/org/joda/time/chrono/BasicChronology.java,"FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));"
2,org.joda.time.chrono.BasicChronology,getDateMidnightMillis,613,/src/main/java/org/joda/time/chrono/BasicChronology.java,"FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));"
2,org.joda.time.chrono.BasicChronology,getDateMidnightMillis,614,/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);"
2,org.joda.time.chrono.BasicChronology,getDateTimeMillis,153,/src/main/java/org/joda/time/chrono/BasicChronology.java,if ((base = getBase()) != null) {
2,org.joda.time.chrono.BasicChronology,getDateTimeMillis,157,/src/main/java/org/joda/time/chrono/BasicChronology.java,FieldUtils.verifyValueBounds
2,org.joda.time.chrono.BasicChronology,getDateTimeMillis,159,/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;"
2,org.joda.time.chrono.BasicChronology,getDateTimeMillis,167,/src/main/java/org/joda/time/chrono/BasicChronology.java,if ((base = getBase()) != null) {
2,org.joda.time.chrono.BasicChronology,getDateTimeMillis,172,/src/main/java/org/joda/time/chrono/BasicChronology.java,"FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);"
2,org.joda.time.chrono.BasicChronology,getDateTimeMillis,173,/src/main/java/org/joda/time/chrono/BasicChronology.java,"FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);"
2,org.joda.time.chrono.BasicChronology,getDateTimeMillis,174,/src/main/java/org/joda/time/chrono/BasicChronology.java,"FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);"
2,org.joda.time.chrono.BasicChronology,getDateTimeMillis,175,/src/main/java/org/joda/time/chrono/BasicChronology.java,"FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);"
2,org.joda.time.chrono.BasicChronology,getDateTimeMillis,177,/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getDateMidnightMillis(year, monthOfYear, dayOfMonth)"
2,org.joda.time.chrono.BasicChronology,getDayOfMonth,456,/src/main/java/org/joda/time/chrono/BasicChronology.java,int year = getYear(millis);
2,org.joda.time.chrono.BasicChronology,getDayOfMonth,457,/src/main/java/org/joda/time/chrono/BasicChronology.java,"int month = getMonthOfYear(millis, year);"
2,org.joda.time.chrono.BasicChronology,getDayOfMonth,458,/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getDayOfMonth(millis, year, month);"
2,org.joda.time.chrono.BasicChronology,getDayOfMonth,466,/src/main/java/org/joda/time/chrono/BasicChronology.java,"int month = getMonthOfYear(millis, year);"
2,org.joda.time.chrono.BasicChronology,getDayOfMonth,467,/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getDayOfMonth(millis, year, month);"
2,org.joda.time.chrono.BasicChronology,getDayOfMonth,476,/src/main/java/org/joda/time/chrono/BasicChronology.java,long dateMillis = getYearMillis(year);
2,org.joda.time.chrono.BasicChronology,getDayOfMonth,477,/src/main/java/org/joda/time/chrono/BasicChronology.java,"dateMillis += getTotalMillisByYearMonth(year, month);"
2,org.joda.time.chrono.BasicChronology,getDayOfMonth,478,/src/main/java/org/joda/time/chrono/BasicChronology.java,return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
2,org.joda.time.chrono.BasicChronology,getDayOfWeek,542,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (instant >= 0) {
2,org.joda.time.chrono.BasicChronology,getDayOfWeek,545,/src/main/java/org/joda/time/chrono/BasicChronology.java,daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1))
2,org.joda.time.chrono.BasicChronology,getDayOfWeek,547,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (daysSince19700101 < -3) {
2,org.joda.time.chrono.BasicChronology,getDayOfWeek,548,/src/main/java/org/joda/time/chrono/BasicChronology.java,return 7 + (int) ((daysSince19700101 + 4) % 7);
2,org.joda.time.chrono.BasicChronology,getDayOfYear,493,/src/main/java/org/joda/time/chrono/BasicChronology.java,long yearStart = getYearMillis(year);
2,org.joda.time.chrono.BasicChronology,getDayOfYear,494,/src/main/java/org/joda/time/chrono/BasicChronology.java,return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
2,org.joda.time.chrono.BasicChronology,getFirstWeekOfYearMillis,347,/src/main/java/org/joda/time/chrono/BasicChronology.java,long jan1millis = getYearMillis(year);
2,org.joda.time.chrono.BasicChronology,getFirstWeekOfYearMillis,348,/src/main/java/org/joda/time/chrono/BasicChronology.java,int jan1dayOfWeek = getDayOfWeek(jan1millis);
2,org.joda.time.chrono.BasicChronology,getFirstWeekOfYearMillis,350,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {
2,org.joda.time.chrono.BasicChronology,getFirstWeekOfYearMillis,352,/src/main/java/org/joda/time/chrono/BasicChronology.java,return jan1millis + (8 - jan1dayOfWeek)
2,org.joda.time.chrono.BasicChronology,getMaxMonth,699,/src/main/java/org/joda/time/chrono/BasicChronology.java,return 12;
2,org.joda.time.chrono.BasicChronology,getMaxMonth,690,/src/main/java/org/joda/time/chrono/BasicChronology.java,return getMaxMonth();
2,org.joda.time.chrono.BasicChronology,getMillisOfDay,559,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (instant >= 0) {
2,org.joda.time.chrono.BasicChronology,getMillisOfDay,560,/src/main/java/org/joda/time/chrono/BasicChronology.java,return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
2,org.joda.time.chrono.BasicChronology,getMillisOfDay,562,/src/main/java/org/joda/time/chrono/BasicChronology.java,return (DateTimeConstants.MILLIS_PER_DAY - 1)
2,org.joda.time.chrono.BasicChronology,getMinimumDaysInFirstWeek,185,/src/main/java/org/joda/time/chrono/BasicChronology.java,return iMinDaysInFirstWeek;
2,org.joda.time.chrono.BasicChronology,getMonthOfYear,443,/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getMonthOfYear(millis, getYear(millis));"
2,org.joda.time.chrono.BasicChronology,getWeekOfWeekyear,516,/src/main/java/org/joda/time/chrono/BasicChronology.java,"return getWeekOfWeekyear(instant, getYear(instant));"
2,org.joda.time.chrono.BasicChronology,getWeekOfWeekyear,524,/src/main/java/org/joda/time/chrono/BasicChronology.java,long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
2,org.joda.time.chrono.BasicChronology,getWeekOfWeekyear,525,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (instant < firstWeekMillis1) {
2,org.joda.time.chrono.BasicChronology,getWeekOfWeekyear,528,/src/main/java/org/joda/time/chrono/BasicChronology.java,long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
2,org.joda.time.chrono.BasicChronology,getWeekOfWeekyear,529,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (instant >= firstWeekMillis2) {
2,org.joda.time.chrono.BasicChronology,getWeekOfWeekyear,532,/src/main/java/org/joda/time/chrono/BasicChronology.java,return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;
2,org.joda.time.chrono.BasicChronology,getWeeksInYear,335,/src/main/java/org/joda/time/chrono/BasicChronology.java,long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
2,org.joda.time.chrono.BasicChronology,getWeeksInYear,336,/src/main/java/org/joda/time/chrono/BasicChronology.java,long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
2,org.joda.time.chrono.BasicChronology,getWeeksInYear,337,/src/main/java/org/joda/time/chrono/BasicChronology.java,return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);
2,org.joda.time.chrono.BasicChronology,getWeekyear,501,/src/main/java/org/joda/time/chrono/BasicChronology.java,int year = getYear(instant);
2,org.joda.time.chrono.BasicChronology,getWeekyear,502,/src/main/java/org/joda/time/chrono/BasicChronology.java,"int week = getWeekOfWeekyear(instant, year);"
2,org.joda.time.chrono.BasicChronology,getWeekyear,503,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (week == 1) {
2,org.joda.time.chrono.BasicChronology,getWeekyear,504,/src/main/java/org/joda/time/chrono/BasicChronology.java,return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);
2,org.joda.time.chrono.BasicChronology,getYear,407,/src/main/java/org/joda/time/chrono/BasicChronology.java,long unitMillis = getAverageMillisPerYearDividedByTwo();
2,org.joda.time.chrono.BasicChronology,getYear,408,/src/main/java/org/joda/time/chrono/BasicChronology.java,long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
2,org.joda.time.chrono.BasicChronology,getYear,409,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (i2 < 0) {
2,org.joda.time.chrono.BasicChronology,getYear,410,/src/main/java/org/joda/time/chrono/BasicChronology.java,i2 = i2 - unitMillis + 1;
2,org.joda.time.chrono.BasicChronology,getYear,412,/src/main/java/org/joda/time/chrono/BasicChronology.java,int year = (int) (i2 / unitMillis);
2,org.joda.time.chrono.BasicChronology,getYear,414,/src/main/java/org/joda/time/chrono/BasicChronology.java,long yearStart = getYearMillis(year);
2,org.joda.time.chrono.BasicChronology,getYear,415,/src/main/java/org/joda/time/chrono/BasicChronology.java,long diff = instant - yearStart;
2,org.joda.time.chrono.BasicChronology,getYear,417,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (diff < 0) {
2,org.joda.time.chrono.BasicChronology,getYear,419,/src/main/java/org/joda/time/chrono/BasicChronology.java,} else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
2,org.joda.time.chrono.BasicChronology,getYear,422,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (isLeapYear(year)) {
2,org.joda.time.chrono.BasicChronology,getYear,425,/src/main/java/org/joda/time/chrono/BasicChronology.java,oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;
2,org.joda.time.chrono.BasicChronology,getYear,428,/src/main/java/org/joda/time/chrono/BasicChronology.java,yearStart += oneYear;
2,org.joda.time.chrono.BasicChronology,getYear,430,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (yearStart <= instant) {
2,org.joda.time.chrono.BasicChronology,getYear,432,/src/main/java/org/joda/time/chrono/BasicChronology.java,year++;
2,org.joda.time.chrono.BasicChronology,getYear,436,/src/main/java/org/joda/time/chrono/BasicChronology.java,return year;
2,org.joda.time.chrono.BasicChronology,getYearInfo,746,/src/main/java/org/joda/time/chrono/BasicChronology.java,YearInfo info = iYearInfoCache[year & CACHE_MASK];
2,org.joda.time.chrono.BasicChronology,getYearInfo,747,/src/main/java/org/joda/time/chrono/BasicChronology.java,if (info == null || info.iYear != year) {
2,org.joda.time.chrono.BasicChronology,getYearInfo,748,/src/main/java/org/joda/time/chrono/BasicChronology.java,"info = new YearInfo(year, calculateFirstDayOfYearMillis(year));"
2,org.joda.time.chrono.BasicChronology,getYearInfo,749,/src/main/java/org/joda/time/chrono/BasicChronology.java,iYearInfoCache[year & CACHE_MASK] = info;
2,org.joda.time.chrono.BasicChronology,getYearInfo,751,/src/main/java/org/joda/time/chrono/BasicChronology.java,return info;
2,org.joda.time.chrono.BasicChronology,getYearMillis,368,/src/main/java/org/joda/time/chrono/BasicChronology.java,return getYearInfo(year).iFirstDayMillis;
2,org.joda.time.chrono.BasicChronology,getYearMonthDayMillis,393,/src/main/java/org/joda/time/chrono/BasicChronology.java,long millis = getYearMillis(year);
2,org.joda.time.chrono.BasicChronology,getYearMonthDayMillis,394,/src/main/java/org/joda/time/chrono/BasicChronology.java,"millis += getTotalMillisByYearMonth(year, month);"
2,org.joda.time.chrono.BasicChronology,getYearMonthDayMillis,395,/src/main/java/org/joda/time/chrono/BasicChronology.java,return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
2,org.joda.time.chrono.BasicChronology,getZone,143,/src/main/java/org/joda/time/chrono/BasicChronology.java,if ((base = getBase()) != null) {
2,org.joda.time.chrono.BasicChronology,getZone,146,/src/main/java/org/joda/time/chrono/BasicChronology.java,return DateTimeZone.UTC;
2,org.joda.time.chrono.BasicChronology$HalfdayField,<init>,759,/src/main/java/org/joda/time/chrono/BasicChronology.java,"super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);"
2,org.joda.time.chrono.BasicChronology$HalfdayField,<init>,760,/src/main/java/org/joda/time/chrono/BasicChronology.java,}
2,org.joda.time.chrono.BasicChronology$YearInfo,<init>,779,/src/main/java/org/joda/time/chrono/BasicChronology.java,"YearInfo(int year, long firstDayMillis) {"
2,org.joda.time.chrono.BasicChronology$YearInfo,<init>,780,/src/main/java/org/joda/time/chrono/BasicChronology.java,iYear = year;
2,org.joda.time.chrono.BasicChronology$YearInfo,<init>,781,/src/main/java/org/joda/time/chrono/BasicChronology.java,iFirstDayMillis = firstDayMillis;
2,org.joda.time.chrono.BasicChronology$YearInfo,<init>,782,/src/main/java/org/joda/time/chrono/BasicChronology.java,}
2,org.joda.time.chrono.BasicDayOfMonthDateTimeField,<init>,42,/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,"super(DateTimeFieldType.dayOfMonth(), days);"
2,org.joda.time.chrono.BasicDayOfMonthDateTimeField,<init>,43,/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,iChronology = chronology;
2,org.joda.time.chrono.BasicDayOfMonthDateTimeField,<init>,44,/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,}
2,org.joda.time.chrono.BasicDayOfMonthDateTimeField,get,48,/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,return iChronology.getDayOfMonth(instant);
2,org.joda.time.chrono.BasicDayOfMonthDateTimeField,getMaximumValueForSet,97,/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,"return iChronology.getDaysInMonthMaxForSet(instant, value);"
2,org.joda.time.chrono.BasicDayOfMonthDateTimeField,getMinimumValue,56,/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,return 1;
2,org.joda.time.chrono.BasicDayOfMonthDateTimeField,getRangeDurationField,52,/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java,return iChronology.months();
2,org.joda.time.chrono.BasicDayOfYearDateTimeField,<init>,42,/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,"super(DateTimeFieldType.dayOfYear(), days);"
2,org.joda.time.chrono.BasicDayOfYearDateTimeField,<init>,43,/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,iChronology = chronology;
2,org.joda.time.chrono.BasicDayOfYearDateTimeField,<init>,44,/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,}
2,org.joda.time.chrono.BasicDayOfYearDateTimeField,getRangeDurationField,57,/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java,return iChronology.years();
2,org.joda.time.chrono.BasicFixedMonthChronology,<init>,59,/src/main/java/org/joda/time/chrono/BasicFixedMonthChronology.java,"super(base, param, minDaysInFirstWeek);"
2,org.joda.time.chrono.BasicFixedMonthChronology,<init>,60,/src/main/java/org/joda/time/chrono/BasicFixedMonthChronology.java,}
2,org.joda.time.chrono.BasicFixedMonthChronology,getAverageMillisPerMonth,158,/src/main/java/org/joda/time/chrono/BasicFixedMonthChronology.java,return MILLIS_PER_MONTH;
2,org.joda.time.chrono.BasicFixedMonthChronology,getAverageMillisPerYear,148,/src/main/java/org/joda/time/chrono/BasicFixedMonthChronology.java,return MILLIS_PER_YEAR;
2,org.joda.time.chrono.BasicFixedMonthChronology,getDaysInYearMonth,117,/src/main/java/org/joda/time/chrono/BasicFixedMonthChronology.java,return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);
2,org.joda.time.chrono.BasicFixedMonthChronology,getMaxMonth,143,/src/main/java/org/joda/time/chrono/BasicFixedMonthChronology.java,return 13;
2,org.joda.time.chrono.BasicFixedMonthChronology,getTotalMillisByYearMonth,101,/src/main/java/org/joda/time/chrono/BasicFixedMonthChronology.java,return ((month - 1) * MILLIS_PER_MONTH);
2,org.joda.time.chrono.BasicGJChronology,<clinit>,42,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
2,org.joda.time.chrono.BasicGJChronology,<clinit>,45,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
2,org.joda.time.chrono.BasicGJChronology,<clinit>,53,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
2,org.joda.time.chrono.BasicGJChronology,<clinit>,54,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
2,org.joda.time.chrono.BasicGJChronology,<clinit>,56,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,long minSum = 0;
2,org.joda.time.chrono.BasicGJChronology,<clinit>,57,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,long maxSum = 0;
2,org.joda.time.chrono.BasicGJChronology,<clinit>,58,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,for (int i = 0; i < 11; i++) {
2,org.joda.time.chrono.BasicGJChronology,<clinit>,59,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
2,org.joda.time.chrono.BasicGJChronology,<clinit>,61,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,minSum += millis;
2,org.joda.time.chrono.BasicGJChronology,<clinit>,62,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;
2,org.joda.time.chrono.BasicGJChronology,<clinit>,64,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,millis = MAX_DAYS_PER_MONTH_ARRAY[i]
2,org.joda.time.chrono.BasicGJChronology,<clinit>,66,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,maxSum += millis;
2,org.joda.time.chrono.BasicGJChronology,<clinit>,67,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;
2,org.joda.time.chrono.BasicGJChronology,<clinit>,69,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,}
2,org.joda.time.chrono.BasicGJChronology,<init>,75,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,"super(base, param, minDaysInFirstWeek);"
2,org.joda.time.chrono.BasicGJChronology,<init>,76,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,}
2,org.joda.time.chrono.BasicGJChronology,getDaysInMonthMaxForSet,134,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);
2,org.joda.time.chrono.BasicGJChronology,getDaysInYearMonth,120,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (isLeapYear(year)) {
2,org.joda.time.chrono.BasicGJChronology,getDaysInYearMonth,123,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
2,org.joda.time.chrono.BasicGJChronology,getMonthOfYear,88,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,int i = (int)((millis - getYearMillis(year)) >> 10);
2,org.joda.time.chrono.BasicGJChronology,getMonthOfYear,93,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return
2,org.joda.time.chrono.BasicGJChronology,getTotalMillisByYearMonth,139,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (isLeapYear(year)) {
2,org.joda.time.chrono.BasicGJChronology,getTotalMillisByYearMonth,142,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
2,org.joda.time.chrono.BasicGJChronology,setYear,175,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,int thisYear = getYear(instant);
2,org.joda.time.chrono.BasicGJChronology,setYear,176,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,"int dayOfYear = getDayOfYear(instant, thisYear);"
2,org.joda.time.chrono.BasicGJChronology,setYear,177,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,int millisOfDay = getMillisOfDay(instant);
2,org.joda.time.chrono.BasicGJChronology,setYear,179,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,if (dayOfYear > (31 + 28)) { // after Feb 28
2,org.joda.time.chrono.BasicGJChronology,setYear,195,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,"instant = getYearMonthDayMillis(year, 1, dayOfYear);"
2,org.joda.time.chrono.BasicGJChronology,setYear,196,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,instant += millisOfDay;
2,org.joda.time.chrono.BasicGJChronology,setYear,198,/src/main/java/org/joda/time/chrono/BasicGJChronology.java,return instant;
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,<init>,52,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());"
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,<init>,53,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,iChronology = chronology;
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,<init>,54,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,iMax = iChronology.getMaxMonth();
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,<init>,55,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,iLeapMonth = leapMonth;
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,<init>,56,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,}
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,get,73,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,return iChronology.getMonthOfYear(instant);
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getLeapDurationField,335,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,return iChronology.days();
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,getRangeDurationField,316,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,return iChronology.years();
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,299,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"FieldUtils.verifyValueBounds(this, month, MIN, iMax);"
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,301,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,int thisYear = iChronology.getYear(instant);
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,303,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"int thisDom = iChronology.getDayOfMonth(instant, thisYear);"
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,304,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"int maxDom = iChronology.getDaysInYearMonth(thisYear, month);"
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,305,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,if (thisDom > maxDom) {
2,org.joda.time.chrono.BasicMonthOfYearDateTimeField,set,310,/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,"return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +"
2,org.joda.time.chrono.BasicSingleEraDateTimeField,<init>,51,/src/main/java/org/joda/time/chrono/BasicSingleEraDateTimeField.java,super(DateTimeFieldType.era());
2,org.joda.time.chrono.BasicSingleEraDateTimeField,<init>,52,/src/main/java/org/joda/time/chrono/BasicSingleEraDateTimeField.java,iEraText = text;
2,org.joda.time.chrono.BasicSingleEraDateTimeField,<init>,53,/src/main/java/org/joda/time/chrono/BasicSingleEraDateTimeField.java,}
2,org.joda.time.chrono.BasicSingleEraDateTimeField,getDurationField,106,/src/main/java/org/joda/time/chrono/BasicSingleEraDateTimeField.java,return UnsupportedDurationField.getInstance(DurationFieldType.eras());
2,org.joda.time.chrono.BasicSingleEraDateTimeField,getRangeDurationField,111,/src/main/java/org/joda/time/chrono/BasicSingleEraDateTimeField.java,return null;
2,org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField,<init>,43,/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,"super(DateTimeFieldType.weekOfWeekyear(), weeks);"
2,org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField,<init>,44,/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,iChronology = chronology;
2,org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField,<init>,45,/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,}
2,org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField,getRangeDurationField,59,/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,return iChronology.weekyears();
2,org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField,roundFloor,66,/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java,return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY)
2,org.joda.time.chrono.BasicWeekyearDateTimeField,<init>,45,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,"super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());"
2,org.joda.time.chrono.BasicWeekyearDateTimeField,<init>,46,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,iChronology = chronology;
2,org.joda.time.chrono.BasicWeekyearDateTimeField,<init>,47,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,}
2,org.joda.time.chrono.BasicWeekyearDateTimeField,add,73,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,if (years == 0) {
2,org.joda.time.chrono.BasicWeekyearDateTimeField,add,76,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,"return set(instant, get(instant) + years);"
2,org.joda.time.chrono.BasicWeekyearDateTimeField,get,61,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,return iChronology.getWeekyear(instant);
2,org.joda.time.chrono.BasicWeekyearDateTimeField,getLeapDurationField,221,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,return iChronology.weeks();
2,org.joda.time.chrono.BasicWeekyearDateTimeField,getMaximumValue,229,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,return iChronology.getMaxYear();
2,org.joda.time.chrono.BasicWeekyearDateTimeField,getMinimumValue,225,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,return iChronology.getMinYear();
2,org.joda.time.chrono.BasicWeekyearDateTimeField,getRangeDurationField,209,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,return null;
2,org.joda.time.chrono.BasicWeekyearDateTimeField,roundFloor,235,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,instant = iChronology.weekOfWeekyear().roundFloor(instant);
2,org.joda.time.chrono.BasicWeekyearDateTimeField,roundFloor,236,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,int wow = iChronology.getWeekOfWeekyear(instant);
2,org.joda.time.chrono.BasicWeekyearDateTimeField,roundFloor,237,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,if (wow > 1) {
2,org.joda.time.chrono.BasicWeekyearDateTimeField,roundFloor,238,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);
2,org.joda.time.chrono.BasicWeekyearDateTimeField,roundFloor,240,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,return instant;
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,129,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,"FieldUtils.verifyValueBounds(this, Math.abs(year),"
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,134,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,int thisWeekyear = get( instant );
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,135,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,if ( thisWeekyear == year ) {
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,141,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,int thisDow = iChronology.getDayOfWeek(instant);
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,145,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,146,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,int weeksInToYear = iChronology.getWeeksInYear( year );
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,147,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,155,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,int setToWeek = iChronology.getWeekOfWeekyear(instant);
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,156,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,if ( setToWeek > maxOutWeeks ) {
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,163,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,long workInstant = instant; // Get a copy
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,169,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,"workInstant = iChronology.setYear( workInstant, year );"
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,174,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,int workWoyYear = get( workInstant );
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,180,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,if ( workWoyYear < year ) {
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,182,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,} else if ( workWoyYear > year ) {
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,190,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,192,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,workInstant = workInstant + (setToWeek - currentWoyWeek)
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,201,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,"workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );"
2,org.joda.time.chrono.BasicWeekyearDateTimeField,set,205,/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java,return workInstant;
2,org.joda.time.chrono.BasicYearDateTimeField,<init>,46,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,"super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());"
2,org.joda.time.chrono.BasicYearDateTimeField,<init>,47,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,iChronology = chronology;
2,org.joda.time.chrono.BasicYearDateTimeField,<init>,48,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,}
2,org.joda.time.chrono.BasicYearDateTimeField,get,55,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return iChronology.getYear(instant);
2,org.joda.time.chrono.BasicYearDateTimeField,getLeapDurationField,112,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return iChronology.days();
2,org.joda.time.chrono.BasicYearDateTimeField,getMaximumValue,120,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return iChronology.getMaxYear();
2,org.joda.time.chrono.BasicYearDateTimeField,getMinimumValue,116,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return iChronology.getMinYear();
2,org.joda.time.chrono.BasicYearDateTimeField,getRangeDurationField,96,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return null;
2,org.joda.time.chrono.BasicYearDateTimeField,roundCeiling,128,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,int year = get(instant);
2,org.joda.time.chrono.BasicYearDateTimeField,roundCeiling,129,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,long yearStartMillis = iChronology.getYearMillis(year);
2,org.joda.time.chrono.BasicYearDateTimeField,roundCeiling,130,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,if (instant != yearStartMillis) {
2,org.joda.time.chrono.BasicYearDateTimeField,roundCeiling,132,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,instant = iChronology.getYearMillis(year + 1);
2,org.joda.time.chrono.BasicYearDateTimeField,roundCeiling,134,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,return instant;
2,org.joda.time.chrono.BasicYearDateTimeField,set,83,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,FieldUtils.verifyValueBounds
2,org.joda.time.chrono.BasicYearDateTimeField,set,85,/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java,"return iChronology.setYear(instant, year);"
2,org.joda.time.chrono.BuddhistChronology,<clinit>,67,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,"private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");"
2,org.joda.time.chrono.BuddhistChronology,<clinit>,73,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,"private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();"
2,org.joda.time.chrono.BuddhistChronology,<clinit>,76,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);
2,org.joda.time.chrono.BuddhistChronology,<init>,133,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,"super(base, param);"
2,org.joda.time.chrono.BuddhistChronology,<init>,134,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,}
2,org.joda.time.chrono.BuddhistChronology,assemble,217,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,if (getParam() == null) {
2,org.joda.time.chrono.BuddhistChronology,assemble,219,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());
2,org.joda.time.chrono.BuddhistChronology,assemble,222,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,DateTimeField field = fields.year;
2,org.joda.time.chrono.BuddhistChronology,assemble,223,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,fields.year = new OffsetDateTimeField(
2,org.joda.time.chrono.BuddhistChronology,assemble,227,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,field = fields.yearOfEra;
2,org.joda.time.chrono.BuddhistChronology,assemble,228,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,fields.yearOfEra = new DelegatedDateTimeField(
2,org.joda.time.chrono.BuddhistChronology,assemble,232,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,field = fields.weekyear;
2,org.joda.time.chrono.BuddhistChronology,assemble,233,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,fields.weekyear = new OffsetDateTimeField(
2,org.joda.time.chrono.BuddhistChronology,assemble,236,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,"field = new OffsetDateTimeField(fields.yearOfEra, 99);"
2,org.joda.time.chrono.BuddhistChronology,assemble,237,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,fields.centuryOfEra = new DividedDateTimeField(
2,org.joda.time.chrono.BuddhistChronology,assemble,239,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,fields.centuries = fields.centuryOfEra.getDurationField();
2,org.joda.time.chrono.BuddhistChronology,assemble,241,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,field = new RemainderDateTimeField(
2,org.joda.time.chrono.BuddhistChronology,assemble,243,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,fields.yearOfCentury = new OffsetDateTimeField(
2,org.joda.time.chrono.BuddhistChronology,assemble,246,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,field = new RemainderDateTimeField(
2,org.joda.time.chrono.BuddhistChronology,assemble,248,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,fields.weekyearOfCentury = new OffsetDateTimeField(
2,org.joda.time.chrono.BuddhistChronology,assemble,251,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,fields.era = ERA_FIELD;
2,org.joda.time.chrono.BuddhistChronology,assemble,253,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,}
2,org.joda.time.chrono.BuddhistChronology,getInstance,106,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,if (zone == null) {
2,org.joda.time.chrono.BuddhistChronology,getInstance,110,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,synchronized (cCache) {
2,org.joda.time.chrono.BuddhistChronology,getInstance,111,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,chrono = cCache.get(zone);
2,org.joda.time.chrono.BuddhistChronology,getInstance,112,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,if (chrono == null) {
2,org.joda.time.chrono.BuddhistChronology,getInstance,114,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,"chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);"
2,org.joda.time.chrono.BuddhistChronology,getInstance,116,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,"DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);"
2,org.joda.time.chrono.BuddhistChronology,getInstance,117,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,"chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");"
2,org.joda.time.chrono.BuddhistChronology,getInstance,118,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,"cCache.put(zone, chrono);"
2,org.joda.time.chrono.BuddhistChronology,getInstance,120,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,}
2,org.joda.time.chrono.BuddhistChronology,getInstance,121,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,return chrono;
2,org.joda.time.chrono.BuddhistChronology,getInstanceUTC,86,/src/main/java/org/joda/time/chrono/BuddhistChronology.java,return INSTANCE_UTC;
2,org.joda.time.chrono.CopticChronology,<clinit>,63,/src/main/java/org/joda/time/chrono/CopticChronology.java,"private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");"
2,org.joda.time.chrono.CopticChronology,<clinit>,72,/src/main/java/org/joda/time/chrono/CopticChronology.java,"private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();"
2,org.joda.time.chrono.CopticChronology,<clinit>,78,/src/main/java/org/joda/time/chrono/CopticChronology.java,INSTANCE_UTC = getInstance(DateTimeZone.UTC);
2,org.joda.time.chrono.CopticChronology,<clinit>,79,/src/main/java/org/joda/time/chrono/CopticChronology.java,}
2,org.joda.time.chrono.CopticChronology,<init>,161,/src/main/java/org/joda/time/chrono/CopticChronology.java,"super(base, param, minDaysInFirstWeek);"
2,org.joda.time.chrono.CopticChronology,<init>,162,/src/main/java/org/joda/time/chrono/CopticChronology.java,}
2,org.joda.time.chrono.CopticChronology,assemble,248,/src/main/java/org/joda/time/chrono/CopticChronology.java,if (getBase() == null) {
2,org.joda.time.chrono.CopticChronology,assemble,249,/src/main/java/org/joda/time/chrono/CopticChronology.java,super.assemble(fields);
2,org.joda.time.chrono.CopticChronology,assemble,252,/src/main/java/org/joda/time/chrono/CopticChronology.java,"fields.year = new SkipDateTimeField(this, fields.year);"
2,org.joda.time.chrono.CopticChronology,assemble,253,/src/main/java/org/joda/time/chrono/CopticChronology.java,"fields.weekyear = new SkipDateTimeField(this, fields.weekyear);"
2,org.joda.time.chrono.CopticChronology,assemble,255,/src/main/java/org/joda/time/chrono/CopticChronology.java,fields.era = ERA_FIELD;
2,org.joda.time.chrono.CopticChronology,assemble,256,/src/main/java/org/joda/time/chrono/CopticChronology.java,"fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);"
2,org.joda.time.chrono.CopticChronology,assemble,257,/src/main/java/org/joda/time/chrono/CopticChronology.java,fields.months = fields.monthOfYear.getDurationField();
2,org.joda.time.chrono.CopticChronology,assemble,259,/src/main/java/org/joda/time/chrono/CopticChronology.java,}
2,org.joda.time.chrono.CopticChronology,calculateFirstDayOfYearMillis,209,/src/main/java/org/joda/time/chrono/CopticChronology.java,int relativeYear = year - 1687;
2,org.joda.time.chrono.CopticChronology,calculateFirstDayOfYearMillis,211,/src/main/java/org/joda/time/chrono/CopticChronology.java,if (relativeYear <= 0) {
2,org.joda.time.chrono.CopticChronology,calculateFirstDayOfYearMillis,214,/src/main/java/org/joda/time/chrono/CopticChronology.java,leapYears = (relativeYear + 3) >> 2;
2,org.joda.time.chrono.CopticChronology,calculateFirstDayOfYearMillis,223,/src/main/java/org/joda/time/chrono/CopticChronology.java,long millis = (relativeYear * 365L + leapYears)
2,org.joda.time.chrono.CopticChronology,calculateFirstDayOfYearMillis,228,/src/main/java/org/joda/time/chrono/CopticChronology.java,return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;
2,org.joda.time.chrono.CopticChronology,getInstance,108,/src/main/java/org/joda/time/chrono/CopticChronology.java,"return getInstance(zone, 4);"
2,org.joda.time.chrono.CopticChronology,getInstance,119,/src/main/java/org/joda/time/chrono/CopticChronology.java,if (zone == null) {
2,org.joda.time.chrono.CopticChronology,getInstance,123,/src/main/java/org/joda/time/chrono/CopticChronology.java,synchronized (cCache) {
2,org.joda.time.chrono.CopticChronology,getInstance,124,/src/main/java/org/joda/time/chrono/CopticChronology.java,CopticChronology[] chronos = cCache.get(zone);
2,org.joda.time.chrono.CopticChronology,getInstance,125,/src/main/java/org/joda/time/chrono/CopticChronology.java,if (chronos == null) {
2,org.joda.time.chrono.CopticChronology,getInstance,126,/src/main/java/org/joda/time/chrono/CopticChronology.java,chronos = new CopticChronology[7];
2,org.joda.time.chrono.CopticChronology,getInstance,127,/src/main/java/org/joda/time/chrono/CopticChronology.java,"cCache.put(zone, chronos);"
2,org.joda.time.chrono.CopticChronology,getInstance,130,/src/main/java/org/joda/time/chrono/CopticChronology.java,chrono = chronos[minDaysInFirstWeek - 1];
2,org.joda.time.chrono.CopticChronology,getInstance,134,/src/main/java/org/joda/time/chrono/CopticChronology.java,}
2,org.joda.time.chrono.CopticChronology,getInstance,135,/src/main/java/org/joda/time/chrono/CopticChronology.java,if (chrono == null) {
2,org.joda.time.chrono.CopticChronology,getInstance,136,/src/main/java/org/joda/time/chrono/CopticChronology.java,if (zone == DateTimeZone.UTC) {
2,org.joda.time.chrono.CopticChronology,getInstance,138,/src/main/java/org/joda/time/chrono/CopticChronology.java,"chrono = new CopticChronology(null, null, minDaysInFirstWeek);"
2,org.joda.time.chrono.CopticChronology,getInstance,140,/src/main/java/org/joda/time/chrono/CopticChronology.java,"DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);"
2,org.joda.time.chrono.CopticChronology,getInstance,141,/src/main/java/org/joda/time/chrono/CopticChronology.java,chrono = new CopticChronology
2,org.joda.time.chrono.CopticChronology,getInstance,144,/src/main/java/org/joda/time/chrono/CopticChronology.java,} else {
2,org.joda.time.chrono.CopticChronology,getInstance,145,/src/main/java/org/joda/time/chrono/CopticChronology.java,"chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);"
2,org.joda.time.chrono.CopticChronology,getInstance,146,/src/main/java/org/joda/time/chrono/CopticChronology.java,chrono = new CopticChronology
2,org.joda.time.chrono.CopticChronology,getInstance,149,/src/main/java/org/joda/time/chrono/CopticChronology.java,chronos[minDaysInFirstWeek - 1] = chrono;
2,org.joda.time.chrono.CopticChronology,getInstance,151,/src/main/java/org/joda/time/chrono/CopticChronology.java,}
2,org.joda.time.chrono.CopticChronology,getInstance,152,/src/main/java/org/joda/time/chrono/CopticChronology.java,return chrono;
2,org.joda.time.chrono.CopticChronology,getInstanceUTC,89,/src/main/java/org/joda/time/chrono/CopticChronology.java,return INSTANCE_UTC;
2,org.joda.time.chrono.CopticChronology,getMaxYear,238,/src/main/java/org/joda/time/chrono/CopticChronology.java,return MAX_YEAR;
2,org.joda.time.chrono.CopticChronology,getMinYear,233,/src/main/java/org/joda/time/chrono/CopticChronology.java,return MIN_YEAR;
2,org.joda.time.chrono.CopticChronology,getZone,51,/src/main/java/org/joda/time/chrono/CopticChronology.java,public final class CopticChronology extends BasicFixedMonthChronology {
2,org.joda.time.chrono.CopticChronology,withUTC,184,/src/main/java/org/joda/time/chrono/CopticChronology.java,return INSTANCE_UTC;
2,org.joda.time.chrono.GJChronology,<clinit>,106,/src/main/java/org/joda/time/chrono/GJChronology.java,static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);
2,org.joda.time.chrono.GJChronology,<clinit>,109,/src/main/java/org/joda/time/chrono/GJChronology.java,"private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();"
2,org.joda.time.chrono.GJChronology,<init>,284,/src/main/java/org/joda/time/chrono/GJChronology.java,"super(base, new Object[] {julian, gregorian, cutoverInstant});"
2,org.joda.time.chrono.GJChronology,<init>,285,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology,<init>,274,/src/main/java/org/joda/time/chrono/GJChronology.java,"super(null, new Object[] {julian, gregorian, cutoverInstant});"
2,org.joda.time.chrono.GJChronology,<init>,275,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology,access$100,75,/src/main/java/org/joda/time/chrono/GJChronology.java,public final class GJChronology extends AssembledChronology {
2,org.joda.time.chrono.GJChronology,assemble,478,/src/main/java/org/joda/time/chrono/GJChronology.java,Object[] params = (Object[])getParam();
2,org.joda.time.chrono.GJChronology,assemble,480,/src/main/java/org/joda/time/chrono/GJChronology.java,JulianChronology julian = (JulianChronology)params[0];
2,org.joda.time.chrono.GJChronology,assemble,481,/src/main/java/org/joda/time/chrono/GJChronology.java,GregorianChronology gregorian = (GregorianChronology)params[1];
2,org.joda.time.chrono.GJChronology,assemble,482,/src/main/java/org/joda/time/chrono/GJChronology.java,Instant cutoverInstant = (Instant)params[2];
2,org.joda.time.chrono.GJChronology,assemble,483,/src/main/java/org/joda/time/chrono/GJChronology.java,iCutoverMillis = cutoverInstant.getMillis();
2,org.joda.time.chrono.GJChronology,assemble,485,/src/main/java/org/joda/time/chrono/GJChronology.java,iJulianChronology = julian;
2,org.joda.time.chrono.GJChronology,assemble,486,/src/main/java/org/joda/time/chrono/GJChronology.java,iGregorianChronology = gregorian;
2,org.joda.time.chrono.GJChronology,assemble,487,/src/main/java/org/joda/time/chrono/GJChronology.java,iCutoverInstant = cutoverInstant;
2,org.joda.time.chrono.GJChronology,assemble,489,/src/main/java/org/joda/time/chrono/GJChronology.java,if (getBase() != null) {
2,org.joda.time.chrono.GJChronology,assemble,490,/src/main/java/org/joda/time/chrono/GJChronology.java,return;
2,org.joda.time.chrono.GJChronology,assemble,493,/src/main/java/org/joda/time/chrono/GJChronology.java,if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {
2,org.joda.time.chrono.GJChronology,assemble,498,/src/main/java/org/joda/time/chrono/GJChronology.java,iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);
2,org.joda.time.chrono.GJChronology,assemble,504,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.copyFieldsFrom(gregorian);
2,org.joda.time.chrono.GJChronology,assemble,510,/src/main/java/org/joda/time/chrono/GJChronology.java,if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {
2,org.joda.time.chrono.GJChronology,assemble,514,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,515,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,516,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,517,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,518,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,519,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,520,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,521,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,522,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,523,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),"
2,org.joda.time.chrono.GJChronology,assemble,525,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,530,/src/main/java/org/joda/time/chrono/GJChronology.java,"fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);"
2,org.joda.time.chrono.GJChronology,assemble,537,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.year = new ImpreciseCutoverField(
2,org.joda.time.chrono.GJChronology,assemble,539,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.years = fields.year.getDurationField();
2,org.joda.time.chrono.GJChronology,assemble,540,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.yearOfEra = new ImpreciseCutoverField(
2,org.joda.time.chrono.GJChronology,assemble,543,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.centuryOfEra = new ImpreciseCutoverField(
2,org.joda.time.chrono.GJChronology,assemble,545,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.centuries = fields.centuryOfEra.getDurationField();
2,org.joda.time.chrono.GJChronology,assemble,547,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.yearOfCentury = new ImpreciseCutoverField(
2,org.joda.time.chrono.GJChronology,assemble,550,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.monthOfYear = new ImpreciseCutoverField(
2,org.joda.time.chrono.GJChronology,assemble,552,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.months = fields.monthOfYear.getDurationField();
2,org.joda.time.chrono.GJChronology,assemble,554,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.weekyear = new ImpreciseCutoverField(
2,org.joda.time.chrono.GJChronology,assemble,556,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.weekyears = fields.weekyear.getDurationField();
2,org.joda.time.chrono.GJChronology,assemble,557,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.weekyearOfCentury = new ImpreciseCutoverField(
2,org.joda.time.chrono.GJChronology,assemble,567,/src/main/java/org/joda/time/chrono/GJChronology.java,long cutover = gregorian.year().roundCeiling(iCutoverMillis);
2,org.joda.time.chrono.GJChronology,assemble,568,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.dayOfYear = new CutoverField(
2,org.joda.time.chrono.GJChronology,assemble,573,/src/main/java/org/joda/time/chrono/GJChronology.java,long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);
2,org.joda.time.chrono.GJChronology,assemble,574,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.weekOfWeekyear = new CutoverField(
2,org.joda.time.chrono.GJChronology,assemble,581,/src/main/java/org/joda/time/chrono/GJChronology.java,CutoverField cf = new CutoverField
2,org.joda.time.chrono.GJChronology,assemble,583,/src/main/java/org/joda/time/chrono/GJChronology.java,cf.iRangeDurationField = fields.months;
2,org.joda.time.chrono.GJChronology,assemble,584,/src/main/java/org/joda/time/chrono/GJChronology.java,fields.dayOfMonth = cf;
2,org.joda.time.chrono.GJChronology,assemble,586,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology,convertByYear,84,/src/main/java/org/joda/time/chrono/GJChronology.java,return to.getDateTimeMillis
2,org.joda.time.chrono.GJChronology,getGregorianCutover,400,/src/main/java/org/joda/time/chrono/GJChronology.java,return iCutoverInstant;
2,org.joda.time.chrono.GJChronology,getInstance,174,/src/main/java/org/joda/time/chrono/GJChronology.java,"return getInstance(zone, gregorianCutover, 4);"
2,org.joda.time.chrono.GJChronology,getInstance,190,/src/main/java/org/joda/time/chrono/GJChronology.java,zone = DateTimeUtils.getZone(zone);
2,org.joda.time.chrono.GJChronology,getInstance,192,/src/main/java/org/joda/time/chrono/GJChronology.java,if (gregorianCutover == null) {
2,org.joda.time.chrono.GJChronology,getInstance,193,/src/main/java/org/joda/time/chrono/GJChronology.java,cutoverInstant = DEFAULT_CUTOVER;
2,org.joda.time.chrono.GJChronology,getInstance,195,/src/main/java/org/joda/time/chrono/GJChronology.java,cutoverInstant = gregorianCutover.toInstant();
2,org.joda.time.chrono.GJChronology,getInstance,196,/src/main/java/org/joda/time/chrono/GJChronology.java,"LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));"
2,org.joda.time.chrono.GJChronology,getInstance,197,/src/main/java/org/joda/time/chrono/GJChronology.java,if (cutoverDate.getYear() <= 0) {
2,org.joda.time.chrono.GJChronology,getInstance,203,/src/main/java/org/joda/time/chrono/GJChronology.java,synchronized (cCache) {
2,org.joda.time.chrono.GJChronology,getInstance,204,/src/main/java/org/joda/time/chrono/GJChronology.java,ArrayList<GJChronology> chronos = cCache.get(zone);
2,org.joda.time.chrono.GJChronology,getInstance,205,/src/main/java/org/joda/time/chrono/GJChronology.java,if (chronos == null) {
2,org.joda.time.chrono.GJChronology,getInstance,206,/src/main/java/org/joda/time/chrono/GJChronology.java,chronos = new ArrayList<GJChronology>(2);
2,org.joda.time.chrono.GJChronology,getInstance,207,/src/main/java/org/joda/time/chrono/GJChronology.java,"cCache.put(zone, chronos);"
2,org.joda.time.chrono.GJChronology,getInstance,209,/src/main/java/org/joda/time/chrono/GJChronology.java,for (int i = chronos.size(); --i >= 0;) {
2,org.joda.time.chrono.GJChronology,getInstance,210,/src/main/java/org/joda/time/chrono/GJChronology.java,chrono = chronos.get(i);
2,org.joda.time.chrono.GJChronology,getInstance,211,/src/main/java/org/joda/time/chrono/GJChronology.java,if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&
2,org.joda.time.chrono.GJChronology,getInstance,214,/src/main/java/org/joda/time/chrono/GJChronology.java,return chrono;
2,org.joda.time.chrono.GJChronology,getInstance,218,/src/main/java/org/joda/time/chrono/GJChronology.java,if (zone == DateTimeZone.UTC) {
2,org.joda.time.chrono.GJChronology,getInstance,219,/src/main/java/org/joda/time/chrono/GJChronology.java,chrono = new GJChronology
2,org.joda.time.chrono.GJChronology,getInstance,224,/src/main/java/org/joda/time/chrono/GJChronology.java,"chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);"
2,org.joda.time.chrono.GJChronology,getInstance,225,/src/main/java/org/joda/time/chrono/GJChronology.java,chrono = new GJChronology
2,org.joda.time.chrono.GJChronology,getInstance,231,/src/main/java/org/joda/time/chrono/GJChronology.java,chronos.add(chrono);
2,org.joda.time.chrono.GJChronology,getInstance,232,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology,getInstance,233,/src/main/java/org/joda/time/chrono/GJChronology.java,return chrono;
2,org.joda.time.chrono.GJChronology,getMinimumDaysInFirstWeek,409,/src/main/java/org/joda/time/chrono/GJChronology.java,return iGregorianChronology.getMinimumDaysInFirstWeek();
2,org.joda.time.chrono.GJChronology,getZone,296,/src/main/java/org/joda/time/chrono/GJChronology.java,if ((base = getBase()) != null) {
2,org.joda.time.chrono.GJChronology,getZone,299,/src/main/java/org/joda/time/chrono/GJChronology.java,return DateTimeZone.UTC;
2,org.joda.time.chrono.GJChronology,gregorianToJulianByYear,593,/src/main/java/org/joda/time/chrono/GJChronology.java,"return convertByYear(instant, iGregorianChronology, iJulianChronology);"
2,org.joda.time.chrono.GJChronology,julianToGregorianByYear,589,/src/main/java/org/joda/time/chrono/GJChronology.java,"return convertByYear(instant, iJulianChronology, iGregorianChronology);"
2,org.joda.time.chrono.GJChronology,withUTC,310,/src/main/java/org/joda/time/chrono/GJChronology.java,return withZone(DateTimeZone.UTC);
2,org.joda.time.chrono.GJChronology,withZone,320,/src/main/java/org/joda/time/chrono/GJChronology.java,if (zone == null) {
2,org.joda.time.chrono.GJChronology,withZone,323,/src/main/java/org/joda/time/chrono/GJChronology.java,if (zone == getZone()) {
2,org.joda.time.chrono.GJChronology,withZone,324,/src/main/java/org/joda/time/chrono/GJChronology.java,return this;
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,627,/src/main/java/org/joda/time/chrono/GJChronology.java,"this(julianField, gregorianField, cutoverMillis, false);"
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,628,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,638,/src/main/java/org/joda/time/chrono/GJChronology.java,"this(julianField, gregorianField, null, cutoverMillis, convertByWeekyear);"
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,639,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,649,/src/main/java/org/joda/time/chrono/GJChronology.java,"DurationField rangeField, long cutoverMillis, boolean convertByWeekyear) {"
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,650,/src/main/java/org/joda/time/chrono/GJChronology.java,super(gregorianField.getType());
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,651,/src/main/java/org/joda/time/chrono/GJChronology.java,iJulianField = julianField;
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,652,/src/main/java/org/joda/time/chrono/GJChronology.java,iGregorianField = gregorianField;
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,653,/src/main/java/org/joda/time/chrono/GJChronology.java,iCutover = cutoverMillis;
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,654,/src/main/java/org/joda/time/chrono/GJChronology.java,iConvertByWeekyear = convertByWeekyear;
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,657,/src/main/java/org/joda/time/chrono/GJChronology.java,iDurationField = gregorianField.getDurationField();
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,658,/src/main/java/org/joda/time/chrono/GJChronology.java,if (rangeField == null) {
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,659,/src/main/java/org/joda/time/chrono/GJChronology.java,rangeField = gregorianField.getRangeDurationField();
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,660,/src/main/java/org/joda/time/chrono/GJChronology.java,if (rangeField == null) {
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,661,/src/main/java/org/joda/time/chrono/GJChronology.java,rangeField = julianField.getRangeDurationField();
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,664,/src/main/java/org/joda/time/chrono/GJChronology.java,iRangeDurationField = rangeField;
2,org.joda.time.chrono.GJChronology$CutoverField,<init>,665,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology$CutoverField,get,672,/src/main/java/org/joda/time/chrono/GJChronology.java,if (instant >= iCutover) {
2,org.joda.time.chrono.GJChronology$CutoverField,get,675,/src/main/java/org/joda/time/chrono/GJChronology.java,return iJulianField.get(instant);
2,org.joda.time.chrono.GJChronology$CutoverField,getDurationField,792,/src/main/java/org/joda/time/chrono/GJChronology.java,return iDurationField;
2,org.joda.time.chrono.GJChronology$CutoverField,getLeapDurationField,816,/src/main/java/org/joda/time/chrono/GJChronology.java,return iGregorianField.getLeapDurationField();
2,org.joda.time.chrono.GJChronology$CutoverField,getMaximumValue,854,/src/main/java/org/joda/time/chrono/GJChronology.java,return iGregorianField.getMaximumValue();
2,org.joda.time.chrono.GJChronology$CutoverField,getMinimumValue,823,/src/main/java/org/joda/time/chrono/GJChronology.java,return iJulianField.getMinimumValue();
2,org.joda.time.chrono.GJChronology$CutoverField,getRangeDurationField,796,/src/main/java/org/joda/time/chrono/GJChronology.java,return iRangeDurationField;
2,org.joda.time.chrono.GJChronology$CutoverField,gregorianToJulian,940,/src/main/java/org/joda/time/chrono/GJChronology.java,if (iConvertByWeekyear) {
2,org.joda.time.chrono.GJChronology$CutoverField,gregorianToJulian,943,/src/main/java/org/joda/time/chrono/GJChronology.java,return gregorianToJulianByYear(instant);
2,org.joda.time.chrono.GJChronology$CutoverField,set,738,/src/main/java/org/joda/time/chrono/GJChronology.java,if (instant >= iCutover) {
2,org.joda.time.chrono.GJChronology$CutoverField,set,739,/src/main/java/org/joda/time/chrono/GJChronology.java,"instant = iGregorianField.set(instant, value);"
2,org.joda.time.chrono.GJChronology$CutoverField,set,740,/src/main/java/org/joda/time/chrono/GJChronology.java,if (instant < iCutover) {
2,org.joda.time.chrono.GJChronology$CutoverField,set,742,/src/main/java/org/joda/time/chrono/GJChronology.java,if (instant + iGapDuration < iCutover) {
2,org.joda.time.chrono.GJChronology$CutoverField,set,743,/src/main/java/org/joda/time/chrono/GJChronology.java,instant = gregorianToJulian(instant);
2,org.joda.time.chrono.GJChronology$CutoverField,set,746,/src/main/java/org/joda/time/chrono/GJChronology.java,if (get(instant) != value) {
2,org.joda.time.chrono.GJChronology$CutoverField,set,752,/src/main/java/org/joda/time/chrono/GJChronology.java,"instant = iJulianField.set(instant, value);"
2,org.joda.time.chrono.GJChronology$CutoverField,set,753,/src/main/java/org/joda/time/chrono/GJChronology.java,if (instant >= iCutover) {
2,org.joda.time.chrono.GJChronology$CutoverField,set,765,/src/main/java/org/joda/time/chrono/GJChronology.java,return instant;
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,963,/src/main/java/org/joda/time/chrono/GJChronology.java,"this(julianField, gregorianField, null, cutoverMillis, false);"
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,964,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,974,/src/main/java/org/joda/time/chrono/GJChronology.java,"this(julianField, gregorianField, durationField, cutoverMillis, false);"
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,975,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,997,/src/main/java/org/joda/time/chrono/GJChronology.java,{
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,998,/src/main/java/org/joda/time/chrono/GJChronology.java,"super(julianField, gregorianField, cutoverMillis, convertByWeekyear);"
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,999,/src/main/java/org/joda/time/chrono/GJChronology.java,if (durationField == null) {
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,1000,/src/main/java/org/joda/time/chrono/GJChronology.java,"durationField = new LinkedDurationField(iDurationField, this);"
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,1002,/src/main/java/org/joda/time/chrono/GJChronology.java,iDurationField = durationField;
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,1003,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,985,/src/main/java/org/joda/time/chrono/GJChronology.java,"this(julianField, gregorianField, durationField, cutoverMillis, false);"
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,986,/src/main/java/org/joda/time/chrono/GJChronology.java,iRangeDurationField = rangeDurationField;
2,org.joda.time.chrono.GJChronology$ImpreciseCutoverField,<init>,987,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJChronology$LinkedDurationField,<init>,1148,/src/main/java/org/joda/time/chrono/GJChronology.java,"super(durationField, durationField.getType());"
2,org.joda.time.chrono.GJChronology$LinkedDurationField,<init>,1149,/src/main/java/org/joda/time/chrono/GJChronology.java,iField = dateTimeField;
2,org.joda.time.chrono.GJChronology$LinkedDurationField,<init>,1150,/src/main/java/org/joda/time/chrono/GJChronology.java,}
2,org.joda.time.chrono.GJDayOfWeekDateTimeField,<init>,46,/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,"super(DateTimeFieldType.dayOfWeek(), days);"
2,org.joda.time.chrono.GJDayOfWeekDateTimeField,<init>,47,/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,iChronology = chronology;
2,org.joda.time.chrono.GJDayOfWeekDateTimeField,<init>,48,/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,}
2,org.joda.time.chrono.GJDayOfWeekDateTimeField,get,57,/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,return iChronology.getDayOfWeek(instant);
2,org.joda.time.chrono.GJDayOfWeekDateTimeField,getMaximumValue,113,/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,return DateTimeConstants.SUNDAY;
2,org.joda.time.chrono.GJDayOfWeekDateTimeField,getMinimumValue,104,/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,return DateTimeConstants.MONDAY;
2,org.joda.time.chrono.GJDayOfWeekDateTimeField,getRangeDurationField,95,/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,return iChronology.weeks();
2,org.joda.time.chrono.GJEraDateTimeField,<init>,47,/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java,super(DateTimeFieldType.era());
2,org.joda.time.chrono.GJEraDateTimeField,<init>,48,/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java,iChronology = chronology;
2,org.joda.time.chrono.GJEraDateTimeField,<init>,49,/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java,}
2,org.joda.time.chrono.GJEraDateTimeField,getDurationField,128,/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java,return UnsupportedDurationField.getInstance(DurationFieldType.eras());
2,org.joda.time.chrono.GJEraDateTimeField,getRangeDurationField,132,/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java,return null;
2,org.joda.time.chrono.GJMonthOfYearDateTimeField,<init>,38,/src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,"super(chronology, 2);"
2,org.joda.time.chrono.GJMonthOfYearDateTimeField,<init>,39,/src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,}
2,org.joda.time.chrono.GJYearOfEraDateTimeField,<init>,42,/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,"super(yearField, DateTimeFieldType.yearOfEra());"
2,org.joda.time.chrono.GJYearOfEraDateTimeField,<init>,43,/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,iChronology = chronology;
2,org.joda.time.chrono.GJYearOfEraDateTimeField,<init>,44,/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,}
2,org.joda.time.chrono.GJYearOfEraDateTimeField,getMaximumValue,104,/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,return getWrappedField().getMaximumValue();
2,org.joda.time.chrono.GJYearOfEraDateTimeField,getMinimumValue,100,/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,return 1;
2,org.joda.time.chrono.GJYearOfEraDateTimeField,getRangeDurationField,48,/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java,return iChronology.eras();
2,org.joda.time.chrono.GregorianChronology,<clinit>,68,/src/main/java/org/joda/time/chrono/GregorianChronology.java,"private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();"
2,org.joda.time.chrono.GregorianChronology,<clinit>,71,/src/main/java/org/joda/time/chrono/GregorianChronology.java,INSTANCE_UTC = getInstance(DateTimeZone.UTC);
2,org.joda.time.chrono.GregorianChronology,<clinit>,72,/src/main/java/org/joda/time/chrono/GregorianChronology.java,}
2,org.joda.time.chrono.GregorianChronology,<init>,148,/src/main/java/org/joda/time/chrono/GregorianChronology.java,"super(base, param, minDaysInFirstWeek);"
2,org.joda.time.chrono.GregorianChronology,<init>,149,/src/main/java/org/joda/time/chrono/GregorianChronology.java,}
2,org.joda.time.chrono.GregorianChronology,assemble,191,/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (getBase() == null) {
2,org.joda.time.chrono.GregorianChronology,assemble,192,/src/main/java/org/joda/time/chrono/GregorianChronology.java,super.assemble(fields);
2,org.joda.time.chrono.GregorianChronology,assemble,194,/src/main/java/org/joda/time/chrono/GregorianChronology.java,}
2,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,202,/src/main/java/org/joda/time/chrono/GregorianChronology.java,int leapYears = year / 100;
2,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,203,/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (year < 0) {
2,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,209,/src/main/java/org/joda/time/chrono/GregorianChronology.java,leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
2,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,211,/src/main/java/org/joda/time/chrono/GregorianChronology.java,leapYears = (year >> 2) - leapYears + (leapYears >> 2);
2,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,212,/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (isLeapYear(year)) {
2,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,213,/src/main/java/org/joda/time/chrono/GregorianChronology.java,leapYears--;
2,org.joda.time.chrono.GregorianChronology,calculateFirstDayOfYearMillis,217,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
2,org.joda.time.chrono.GregorianChronology,getApproxMillisAtEpochDividedByTwo,241,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return (1970L * MILLIS_PER_YEAR) / 2;
2,org.joda.time.chrono.GregorianChronology,getAverageMillisPerMonth,237,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return MILLIS_PER_MONTH;
2,org.joda.time.chrono.GregorianChronology,getAverageMillisPerYear,229,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return MILLIS_PER_YEAR;
2,org.joda.time.chrono.GregorianChronology,getAverageMillisPerYearDividedByTwo,233,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return MILLIS_PER_YEAR / 2;
2,org.joda.time.chrono.GregorianChronology,getInstance,100,/src/main/java/org/joda/time/chrono/GregorianChronology.java,"return getInstance(zone, 4);"
2,org.joda.time.chrono.GregorianChronology,getInstance,111,/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (zone == null) {
2,org.joda.time.chrono.GregorianChronology,getInstance,115,/src/main/java/org/joda/time/chrono/GregorianChronology.java,synchronized (cCache) {
2,org.joda.time.chrono.GregorianChronology,getInstance,116,/src/main/java/org/joda/time/chrono/GregorianChronology.java,GregorianChronology[] chronos = cCache.get(zone);
2,org.joda.time.chrono.GregorianChronology,getInstance,117,/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (chronos == null) {
2,org.joda.time.chrono.GregorianChronology,getInstance,118,/src/main/java/org/joda/time/chrono/GregorianChronology.java,chronos = new GregorianChronology[7];
2,org.joda.time.chrono.GregorianChronology,getInstance,119,/src/main/java/org/joda/time/chrono/GregorianChronology.java,"cCache.put(zone, chronos);"
2,org.joda.time.chrono.GregorianChronology,getInstance,122,/src/main/java/org/joda/time/chrono/GregorianChronology.java,chrono = chronos[minDaysInFirstWeek - 1];
2,org.joda.time.chrono.GregorianChronology,getInstance,126,/src/main/java/org/joda/time/chrono/GregorianChronology.java,}
2,org.joda.time.chrono.GregorianChronology,getInstance,127,/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (chrono == null) {
2,org.joda.time.chrono.GregorianChronology,getInstance,128,/src/main/java/org/joda/time/chrono/GregorianChronology.java,if (zone == DateTimeZone.UTC) {
2,org.joda.time.chrono.GregorianChronology,getInstance,129,/src/main/java/org/joda/time/chrono/GregorianChronology.java,"chrono = new GregorianChronology(null, null, minDaysInFirstWeek);"
2,org.joda.time.chrono.GregorianChronology,getInstance,135,/src/main/java/org/joda/time/chrono/GregorianChronology.java,chronos[minDaysInFirstWeek - 1] = chrono;
2,org.joda.time.chrono.GregorianChronology,getInstance,137,/src/main/java/org/joda/time/chrono/GregorianChronology.java,}
2,org.joda.time.chrono.GregorianChronology,getInstance,138,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return chrono;
2,org.joda.time.chrono.GregorianChronology,getInstanceUTC,81,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return INSTANCE_UTC;
2,org.joda.time.chrono.GregorianChronology,getMaxYear,225,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return MAX_YEAR;
2,org.joda.time.chrono.GregorianChronology,getMinYear,221,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return MIN_YEAR;
2,org.joda.time.chrono.GregorianChronology,getZone,45,/src/main/java/org/joda/time/chrono/GregorianChronology.java,public final class GregorianChronology extends BasicGJChronology {
2,org.joda.time.chrono.GregorianChronology,isLeapYear,197,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
2,org.joda.time.chrono.GregorianChronology,withUTC,171,/src/main/java/org/joda/time/chrono/GregorianChronology.java,return INSTANCE_UTC;
2,org.joda.time.chrono.ISOChronology,<clinit>,63,/src/main/java/org/joda/time/chrono/ISOChronology.java,"private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();"
2,org.joda.time.chrono.ISOChronology,<clinit>,65,/src/main/java/org/joda/time/chrono/ISOChronology.java,cFastCache = new ISOChronology[FAST_CACHE_SIZE];
2,org.joda.time.chrono.ISOChronology,<clinit>,66,/src/main/java/org/joda/time/chrono/ISOChronology.java,INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());
2,org.joda.time.chrono.ISOChronology,<clinit>,67,/src/main/java/org/joda/time/chrono/ISOChronology.java,"cCache.put(DateTimeZone.UTC, INSTANCE_UTC);"
2,org.joda.time.chrono.ISOChronology,<clinit>,68,/src/main/java/org/joda/time/chrono/ISOChronology.java,}
2,org.joda.time.chrono.ISOChronology,<init>,122,/src/main/java/org/joda/time/chrono/ISOChronology.java,"super(base, null);"
2,org.joda.time.chrono.ISOChronology,<init>,123,/src/main/java/org/joda/time/chrono/ISOChronology.java,}
2,org.joda.time.chrono.ISOChronology,assemble,169,/src/main/java/org/joda/time/chrono/ISOChronology.java,if (getBase().getZone() == DateTimeZone.UTC) {
2,org.joda.time.chrono.ISOChronology,assemble,171,/src/main/java/org/joda/time/chrono/ISOChronology.java,fields.centuryOfEra = new DividedDateTimeField(
2,org.joda.time.chrono.ISOChronology,assemble,173,/src/main/java/org/joda/time/chrono/ISOChronology.java,fields.centuries = fields.centuryOfEra.getDurationField();
2,org.joda.time.chrono.ISOChronology,assemble,175,/src/main/java/org/joda/time/chrono/ISOChronology.java,fields.yearOfCentury = new RemainderDateTimeField(
2,org.joda.time.chrono.ISOChronology,assemble,177,/src/main/java/org/joda/time/chrono/ISOChronology.java,fields.weekyearOfCentury = new RemainderDateTimeField(
2,org.joda.time.chrono.ISOChronology,assemble,180,/src/main/java/org/joda/time/chrono/ISOChronology.java,}
2,org.joda.time.chrono.ISOChronology,getInstance,86,/src/main/java/org/joda/time/chrono/ISOChronology.java,return getInstance(DateTimeZone.getDefault());
2,org.joda.time.chrono.ISOChronology,getInstance,96,/src/main/java/org/joda/time/chrono/ISOChronology.java,if (zone == null) {
2,org.joda.time.chrono.ISOChronology,getInstance,99,/src/main/java/org/joda/time/chrono/ISOChronology.java,int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
2,org.joda.time.chrono.ISOChronology,getInstance,100,/src/main/java/org/joda/time/chrono/ISOChronology.java,ISOChronology chrono = cFastCache[index];
2,org.joda.time.chrono.ISOChronology,getInstance,101,/src/main/java/org/joda/time/chrono/ISOChronology.java,if (chrono != null && chrono.getZone() == zone) {
2,org.joda.time.chrono.ISOChronology,getInstance,102,/src/main/java/org/joda/time/chrono/ISOChronology.java,return chrono;
2,org.joda.time.chrono.ISOChronology,getInstance,104,/src/main/java/org/joda/time/chrono/ISOChronology.java,synchronized (cCache) {
2,org.joda.time.chrono.ISOChronology,getInstance,105,/src/main/java/org/joda/time/chrono/ISOChronology.java,chrono = cCache.get(zone);
2,org.joda.time.chrono.ISOChronology,getInstance,106,/src/main/java/org/joda/time/chrono/ISOChronology.java,if (chrono == null) {
2,org.joda.time.chrono.ISOChronology,getInstance,107,/src/main/java/org/joda/time/chrono/ISOChronology.java,"chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));"
2,org.joda.time.chrono.ISOChronology,getInstance,108,/src/main/java/org/joda/time/chrono/ISOChronology.java,"cCache.put(zone, chrono);"
2,org.joda.time.chrono.ISOChronology,getInstance,110,/src/main/java/org/joda/time/chrono/ISOChronology.java,}
2,org.joda.time.chrono.ISOChronology,getInstance,111,/src/main/java/org/joda/time/chrono/ISOChronology.java,cFastCache[index] = chrono;
2,org.joda.time.chrono.ISOChronology,getInstance,112,/src/main/java/org/joda/time/chrono/ISOChronology.java,return chrono;
2,org.joda.time.chrono.ISOChronology,getInstanceUTC,77,/src/main/java/org/joda/time/chrono/ISOChronology.java,return INSTANCE_UTC;
2,org.joda.time.chrono.ISOChronology,withUTC,133,/src/main/java/org/joda/time/chrono/ISOChronology.java,return INSTANCE_UTC;
2,org.joda.time.chrono.ISOYearOfEraDateTimeField,<clinit>,42,/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();
2,org.joda.time.chrono.ISOYearOfEraDateTimeField,<init>,48,/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,"super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());"
2,org.joda.time.chrono.ISOYearOfEraDateTimeField,<init>,49,/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,}
2,org.joda.time.chrono.ISOYearOfEraDateTimeField,getMaximumValue,98,/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,return getWrappedField().getMaximumValue();
2,org.joda.time.chrono.ISOYearOfEraDateTimeField,getMinimumValue,94,/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,return 0;
2,org.joda.time.chrono.ISOYearOfEraDateTimeField,getRangeDurationField,53,/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java,return GregorianChronology.getInstanceUTC().eras();
2,org.joda.time.chrono.JulianChronology,<clinit>,71,/src/main/java/org/joda/time/chrono/JulianChronology.java,"private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();"
2,org.joda.time.chrono.JulianChronology,<clinit>,74,/src/main/java/org/joda/time/chrono/JulianChronology.java,INSTANCE_UTC = getInstance(DateTimeZone.UTC);
2,org.joda.time.chrono.JulianChronology,<clinit>,75,/src/main/java/org/joda/time/chrono/JulianChronology.java,}
2,org.joda.time.chrono.JulianChronology,<init>,162,/src/main/java/org/joda/time/chrono/JulianChronology.java,"super(base, param, minDaysInFirstWeek);"
2,org.joda.time.chrono.JulianChronology,<init>,163,/src/main/java/org/joda/time/chrono/JulianChronology.java,}
2,org.joda.time.chrono.JulianChronology,adjustYearForSet,78,/src/main/java/org/joda/time/chrono/JulianChronology.java,if (year <= 0) {
2,org.joda.time.chrono.JulianChronology,adjustYearForSet,79,/src/main/java/org/joda/time/chrono/JulianChronology.java,if (year == 0) {
2,org.joda.time.chrono.JulianChronology,adjustYearForSet,83,/src/main/java/org/joda/time/chrono/JulianChronology.java,year++;
2,org.joda.time.chrono.JulianChronology,adjustYearForSet,85,/src/main/java/org/joda/time/chrono/JulianChronology.java,return year;
2,org.joda.time.chrono.JulianChronology,assemble,265,/src/main/java/org/joda/time/chrono/JulianChronology.java,if (getBase() == null) {
2,org.joda.time.chrono.JulianChronology,assemble,266,/src/main/java/org/joda/time/chrono/JulianChronology.java,super.assemble(fields);
2,org.joda.time.chrono.JulianChronology,assemble,268,/src/main/java/org/joda/time/chrono/JulianChronology.java,"fields.year = new SkipDateTimeField(this, fields.year);"
2,org.joda.time.chrono.JulianChronology,assemble,269,/src/main/java/org/joda/time/chrono/JulianChronology.java,"fields.weekyear = new SkipDateTimeField(this, fields.weekyear);"
2,org.joda.time.chrono.JulianChronology,assemble,271,/src/main/java/org/joda/time/chrono/JulianChronology.java,}
2,org.joda.time.chrono.JulianChronology,calculateFirstDayOfYearMillis,219,/src/main/java/org/joda/time/chrono/JulianChronology.java,int relativeYear = year - 1968;
2,org.joda.time.chrono.JulianChronology,calculateFirstDayOfYearMillis,221,/src/main/java/org/joda/time/chrono/JulianChronology.java,if (relativeYear <= 0) {
2,org.joda.time.chrono.JulianChronology,calculateFirstDayOfYearMillis,224,/src/main/java/org/joda/time/chrono/JulianChronology.java,leapYears = (relativeYear + 3) >> 2;
2,org.joda.time.chrono.JulianChronology,calculateFirstDayOfYearMillis,233,/src/main/java/org/joda/time/chrono/JulianChronology.java,long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;
2,org.joda.time.chrono.JulianChronology,calculateFirstDayOfYearMillis,237,/src/main/java/org/joda/time/chrono/JulianChronology.java,return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;
2,org.joda.time.chrono.JulianChronology,getApproxMillisAtEpochDividedByTwo,261,/src/main/java/org/joda/time/chrono/JulianChronology.java,return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;
2,org.joda.time.chrono.JulianChronology,getAverageMillisPerMonth,257,/src/main/java/org/joda/time/chrono/JulianChronology.java,return MILLIS_PER_MONTH;
2,org.joda.time.chrono.JulianChronology,getAverageMillisPerYear,249,/src/main/java/org/joda/time/chrono/JulianChronology.java,return MILLIS_PER_YEAR;
2,org.joda.time.chrono.JulianChronology,getAverageMillisPerYearDividedByTwo,253,/src/main/java/org/joda/time/chrono/JulianChronology.java,return MILLIS_PER_YEAR / 2;
2,org.joda.time.chrono.JulianChronology,getDateMidnightMillis,207,/src/main/java/org/joda/time/chrono/JulianChronology.java,"return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);"
2,org.joda.time.chrono.JulianChronology,getInstance,114,/src/main/java/org/joda/time/chrono/JulianChronology.java,"return getInstance(zone, 4);"
2,org.joda.time.chrono.JulianChronology,getInstance,125,/src/main/java/org/joda/time/chrono/JulianChronology.java,if (zone == null) {
2,org.joda.time.chrono.JulianChronology,getInstance,129,/src/main/java/org/joda/time/chrono/JulianChronology.java,synchronized (cCache) {
2,org.joda.time.chrono.JulianChronology,getInstance,130,/src/main/java/org/joda/time/chrono/JulianChronology.java,JulianChronology[] chronos = cCache.get(zone);
2,org.joda.time.chrono.JulianChronology,getInstance,131,/src/main/java/org/joda/time/chrono/JulianChronology.java,if (chronos == null) {
2,org.joda.time.chrono.JulianChronology,getInstance,132,/src/main/java/org/joda/time/chrono/JulianChronology.java,chronos = new JulianChronology[7];
2,org.joda.time.chrono.JulianChronology,getInstance,133,/src/main/java/org/joda/time/chrono/JulianChronology.java,"cCache.put(zone, chronos);"
2,org.joda.time.chrono.JulianChronology,getInstance,136,/src/main/java/org/joda/time/chrono/JulianChronology.java,chrono = chronos[minDaysInFirstWeek - 1];
2,org.joda.time.chrono.JulianChronology,getInstance,140,/src/main/java/org/joda/time/chrono/JulianChronology.java,}
2,org.joda.time.chrono.JulianChronology,getInstance,141,/src/main/java/org/joda/time/chrono/JulianChronology.java,if (chrono == null) {
2,org.joda.time.chrono.JulianChronology,getInstance,142,/src/main/java/org/joda/time/chrono/JulianChronology.java,if (zone == DateTimeZone.UTC) {
2,org.joda.time.chrono.JulianChronology,getInstance,143,/src/main/java/org/joda/time/chrono/JulianChronology.java,"chrono = new JulianChronology(null, null, minDaysInFirstWeek);"
2,org.joda.time.chrono.JulianChronology,getInstance,149,/src/main/java/org/joda/time/chrono/JulianChronology.java,chronos[minDaysInFirstWeek - 1] = chrono;
2,org.joda.time.chrono.JulianChronology,getInstance,151,/src/main/java/org/joda/time/chrono/JulianChronology.java,}
2,org.joda.time.chrono.JulianChronology,getInstance,152,/src/main/java/org/joda/time/chrono/JulianChronology.java,return chrono;
2,org.joda.time.chrono.JulianChronology,getMaxYear,245,/src/main/java/org/joda/time/chrono/JulianChronology.java,return MAX_YEAR;
2,org.joda.time.chrono.JulianChronology,getMinYear,241,/src/main/java/org/joda/time/chrono/JulianChronology.java,return MIN_YEAR;
2,org.joda.time.chrono.JulianChronology,getZone,50,/src/main/java/org/joda/time/chrono/JulianChronology.java,public final class JulianChronology extends BasicGJChronology {
2,org.joda.time.chrono.JulianChronology,isLeapYear,211,/src/main/java/org/joda/time/chrono/JulianChronology.java,return (year & 3) == 0;
2,org.joda.time.chrono.LimitChronology,<init>,99,/src/main/java/org/joda/time/chrono/LimitChronology.java,"super(base, null);"
2,org.joda.time.chrono.LimitChronology,<init>,101,/src/main/java/org/joda/time/chrono/LimitChronology.java,iLowerLimit = lowerLimit;
2,org.joda.time.chrono.LimitChronology,<init>,102,/src/main/java/org/joda/time/chrono/LimitChronology.java,iUpperLimit = upperLimit;
2,org.joda.time.chrono.LimitChronology,<init>,103,/src/main/java/org/joda/time/chrono/LimitChronology.java,}
2,org.joda.time.chrono.LimitChronology,assemble,209,/src/main/java/org/joda/time/chrono/LimitChronology.java,"HashMap<Object, Object> converted = new HashMap<Object, Object>();"
2,org.joda.time.chrono.LimitChronology,assemble,213,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.eras = convertField(fields.eras, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,214,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.centuries = convertField(fields.centuries, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,215,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.years = convertField(fields.years, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,216,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.months = convertField(fields.months, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,217,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.weekyears = convertField(fields.weekyears, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,218,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.weeks = convertField(fields.weeks, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,219,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.days = convertField(fields.days, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,221,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.halfdays = convertField(fields.halfdays, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,222,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.hours = convertField(fields.hours, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,223,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.minutes = convertField(fields.minutes, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,224,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.seconds = convertField(fields.seconds, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,225,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.millis = convertField(fields.millis, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,229,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.year = convertField(fields.year, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,230,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.yearOfEra = convertField(fields.yearOfEra, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,231,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.yearOfCentury = convertField(fields.yearOfCentury, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,232,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.centuryOfEra = convertField(fields.centuryOfEra, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,233,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.era = convertField(fields.era, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,234,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.dayOfWeek = convertField(fields.dayOfWeek, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,235,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.dayOfMonth = convertField(fields.dayOfMonth, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,236,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.dayOfYear = convertField(fields.dayOfYear, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,237,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.monthOfYear = convertField(fields.monthOfYear, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,238,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,239,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.weekyear = convertField(fields.weekyear, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,240,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,242,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.millisOfSecond = convertField(fields.millisOfSecond, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,243,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.millisOfDay = convertField(fields.millisOfDay, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,244,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.secondOfMinute = convertField(fields.secondOfMinute, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,245,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.secondOfDay = convertField(fields.secondOfDay, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,246,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.minuteOfHour = convertField(fields.minuteOfHour, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,247,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.minuteOfDay = convertField(fields.minuteOfDay, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,248,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.hourOfDay = convertField(fields.hourOfDay, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,249,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,250,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,251,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,252,/src/main/java/org/joda/time/chrono/LimitChronology.java,"fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);"
2,org.joda.time.chrono.LimitChronology,assemble,253,/src/main/java/org/joda/time/chrono/LimitChronology.java,}
2,org.joda.time.chrono.LimitChronology,convertField,268,/src/main/java/org/joda/time/chrono/LimitChronology.java,if (field == null || !field.isSupported()) {
2,org.joda.time.chrono.LimitChronology,convertField,271,/src/main/java/org/joda/time/chrono/LimitChronology.java,if (converted.containsKey(field)) {
2,org.joda.time.chrono.LimitChronology,convertField,274,/src/main/java/org/joda/time/chrono/LimitChronology.java,LimitDateTimeField limitField =
2,org.joda.time.chrono.LimitChronology,convertField,279,/src/main/java/org/joda/time/chrono/LimitChronology.java,"converted.put(field, limitField);"
2,org.joda.time.chrono.LimitChronology,convertField,280,/src/main/java/org/joda/time/chrono/LimitChronology.java,return limitField;
2,org.joda.time.chrono.LimitChronology,convertField,256,/src/main/java/org/joda/time/chrono/LimitChronology.java,if (field == null || !field.isSupported()) {
2,org.joda.time.chrono.LimitChronology,convertField,257,/src/main/java/org/joda/time/chrono/LimitChronology.java,return field;
2,org.joda.time.chrono.LimitChronology,convertField,259,/src/main/java/org/joda/time/chrono/LimitChronology.java,if (converted.containsKey(field)) {
2,org.joda.time.chrono.LimitChronology,convertField,260,/src/main/java/org/joda/time/chrono/LimitChronology.java,return (DurationField)converted.get(field);
2,org.joda.time.chrono.LimitChronology,convertField,262,/src/main/java/org/joda/time/chrono/LimitChronology.java,LimitDurationField limitField = new LimitDurationField(field);
2,org.joda.time.chrono.LimitChronology,convertField,263,/src/main/java/org/joda/time/chrono/LimitChronology.java,"converted.put(field, limitField);"
2,org.joda.time.chrono.LimitChronology,convertField,264,/src/main/java/org/joda/time/chrono/LimitChronology.java,return limitField;
2,org.joda.time.chrono.LimitChronology,getInstance,67,/src/main/java/org/joda/time/chrono/LimitChronology.java,if (base == null) {
2,org.joda.time.chrono.LimitChronology,getInstance,71,/src/main/java/org/joda/time/chrono/LimitChronology.java,lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();
2,org.joda.time.chrono.LimitChronology,getInstance,72,/src/main/java/org/joda/time/chrono/LimitChronology.java,upperLimit = upperLimit == null ? null : upperLimit.toDateTime();
2,org.joda.time.chrono.LimitChronology,getInstance,74,/src/main/java/org/joda/time/chrono/LimitChronology.java,if (lowerLimit != null && upperLimit != null) {
2,org.joda.time.chrono.LimitChronology,getInstance,81,/src/main/java/org/joda/time/chrono/LimitChronology.java,"return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);"
2,org.joda.time.chrono.LimitChronology$LimitDateTimeField,<init>,454,/src/main/java/org/joda/time/chrono/LimitChronology.java,DurationField leapDurationField) {
2,org.joda.time.chrono.LimitChronology$LimitDateTimeField,<init>,455,/src/main/java/org/joda/time/chrono/LimitChronology.java,"super(field, field.getType());"
2,org.joda.time.chrono.LimitChronology$LimitDateTimeField,<init>,456,/src/main/java/org/joda/time/chrono/LimitChronology.java,iDurationField = durationField;
2,org.joda.time.chrono.LimitChronology$LimitDateTimeField,<init>,457,/src/main/java/org/joda/time/chrono/LimitChronology.java,iRangeDurationField = rangeDurationField;
2,org.joda.time.chrono.LimitChronology$LimitDateTimeField,<init>,458,/src/main/java/org/joda/time/chrono/LimitChronology.java,iLeapDurationField = leapDurationField;
2,org.joda.time.chrono.LimitChronology$LimitDateTimeField,<init>,459,/src/main/java/org/joda/time/chrono/LimitChronology.java,}
2,org.joda.time.chrono.LimitChronology$LimitDateTimeField,getDurationField,524,/src/main/java/org/joda/time/chrono/LimitChronology.java,return iDurationField;
2,org.joda.time.chrono.LimitChronology$LimitDateTimeField,getLeapDurationField,542,/src/main/java/org/joda/time/chrono/LimitChronology.java,return iLeapDurationField;
2,org.joda.time.chrono.LimitChronology$LimitDateTimeField,getRangeDurationField,528,/src/main/java/org/joda/time/chrono/LimitChronology.java,return iRangeDurationField;
2,org.joda.time.chrono.LimitChronology$LimitDurationField,<init>,391,/src/main/java/org/joda/time/chrono/LimitChronology.java,LimitDurationField(DurationField field) {
2,org.joda.time.chrono.LimitChronology$LimitDurationField,<init>,392,/src/main/java/org/joda/time/chrono/LimitChronology.java,"super(field, field.getType());"
2,org.joda.time.chrono.LimitChronology$LimitDurationField,<init>,393,/src/main/java/org/joda/time/chrono/LimitChronology.java,}
2,org.joda.time.chrono.ZonedChronology,<init>,81,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"super(base, zone);"
2,org.joda.time.chrono.ZonedChronology,<init>,82,/src/main/java/org/joda/time/chrono/ZonedChronology.java,}
2,org.joda.time.chrono.ZonedChronology,assemble,150,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"HashMap<Object, Object> converted = new HashMap<Object, Object>();"
2,org.joda.time.chrono.ZonedChronology,assemble,154,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.eras = convertField(fields.eras, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,155,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.centuries = convertField(fields.centuries, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,156,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.years = convertField(fields.years, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,157,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.months = convertField(fields.months, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,158,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.weekyears = convertField(fields.weekyears, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,159,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.weeks = convertField(fields.weeks, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,160,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.days = convertField(fields.days, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,162,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.halfdays = convertField(fields.halfdays, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,163,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.hours = convertField(fields.hours, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,164,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.minutes = convertField(fields.minutes, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,165,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.seconds = convertField(fields.seconds, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,166,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.millis = convertField(fields.millis, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,170,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.year = convertField(fields.year, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,171,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.yearOfEra = convertField(fields.yearOfEra, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,172,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.yearOfCentury = convertField(fields.yearOfCentury, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,173,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.centuryOfEra = convertField(fields.centuryOfEra, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,174,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.era = convertField(fields.era, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,175,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.dayOfWeek = convertField(fields.dayOfWeek, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,176,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.dayOfMonth = convertField(fields.dayOfMonth, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,177,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.dayOfYear = convertField(fields.dayOfYear, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,178,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.monthOfYear = convertField(fields.monthOfYear, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,179,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,180,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.weekyear = convertField(fields.weekyear, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,181,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,183,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.millisOfSecond = convertField(fields.millisOfSecond, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,184,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.millisOfDay = convertField(fields.millisOfDay, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,185,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.secondOfMinute = convertField(fields.secondOfMinute, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,186,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.secondOfDay = convertField(fields.secondOfDay, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,187,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.minuteOfHour = convertField(fields.minuteOfHour, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,188,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.minuteOfDay = convertField(fields.minuteOfDay, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,189,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.hourOfDay = convertField(fields.hourOfDay, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,190,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,191,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,192,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,193,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);"
2,org.joda.time.chrono.ZonedChronology,assemble,194,/src/main/java/org/joda/time/chrono/ZonedChronology.java,}
2,org.joda.time.chrono.ZonedChronology,convertField,209,/src/main/java/org/joda/time/chrono/ZonedChronology.java,if (field == null || !field.isSupported()) {
2,org.joda.time.chrono.ZonedChronology,convertField,212,/src/main/java/org/joda/time/chrono/ZonedChronology.java,if (converted.containsKey(field)) {
2,org.joda.time.chrono.ZonedChronology,convertField,215,/src/main/java/org/joda/time/chrono/ZonedChronology.java,ZonedDateTimeField zonedField =
2,org.joda.time.chrono.ZonedChronology,convertField,220,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"converted.put(field, zonedField);"
2,org.joda.time.chrono.ZonedChronology,convertField,221,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return zonedField;
2,org.joda.time.chrono.ZonedChronology,convertField,197,/src/main/java/org/joda/time/chrono/ZonedChronology.java,if (field == null || !field.isSupported()) {
2,org.joda.time.chrono.ZonedChronology,convertField,198,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return field;
2,org.joda.time.chrono.ZonedChronology,convertField,200,/src/main/java/org/joda/time/chrono/ZonedChronology.java,if (converted.containsKey(field)) {
2,org.joda.time.chrono.ZonedChronology,convertField,201,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return (DurationField)converted.get(field);
2,org.joda.time.chrono.ZonedChronology,convertField,203,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"ZonedDurationField zonedField = new ZonedDurationField(field, getZone());"
2,org.joda.time.chrono.ZonedChronology,convertField,204,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"converted.put(field, zonedField);"
2,org.joda.time.chrono.ZonedChronology,convertField,205,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return zonedField;
2,org.joda.time.chrono.ZonedChronology,getInstance,55,/src/main/java/org/joda/time/chrono/ZonedChronology.java,if (base == null) {
2,org.joda.time.chrono.ZonedChronology,getInstance,58,/src/main/java/org/joda/time/chrono/ZonedChronology.java,base = base.withUTC();
2,org.joda.time.chrono.ZonedChronology,getInstance,59,/src/main/java/org/joda/time/chrono/ZonedChronology.java,if (base == null) {
2,org.joda.time.chrono.ZonedChronology,getInstance,62,/src/main/java/org/joda/time/chrono/ZonedChronology.java,if (zone == null) {
2,org.joda.time.chrono.ZonedChronology,getInstance,65,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"return new ZonedChronology(base, zone);"
2,org.joda.time.chrono.ZonedChronology,getZone,85,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return (DateTimeZone)getParam();
2,org.joda.time.chrono.ZonedChronology,useTimeArithmetic,71,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,<init>,404,/src/main/java/org/joda/time/chrono/ZonedChronology.java,super(field.getType());
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,<init>,405,/src/main/java/org/joda/time/chrono/ZonedChronology.java,if (!field.isSupported()) {
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,<init>,408,/src/main/java/org/joda/time/chrono/ZonedChronology.java,iField = field;
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,<init>,409,/src/main/java/org/joda/time/chrono/ZonedChronology.java,iZone = zone;
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,<init>,410,/src/main/java/org/joda/time/chrono/ZonedChronology.java,iDurationField = durationField;
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,<init>,411,/src/main/java/org/joda/time/chrono/ZonedChronology.java,iTimeField = useTimeArithmetic(durationField);
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,<init>,412,/src/main/java/org/joda/time/chrono/ZonedChronology.java,iRangeDurationField = rangeDurationField;
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,<init>,413,/src/main/java/org/joda/time/chrono/ZonedChronology.java,iLeapDurationField = leapDurationField;
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,<init>,414,/src/main/java/org/joda/time/chrono/ZonedChronology.java,}
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,get,421,/src/main/java/org/joda/time/chrono/ZonedChronology.java,long localInstant = iZone.convertUTCToLocal(instant);
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,get,422,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return iField.get(localInstant);
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,getDurationField,514,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return iDurationField;
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,getLeapDurationField,532,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return iLeapDurationField;
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,getMaximumValue,582,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return iField.getMaximumValue();
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,getMinimumValue,565,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return iField.getMinimumValue();
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,getRangeDurationField,518,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return iRangeDurationField;
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,hashCode,632,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return iField.hashCode() ^ iZone.hashCode();
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,set,480,/src/main/java/org/joda/time/chrono/ZonedChronology.java,long localInstant = iZone.convertUTCToLocal(instant);
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,set,481,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"localInstant = iField.set(localInstant, value);"
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,set,482,/src/main/java/org/joda/time/chrono/ZonedChronology.java,"long result = iZone.convertLocalToUTC(localInstant, false, instant);"
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,set,483,/src/main/java/org/joda/time/chrono/ZonedChronology.java,if (get(result) != value) {
2,org.joda.time.chrono.ZonedChronology$ZonedDateTimeField,set,489,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return result;
2,org.joda.time.chrono.ZonedChronology$ZonedDurationField,<init>,281,/src/main/java/org/joda/time/chrono/ZonedChronology.java,super(field.getType());
2,org.joda.time.chrono.ZonedChronology$ZonedDurationField,<init>,282,/src/main/java/org/joda/time/chrono/ZonedChronology.java,if (!field.isSupported()) {
2,org.joda.time.chrono.ZonedChronology$ZonedDurationField,<init>,285,/src/main/java/org/joda/time/chrono/ZonedChronology.java,iField = field;
2,org.joda.time.chrono.ZonedChronology$ZonedDurationField,<init>,286,/src/main/java/org/joda/time/chrono/ZonedChronology.java,iTimeField = useTimeArithmetic(field);
2,org.joda.time.chrono.ZonedChronology$ZonedDurationField,<init>,287,/src/main/java/org/joda/time/chrono/ZonedChronology.java,iZone = zone;
2,org.joda.time.chrono.ZonedChronology$ZonedDurationField,<init>,288,/src/main/java/org/joda/time/chrono/ZonedChronology.java,}
2,org.joda.time.chrono.ZonedChronology$ZonedDurationField,getUnitMillis,295,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return iField.getUnitMillis();
2,org.joda.time.chrono.ZonedChronology$ZonedDurationField,hashCode,378,/src/main/java/org/joda/time/chrono/ZonedChronology.java,return iField.hashCode() ^ iZone.hashCode();
2,org.joda.time.field.BaseDateTimeField,<init>,50,/src/main/java/org/joda/time/field/BaseDateTimeField.java,super();
2,org.joda.time.field.BaseDateTimeField,<init>,51,/src/main/java/org/joda/time/field/BaseDateTimeField.java,if (type == null) {
2,org.joda.time.field.BaseDateTimeField,<init>,54,/src/main/java/org/joda/time/field/BaseDateTimeField.java,iType = type;
2,org.joda.time.field.BaseDateTimeField,<init>,55,/src/main/java/org/joda/time/field/BaseDateTimeField.java,}
2,org.joda.time.field.BaseDateTimeField,getLeapDurationField,726,/src/main/java/org/joda/time/field/BaseDateTimeField.java,return null;
2,org.joda.time.field.BaseDateTimeField,getMaximumValue,792,/src/main/java/org/joda/time/field/BaseDateTimeField.java,return getMaximumValue();
2,org.joda.time.field.BaseDateTimeField,getMaximumValue,804,/src/main/java/org/joda/time/field/BaseDateTimeField.java,return getMaximumValue();
2,org.joda.time.field.BaseDateTimeField,getMaximumValue,818,/src/main/java/org/joda/time/field/BaseDateTimeField.java,return getMaximumValue(instant);
2,org.joda.time.field.BaseDateTimeField,getMinimumValue,758,/src/main/java/org/joda/time/field/BaseDateTimeField.java,return getMinimumValue();
2,org.joda.time.field.BaseDateTimeField,getMinimumValue,772,/src/main/java/org/joda/time/field/BaseDateTimeField.java,return getMinimumValue(instant);
2,org.joda.time.field.BaseDateTimeField,getType,58,/src/main/java/org/joda/time/field/BaseDateTimeField.java,return iType;
2,org.joda.time.field.BaseDateTimeField,isSupported,69,/src/main/java/org/joda/time/field/BaseDateTimeField.java,return true;
2,org.joda.time.field.BaseDateTimeField,roundCeiling,886,/src/main/java/org/joda/time/field/BaseDateTimeField.java,long newInstant = roundFloor(instant);
2,org.joda.time.field.BaseDateTimeField,roundCeiling,887,/src/main/java/org/joda/time/field/BaseDateTimeField.java,if (newInstant != instant) {
2,org.joda.time.field.BaseDateTimeField,roundCeiling,888,/src/main/java/org/joda/time/field/BaseDateTimeField.java,"instant = add(newInstant, 1);"
2,org.joda.time.field.BaseDateTimeField,roundCeiling,890,/src/main/java/org/joda/time/field/BaseDateTimeField.java,return instant;
2,org.joda.time.field.BaseDurationField,<init>,47,/src/main/java/org/joda/time/field/BaseDurationField.java,super();
2,org.joda.time.field.BaseDurationField,<init>,48,/src/main/java/org/joda/time/field/BaseDurationField.java,if (type == null) {
2,org.joda.time.field.BaseDurationField,<init>,51,/src/main/java/org/joda/time/field/BaseDurationField.java,iType = type;
2,org.joda.time.field.BaseDurationField,<init>,52,/src/main/java/org/joda/time/field/BaseDurationField.java,}
2,org.joda.time.field.BaseDurationField,compareTo,38,/src/main/java/org/joda/time/field/BaseDurationField.java,public abstract class BaseDurationField extends DurationField implements Serializable {
2,org.joda.time.field.BaseDurationField,compareTo,146,/src/main/java/org/joda/time/field/BaseDurationField.java,long otherMillis = otherField.getUnitMillis();
2,org.joda.time.field.BaseDurationField,compareTo,147,/src/main/java/org/joda/time/field/BaseDurationField.java,long thisMillis = getUnitMillis();
2,org.joda.time.field.BaseDurationField,compareTo,149,/src/main/java/org/joda/time/field/BaseDurationField.java,if (thisMillis == otherMillis) {
2,org.joda.time.field.BaseDurationField,compareTo,152,/src/main/java/org/joda/time/field/BaseDurationField.java,if (thisMillis < otherMillis) {
2,org.joda.time.field.BaseDurationField,compareTo,155,/src/main/java/org/joda/time/field/BaseDurationField.java,return 1;
2,org.joda.time.field.BaseDurationField,getType,55,/src/main/java/org/joda/time/field/BaseDurationField.java,return iType;
2,org.joda.time.field.BaseDurationField,isSupported,66,/src/main/java/org/joda/time/field/BaseDurationField.java,return true;
2,org.joda.time.field.DecoratedDateTimeField,<init>,55,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,super(type);
2,org.joda.time.field.DecoratedDateTimeField,<init>,56,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,if (field == null) {
2,org.joda.time.field.DecoratedDateTimeField,<init>,59,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,if (!field.isSupported()) {
2,org.joda.time.field.DecoratedDateTimeField,<init>,62,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,iField = field;
2,org.joda.time.field.DecoratedDateTimeField,<init>,63,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,}
2,org.joda.time.field.DecoratedDateTimeField,getDurationField,87,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,return iField.getDurationField();
2,org.joda.time.field.DecoratedDateTimeField,getMaximumValue,99,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,return iField.getMaximumValue();
2,org.joda.time.field.DecoratedDateTimeField,getMinimumValue,95,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,return iField.getMinimumValue();
2,org.joda.time.field.DecoratedDateTimeField,getRangeDurationField,91,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,return iField.getRangeDurationField();
2,org.joda.time.field.DecoratedDateTimeField,getWrappedField,71,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,return iField;
2,org.joda.time.field.DecoratedDateTimeField,set,83,/src/main/java/org/joda/time/field/DecoratedDateTimeField.java,"return iField.set(instant, value);"
2,org.joda.time.field.DecoratedDurationField,<init>,52,/src/main/java/org/joda/time/field/DecoratedDurationField.java,super(type);
2,org.joda.time.field.DecoratedDurationField,<init>,53,/src/main/java/org/joda/time/field/DecoratedDurationField.java,if (field == null) {
2,org.joda.time.field.DecoratedDurationField,<init>,56,/src/main/java/org/joda/time/field/DecoratedDurationField.java,if (!field.isSupported()) {
2,org.joda.time.field.DecoratedDurationField,<init>,59,/src/main/java/org/joda/time/field/DecoratedDurationField.java,iField = field;
2,org.joda.time.field.DecoratedDurationField,<init>,60,/src/main/java/org/joda/time/field/DecoratedDurationField.java,}
2,org.joda.time.field.DecoratedDurationField,getUnitMillis,101,/src/main/java/org/joda/time/field/DecoratedDurationField.java,return iField.getUnitMillis();
2,org.joda.time.field.DecoratedDurationField,getWrappedField,69,/src/main/java/org/joda/time/field/DecoratedDurationField.java,return iField;
2,org.joda.time.field.DelegatedDateTimeField,<init>,54,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,"this(field, null);"
2,org.joda.time.field.DelegatedDateTimeField,<init>,55,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,}
2,org.joda.time.field.DelegatedDateTimeField,<init>,64,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,"this(field, null, type);"
2,org.joda.time.field.DelegatedDateTimeField,<init>,65,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,}
2,org.joda.time.field.DelegatedDateTimeField,<init>,75,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,super();
2,org.joda.time.field.DelegatedDateTimeField,<init>,76,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,if (field == null) {
2,org.joda.time.field.DelegatedDateTimeField,<init>,79,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,iField = field;
2,org.joda.time.field.DelegatedDateTimeField,<init>,80,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,iRangeDurationField = rangeField;
2,org.joda.time.field.DelegatedDateTimeField,<init>,81,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,iType = (type == null ? field.getType() : type);
2,org.joda.time.field.DelegatedDateTimeField,<init>,82,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,}
2,org.joda.time.field.DelegatedDateTimeField,get,110,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iField.get(instant);
2,org.joda.time.field.DelegatedDateTimeField,getDurationField,206,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iField.getDurationField();
2,org.joda.time.field.DelegatedDateTimeField,getLeapDurationField,225,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iField.getLeapDurationField();
2,org.joda.time.field.DelegatedDateTimeField,getMaximumValue,245,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iField.getMaximumValue();
2,org.joda.time.field.DelegatedDateTimeField,getMinimumValue,229,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iField.getMinimumValue();
2,org.joda.time.field.DelegatedDateTimeField,getRangeDurationField,210,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,if (iRangeDurationField != null) {
2,org.joda.time.field.DelegatedDateTimeField,getRangeDurationField,211,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iRangeDurationField;
2,org.joda.time.field.DelegatedDateTimeField,getRangeDurationField,213,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iField.getRangeDurationField();
2,org.joda.time.field.DelegatedDateTimeField,getType,94,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iType;
2,org.joda.time.field.DelegatedDateTimeField,isSupported,102,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,return iField.isSupported();
2,org.joda.time.field.DelegatedDateTimeField,set,186,/src/main/java/org/joda/time/field/DelegatedDateTimeField.java,"return iField.set(instant, value);"
2,org.joda.time.field.DividedDateTimeField,<init>,58,/src/main/java/org/joda/time/field/DividedDateTimeField.java,"this(field, field.getRangeDurationField(), type, divisor);"
2,org.joda.time.field.DividedDateTimeField,<init>,59,/src/main/java/org/joda/time/field/DividedDateTimeField.java,}
2,org.joda.time.field.DividedDateTimeField,<init>,72,/src/main/java/org/joda/time/field/DividedDateTimeField.java,"super(field, type);"
2,org.joda.time.field.DividedDateTimeField,<init>,73,/src/main/java/org/joda/time/field/DividedDateTimeField.java,if (divisor < 2) {
2,org.joda.time.field.DividedDateTimeField,<init>,76,/src/main/java/org/joda/time/field/DividedDateTimeField.java,DurationField unitField = field.getDurationField();
2,org.joda.time.field.DividedDateTimeField,<init>,77,/src/main/java/org/joda/time/field/DividedDateTimeField.java,if (unitField == null) {
2,org.joda.time.field.DividedDateTimeField,<init>,80,/src/main/java/org/joda/time/field/DividedDateTimeField.java,iDurationField = new ScaledDurationField(
2,org.joda.time.field.DividedDateTimeField,<init>,83,/src/main/java/org/joda/time/field/DividedDateTimeField.java,iRangeDurationField = rangeField;
2,org.joda.time.field.DividedDateTimeField,<init>,84,/src/main/java/org/joda/time/field/DividedDateTimeField.java,iDivisor = divisor;
2,org.joda.time.field.DividedDateTimeField,<init>,85,/src/main/java/org/joda/time/field/DividedDateTimeField.java,int i = field.getMinimumValue();
2,org.joda.time.field.DividedDateTimeField,<init>,86,/src/main/java/org/joda/time/field/DividedDateTimeField.java,int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
2,org.joda.time.field.DividedDateTimeField,<init>,87,/src/main/java/org/joda/time/field/DividedDateTimeField.java,int j = field.getMaximumValue();
2,org.joda.time.field.DividedDateTimeField,<init>,88,/src/main/java/org/joda/time/field/DividedDateTimeField.java,int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
2,org.joda.time.field.DividedDateTimeField,<init>,89,/src/main/java/org/joda/time/field/DividedDateTimeField.java,iMin = min;
2,org.joda.time.field.DividedDateTimeField,<init>,90,/src/main/java/org/joda/time/field/DividedDateTimeField.java,iMax = max;
2,org.joda.time.field.DividedDateTimeField,<init>,91,/src/main/java/org/joda/time/field/DividedDateTimeField.java,}
2,org.joda.time.field.DividedDateTimeField,getDurationField,211,/src/main/java/org/joda/time/field/DividedDateTimeField.java,return iDurationField;
2,org.joda.time.field.DividedDateTimeField,getRangeDurationField,128,/src/main/java/org/joda/time/field/DividedDateTimeField.java,if (iRangeDurationField != null) {
2,org.joda.time.field.DividedDateTimeField,getRangeDurationField,129,/src/main/java/org/joda/time/field/DividedDateTimeField.java,return iRangeDurationField;
2,org.joda.time.field.DividedDateTimeField,getRangeDurationField,131,/src/main/java/org/joda/time/field/DividedDateTimeField.java,return super.getRangeDurationField();
2,org.joda.time.field.FieldUtils,verifyValueBounds,233,/src/main/java/org/joda/time/field/FieldUtils.java,if ((value < lowerBound) || (value > upperBound)) {
2,org.joda.time.field.FieldUtils,verifyValueBounds,238,/src/main/java/org/joda/time/field/FieldUtils.java,}
2,org.joda.time.field.FieldUtils,verifyValueBounds,251,/src/main/java/org/joda/time/field/FieldUtils.java,if ((value < lowerBound) || (value > upperBound)) {
2,org.joda.time.field.FieldUtils,verifyValueBounds,256,/src/main/java/org/joda/time/field/FieldUtils.java,}
2,org.joda.time.field.ImpreciseDateTimeField,<init>,56,/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,super(type);
2,org.joda.time.field.ImpreciseDateTimeField,<init>,57,/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,iUnitMillis = unitMillis;
2,org.joda.time.field.ImpreciseDateTimeField,<init>,58,/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,iDurationField = new LinkedDurationField(type.getDurationType());
2,org.joda.time.field.ImpreciseDateTimeField,<init>,59,/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,}
2,org.joda.time.field.ImpreciseDateTimeField,getDurationField,138,/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,return iDurationField;
2,org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField,<init>,152,/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,LinkedDurationField(DurationFieldType type) {
2,org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField,<init>,153,/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,super(type);
2,org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField,<init>,154,/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,}
2,org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField,getUnitMillis,161,/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java,return iUnitMillis;
2,org.joda.time.field.MillisDurationField,<clinit>,38,/src/main/java/org/joda/time/field/MillisDurationField.java,public static final DurationField INSTANCE = new MillisDurationField();
2,org.joda.time.field.MillisDurationField,<init>,44,/src/main/java/org/joda/time/field/MillisDurationField.java,super();
2,org.joda.time.field.MillisDurationField,<init>,45,/src/main/java/org/joda/time/field/MillisDurationField.java,}
2,org.joda.time.field.MillisDurationField,getType,49,/src/main/java/org/joda/time/field/MillisDurationField.java,return DurationFieldType.millis();
2,org.joda.time.field.MillisDurationField,getUnitMillis,80,/src/main/java/org/joda/time/field/MillisDurationField.java,return 1;
2,org.joda.time.field.MillisDurationField,hashCode,155,/src/main/java/org/joda/time/field/MillisDurationField.java,return (int) getUnitMillis();
2,org.joda.time.field.MillisDurationField,isPrecise,71,/src/main/java/org/joda/time/field/MillisDurationField.java,return true;
2,org.joda.time.field.MillisDurationField,isSupported,62,/src/main/java/org/joda/time/field/MillisDurationField.java,return true;
2,org.joda.time.field.OffsetDateTimeField,<init>,47,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,"this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);"
2,org.joda.time.field.OffsetDateTimeField,<init>,48,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,}
2,org.joda.time.field.OffsetDateTimeField,<init>,59,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,"this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);"
2,org.joda.time.field.OffsetDateTimeField,<init>,60,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,}
2,org.joda.time.field.OffsetDateTimeField,<init>,74,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,"super(field, type);"
2,org.joda.time.field.OffsetDateTimeField,<init>,76,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,if (offset == 0) {
2,org.joda.time.field.OffsetDateTimeField,<init>,80,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,iOffset = offset;
2,org.joda.time.field.OffsetDateTimeField,<init>,82,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,if (minValue < (field.getMinimumValue() + offset)) {
2,org.joda.time.field.OffsetDateTimeField,<init>,83,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,iMin = field.getMinimumValue() + offset;
2,org.joda.time.field.OffsetDateTimeField,<init>,87,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,if (maxValue > (field.getMaximumValue() + offset)) {
2,org.joda.time.field.OffsetDateTimeField,<init>,88,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,iMax = field.getMaximumValue() + offset;
2,org.joda.time.field.OffsetDateTimeField,<init>,92,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,}
2,org.joda.time.field.OffsetDateTimeField,getLeapDurationField,166,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,return getWrappedField().getLeapDurationField();
2,org.joda.time.field.OffsetDateTimeField,getMaximumValue,184,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,return iMax;
2,org.joda.time.field.OffsetDateTimeField,getMinimumValue,175,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,return iMin;
2,org.joda.time.field.OffsetDateTimeField,set,153,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,"FieldUtils.verifyValueBounds(this, value, iMin, iMax);"
2,org.joda.time.field.OffsetDateTimeField,set,154,/src/main/java/org/joda/time/field/OffsetDateTimeField.java,"return super.set(instant, value - iOffset);"
2,org.joda.time.field.PreciseDateTimeField,<init>,58,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,"super(type, unit);"
2,org.joda.time.field.PreciseDateTimeField,<init>,60,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,if (!range.isPrecise()) {
2,org.joda.time.field.PreciseDateTimeField,<init>,64,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,long rangeMillis = range.getUnitMillis();
2,org.joda.time.field.PreciseDateTimeField,<init>,65,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,iRange = (int)(rangeMillis / getUnitMillis());
2,org.joda.time.field.PreciseDateTimeField,<init>,66,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,if (iRange < 2) {
2,org.joda.time.field.PreciseDateTimeField,<init>,70,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,iRangeField = range;
2,org.joda.time.field.PreciseDateTimeField,<init>,71,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,}
2,org.joda.time.field.PreciseDateTimeField,get,80,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,if (instant >= 0) {
2,org.joda.time.field.PreciseDateTimeField,get,83,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);
2,org.joda.time.field.PreciseDateTimeField,getMaximumValue,132,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,return iRange - 1;
2,org.joda.time.field.PreciseDateTimeField,getRangeDurationField,123,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,return iRangeField;
2,org.joda.time.field.PreciseDateTimeField,set,112,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,"FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());"
2,org.joda.time.field.PreciseDateTimeField,set,113,/src/main/java/org/joda/time/field/PreciseDateTimeField.java,return instant + (value - get(instant)) * iUnitMillis;
2,org.joda.time.field.PreciseDurationDateTimeField,<init>,49,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,super(type);
2,org.joda.time.field.PreciseDurationDateTimeField,<init>,51,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,if (!unit.isPrecise()) {
2,org.joda.time.field.PreciseDurationDateTimeField,<init>,55,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,iUnitMillis = unit.getUnitMillis();
2,org.joda.time.field.PreciseDurationDateTimeField,<init>,56,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,if (iUnitMillis < 1) {
2,org.joda.time.field.PreciseDurationDateTimeField,<init>,60,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,iUnitField = unit;
2,org.joda.time.field.PreciseDurationDateTimeField,<init>,61,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,}
2,org.joda.time.field.PreciseDurationDateTimeField,getDurationField,142,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return iUnitField;
2,org.joda.time.field.PreciseDurationDateTimeField,getMaximumValueForSet,164,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return getMaximumValue(instant);
2,org.joda.time.field.PreciseDurationDateTimeField,getMinimumValue,151,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return 0;
2,org.joda.time.field.PreciseDurationDateTimeField,getUnitMillis,155,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return iUnitMillis;
2,org.joda.time.field.PreciseDurationDateTimeField,roundFloor,93,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,if (instant >= 0) {
2,org.joda.time.field.PreciseDurationDateTimeField,roundFloor,96,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,instant += 1;
2,org.joda.time.field.PreciseDurationDateTimeField,roundFloor,97,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return instant - instant % iUnitMillis - iUnitMillis;
2,org.joda.time.field.PreciseDurationDateTimeField,set,79,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,"FieldUtils.verifyValueBounds(this, value, getMinimumValue(),"
2,org.joda.time.field.PreciseDurationDateTimeField,set,81,/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java,return instant + (value - get(instant)) * iUnitMillis;
2,org.joda.time.field.PreciseDurationField,<init>,43,/src/main/java/org/joda/time/field/PreciseDurationField.java,super(type);
2,org.joda.time.field.PreciseDurationField,<init>,44,/src/main/java/org/joda/time/field/PreciseDurationField.java,iUnitMillis = unitMillis;
2,org.joda.time.field.PreciseDurationField,<init>,45,/src/main/java/org/joda/time/field/PreciseDurationField.java,}
2,org.joda.time.field.PreciseDurationField,getUnitMillis,63,/src/main/java/org/joda/time/field/PreciseDurationField.java,return iUnitMillis;
2,org.joda.time.field.PreciseDurationField,hashCode,142,/src/main/java/org/joda/time/field/PreciseDurationField.java,long millis = iUnitMillis;
2,org.joda.time.field.PreciseDurationField,hashCode,143,/src/main/java/org/joda/time/field/PreciseDurationField.java,int hash = (int) (millis ^ (millis >>> 32));
2,org.joda.time.field.PreciseDurationField,hashCode,144,/src/main/java/org/joda/time/field/PreciseDurationField.java,hash += getType().hashCode();
2,org.joda.time.field.PreciseDurationField,hashCode,145,/src/main/java/org/joda/time/field/PreciseDurationField.java,return hash;
2,org.joda.time.field.PreciseDurationField,isPrecise,54,/src/main/java/org/joda/time/field/PreciseDurationField.java,return true;
2,org.joda.time.field.RemainderDateTimeField,<init>,82,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,"super(field, type);"
2,org.joda.time.field.RemainderDateTimeField,<init>,83,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,if (divisor < 2) {
2,org.joda.time.field.RemainderDateTimeField,<init>,86,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,iRangeField = rangeField;
2,org.joda.time.field.RemainderDateTimeField,<init>,87,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,iDurationField = field.getDurationField();
2,org.joda.time.field.RemainderDateTimeField,<init>,88,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,iDivisor = divisor;
2,org.joda.time.field.RemainderDateTimeField,<init>,89,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,}
2,org.joda.time.field.RemainderDateTimeField,<init>,98,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,"this(dividedField, dividedField.getType());"
2,org.joda.time.field.RemainderDateTimeField,<init>,99,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,}
2,org.joda.time.field.RemainderDateTimeField,<init>,109,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,"this(dividedField, dividedField.getWrappedField().getDurationField(), type);"
2,org.joda.time.field.RemainderDateTimeField,<init>,110,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,}
2,org.joda.time.field.RemainderDateTimeField,<init>,122,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,"super(dividedField.getWrappedField(), type);"
2,org.joda.time.field.RemainderDateTimeField,<init>,123,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,iDivisor = dividedField.iDivisor;
2,org.joda.time.field.RemainderDateTimeField,<init>,124,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,iDurationField = durationField;
2,org.joda.time.field.RemainderDateTimeField,<init>,125,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,iRangeField = dividedField.iDurationField;
2,org.joda.time.field.RemainderDateTimeField,<init>,126,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,}
2,org.joda.time.field.RemainderDateTimeField,getDurationField,173,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,return iDurationField;
2,org.joda.time.field.RemainderDateTimeField,getMaximumValue,199,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,return iDivisor - 1;
2,org.joda.time.field.RemainderDateTimeField,getMinimumValue,189,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,return 0;
2,org.joda.time.field.RemainderDateTimeField,getRangeDurationField,180,/src/main/java/org/joda/time/field/RemainderDateTimeField.java,return iRangeField;
2,org.joda.time.field.ScaledDurationField,<init>,47,/src/main/java/org/joda/time/field/ScaledDurationField.java,"super(field, type);"
2,org.joda.time.field.ScaledDurationField,<init>,48,/src/main/java/org/joda/time/field/ScaledDurationField.java,if (scalar == 0 || scalar == 1) {
2,org.joda.time.field.ScaledDurationField,<init>,51,/src/main/java/org/joda/time/field/ScaledDurationField.java,iScalar = scalar;
2,org.joda.time.field.ScaledDurationField,<init>,52,/src/main/java/org/joda/time/field/ScaledDurationField.java,}
2,org.joda.time.field.ScaledDurationField,getUnitMillis,109,/src/main/java/org/joda/time/field/ScaledDurationField.java,return getWrappedField().getUnitMillis() * iScalar;
2,org.joda.time.field.ScaledDurationField,hashCode,147,/src/main/java/org/joda/time/field/ScaledDurationField.java,long scalar = iScalar;
2,org.joda.time.field.ScaledDurationField,hashCode,148,/src/main/java/org/joda/time/field/ScaledDurationField.java,int hash = (int) (scalar ^ (scalar >>> 32));
2,org.joda.time.field.ScaledDurationField,hashCode,149,/src/main/java/org/joda/time/field/ScaledDurationField.java,hash += getType().hashCode();
2,org.joda.time.field.ScaledDurationField,hashCode,150,/src/main/java/org/joda/time/field/ScaledDurationField.java,hash += getWrappedField().hashCode();
2,org.joda.time.field.ScaledDurationField,hashCode,151,/src/main/java/org/joda/time/field/ScaledDurationField.java,return hash;
2,org.joda.time.field.SkipDateTimeField,<init>,54,/src/main/java/org/joda/time/field/SkipDateTimeField.java,"this(chronology, field, 0);"
2,org.joda.time.field.SkipDateTimeField,<init>,55,/src/main/java/org/joda/time/field/SkipDateTimeField.java,}
2,org.joda.time.field.SkipDateTimeField,<init>,65,/src/main/java/org/joda/time/field/SkipDateTimeField.java,super(field);
2,org.joda.time.field.SkipDateTimeField,<init>,66,/src/main/java/org/joda/time/field/SkipDateTimeField.java,iChronology = chronology;
2,org.joda.time.field.SkipDateTimeField,<init>,67,/src/main/java/org/joda/time/field/SkipDateTimeField.java,int min = super.getMinimumValue();
2,org.joda.time.field.SkipDateTimeField,<init>,68,/src/main/java/org/joda/time/field/SkipDateTimeField.java,if (min < skip) {
2,org.joda.time.field.SkipDateTimeField,<init>,69,/src/main/java/org/joda/time/field/SkipDateTimeField.java,iMinValue = min - 1;
2,org.joda.time.field.SkipDateTimeField,<init>,75,/src/main/java/org/joda/time/field/SkipDateTimeField.java,iSkip = skip;
2,org.joda.time.field.SkipDateTimeField,<init>,76,/src/main/java/org/joda/time/field/SkipDateTimeField.java,}
2,org.joda.time.field.SkipDateTimeField,get,80,/src/main/java/org/joda/time/field/SkipDateTimeField.java,int value = super.get(millis);
2,org.joda.time.field.SkipDateTimeField,get,81,/src/main/java/org/joda/time/field/SkipDateTimeField.java,if (value <= iSkip) {
2,org.joda.time.field.SkipDateTimeField,get,82,/src/main/java/org/joda/time/field/SkipDateTimeField.java,value--;
2,org.joda.time.field.SkipDateTimeField,get,84,/src/main/java/org/joda/time/field/SkipDateTimeField.java,return value;
2,org.joda.time.field.SkipDateTimeField,getMinimumValue,100,/src/main/java/org/joda/time/field/SkipDateTimeField.java,return iMinValue;
2,org.joda.time.field.SkipUndoDateTimeField,<init>,53,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,"this(chronology, field, 0);"
2,org.joda.time.field.SkipUndoDateTimeField,<init>,54,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,}
2,org.joda.time.field.SkipUndoDateTimeField,<init>,64,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,super(field);
2,org.joda.time.field.SkipUndoDateTimeField,<init>,65,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,iChronology = chronology;
2,org.joda.time.field.SkipUndoDateTimeField,<init>,66,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,int min = super.getMinimumValue();
2,org.joda.time.field.SkipUndoDateTimeField,<init>,67,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,if (min < skip) {
2,org.joda.time.field.SkipUndoDateTimeField,<init>,68,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,iMinValue = min + 1;
2,org.joda.time.field.SkipUndoDateTimeField,<init>,74,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,iSkip = skip;
2,org.joda.time.field.SkipUndoDateTimeField,<init>,75,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,}
2,org.joda.time.field.SkipUndoDateTimeField,getMinimumValue,95,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,return iMinValue;
2,org.joda.time.field.SkipUndoDateTimeField,set,87,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,"FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());"
2,org.joda.time.field.SkipUndoDateTimeField,set,88,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,if (value <= iSkip) {
2,org.joda.time.field.SkipUndoDateTimeField,set,89,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,value--;
2,org.joda.time.field.SkipUndoDateTimeField,set,91,/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java,"return super.set(millis, value);"
2,org.joda.time.field.UnsupportedDurationField,<init>,70,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,private UnsupportedDurationField(DurationFieldType type) {
2,org.joda.time.field.UnsupportedDurationField,<init>,71,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,iType = type;
2,org.joda.time.field.UnsupportedDurationField,<init>,72,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,}
2,org.joda.time.field.UnsupportedDurationField,getInstance,49,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,if (cCache == null) {
2,org.joda.time.field.UnsupportedDurationField,getInstance,50,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,"cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);"
2,org.joda.time.field.UnsupportedDurationField,getInstance,51,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,field = null;
2,org.joda.time.field.UnsupportedDurationField,getInstance,53,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,field = cCache.get(type);
2,org.joda.time.field.UnsupportedDurationField,getInstance,55,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,if (field == null) {
2,org.joda.time.field.UnsupportedDurationField,getInstance,56,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,field = new UnsupportedDurationField(type);
2,org.joda.time.field.UnsupportedDurationField,getInstance,57,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,"cCache.put(type, field);"
2,org.joda.time.field.UnsupportedDurationField,getInstance,59,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,return field;
2,org.joda.time.field.UnsupportedDurationField,getUnitMillis,218,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,return 0;
2,org.joda.time.field.UnsupportedDurationField,isSupported,92,/src/main/java/org/joda/time/field/UnsupportedDurationField.java,return false;
2,org.joda.time.field.ZeroIsMaxDateTimeField,<init>,46,/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java,"super(field, type);"
2,org.joda.time.field.ZeroIsMaxDateTimeField,<init>,47,/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java,if (field.getMinimumValue() != 0) {
2,org.joda.time.field.ZeroIsMaxDateTimeField,<init>,50,/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java,}
2,org.joda.time.field.ZeroIsMaxDateTimeField,getLeapDurationField,102,/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java,return getWrappedField().getLeapDurationField();
2,org.joda.time.tz.CachedDateTimeZone,<clinit>,39,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,"i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");"
2,org.joda.time.tz.CachedDateTimeZone,<clinit>,42,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,}
2,org.joda.time.tz.CachedDateTimeZone,<clinit>,45,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (i == null) {
2,org.joda.time.tz.CachedDateTimeZone,<clinit>,48,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,cacheSize = 512; // (1 << 9)
2,org.joda.time.tz.CachedDateTimeZone,<clinit>,61,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,cInfoCacheMask = cacheSize - 1;
2,org.joda.time.tz.CachedDateTimeZone,<clinit>,62,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,}
2,org.joda.time.tz.CachedDateTimeZone,<init>,84,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,private final transient Info[] iInfoCache = new Info[cInfoCacheMask + 1];
2,org.joda.time.tz.CachedDateTimeZone,<init>,87,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,super(zone.getID());
2,org.joda.time.tz.CachedDateTimeZone,<init>,88,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iZone = zone;
2,org.joda.time.tz.CachedDateTimeZone,<init>,89,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,}
2,org.joda.time.tz.CachedDateTimeZone,createInfo,152,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,long periodStart = millis & (0xffffffffL << 32);
2,org.joda.time.tz.CachedDateTimeZone,createInfo,153,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,"Info info = new Info(iZone, periodStart);"
2,org.joda.time.tz.CachedDateTimeZone,createInfo,155,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,long end = periodStart | 0xffffffffL;
2,org.joda.time.tz.CachedDateTimeZone,createInfo,156,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,Info chain = info;
2,org.joda.time.tz.CachedDateTimeZone,createInfo,158,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,long next = iZone.nextTransition(periodStart);
2,org.joda.time.tz.CachedDateTimeZone,createInfo,159,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (next == periodStart || next > end) {
2,org.joda.time.tz.CachedDateTimeZone,createInfo,160,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,break;
2,org.joda.time.tz.CachedDateTimeZone,createInfo,166,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return info;
2,org.joda.time.tz.CachedDateTimeZone,forZone,68,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (zone instanceof CachedDateTimeZone) {
2,org.joda.time.tz.CachedDateTimeZone,forZone,71,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return new CachedDateTimeZone(zone);
2,org.joda.time.tz.CachedDateTimeZone,getInfo,140,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,int period = (int)(millis >> 32);
2,org.joda.time.tz.CachedDateTimeZone,getInfo,141,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,Info[] cache = iInfoCache;
2,org.joda.time.tz.CachedDateTimeZone,getInfo,142,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,int index = period & cInfoCacheMask;
2,org.joda.time.tz.CachedDateTimeZone,getInfo,143,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,Info info = cache[index];
2,org.joda.time.tz.CachedDateTimeZone,getInfo,144,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (info == null || (int)((info.iPeriodStart >> 32)) != period) {
2,org.joda.time.tz.CachedDateTimeZone,getInfo,145,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,info = createInfo(millis);
2,org.joda.time.tz.CachedDateTimeZone,getInfo,146,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,cache[index] = info;
2,org.joda.time.tz.CachedDateTimeZone,getInfo,148,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return info;
2,org.joda.time.tz.CachedDateTimeZone,getOffset,103,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return getInfo(instant).getOffset(instant);
2,org.joda.time.tz.CachedDateTimeZone,hashCode,123,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iZone.hashCode();
2,org.joda.time.tz.CachedDateTimeZone$Info,<init>,177,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,private int iOffset = Integer.MIN_VALUE;
2,org.joda.time.tz.CachedDateTimeZone$Info,<init>,178,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,private int iStandardOffset = Integer.MIN_VALUE;
2,org.joda.time.tz.CachedDateTimeZone$Info,<init>,180,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,"Info(DateTimeZone zone, long periodStart) {"
2,org.joda.time.tz.CachedDateTimeZone$Info,<init>,181,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iPeriodStart = periodStart;
2,org.joda.time.tz.CachedDateTimeZone$Info,<init>,182,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iZoneRef = zone;
2,org.joda.time.tz.CachedDateTimeZone$Info,<init>,183,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,}
2,org.joda.time.tz.CachedDateTimeZone$Info,getOffset,196,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {
2,org.joda.time.tz.CachedDateTimeZone$Info,getOffset,197,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,if (iOffset == Integer.MIN_VALUE) {
2,org.joda.time.tz.CachedDateTimeZone$Info,getOffset,198,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,iOffset = iZoneRef.getOffset(iPeriodStart);
2,org.joda.time.tz.CachedDateTimeZone$Info,getOffset,200,/src/main/java/org/joda/time/tz/CachedDateTimeZone.java,return iOffset;
2,org.joda.time.tz.DateTimeZoneBuilder,readFrom,110,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,switch (in.readUnsignedByte()) {
2,org.joda.time.tz.DateTimeZoneBuilder,readFrom,119,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));"
2,org.joda.time.tz.DateTimeZoneBuilder,readFrom,95,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (in instanceof DataInput) {
2,org.joda.time.tz.DateTimeZoneBuilder,readFrom,98,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return readFrom((DataInput)new DataInputStream(in), id);"
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,183,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int v = in.readUnsignedByte();
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,184,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,switch (v >> 6) {
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,187,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,v = (v << (32 - 6)) >> (32 - 6);
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,188,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return v * (30 * 60000L);
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,192,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,v = (v << (32 - 6)) >> (32 - 30);
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,193,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,v |= (in.readUnsignedByte()) << 16;
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,194,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,v |= (in.readUnsignedByte()) << 8;
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,195,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,v |= (in.readUnsignedByte());
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,196,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return v * 60000L;
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,200,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long w = (((long)v) << (64 - 6)) >> (64 - 38);
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,201,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,w |= (in.readUnsignedByte()) << 24;
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,202,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,w |= (in.readUnsignedByte()) << 16;
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,203,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,w |= (in.readUnsignedByte()) << 8;
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,204,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,w |= (in.readUnsignedByte());
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,205,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return w * 1000L;
2,org.joda.time.tz.DateTimeZoneBuilder,readMillis,209,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return in.readLong();
2,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,<init>,1179,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,super(id);
2,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,<init>,1180,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStandardOffset = standardOffset;
2,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,<init>,1181,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStartRecurrence = startRecurrence;
2,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,<init>,1182,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iEndRecurrence = endRecurrence;
2,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,<init>,1183,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
2,org.joda.time.tz.DateTimeZoneBuilder$DSTZone,readFrom,1169,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return new DSTZone(id, (int)readMillis(in),"
2,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,504,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,{
2,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,505,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (mode != 'u' && mode != 'w' && mode != 's') {
2,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,509,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iMode = mode;
2,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,510,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iMonthOfYear = monthOfYear;
2,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,511,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iDayOfMonth = dayOfMonth;
2,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,512,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iDayOfWeek = dayOfWeek;
2,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,513,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iAdvance = advanceDayOfWeek;
2,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,514,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iMillisOfDay = millisOfDay;
2,org.joda.time.tz.DateTimeZoneBuilder$OfYear,<init>,515,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
2,org.joda.time.tz.DateTimeZoneBuilder$OfYear,readFrom,482,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return new OfYear((char)in.readUnsignedByte(),"
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1503,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,super(id);
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1504,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iTransitions = transitions;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1505,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iWallOffsets = wallOffsets;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1506,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iStandardOffsets = standardOffsets;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1507,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iNameKeys = nameKeys;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1508,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iTailZone = tailZone;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,<init>,1509,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1531,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long[] transitions = iTransitions;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1532,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"int i = Arrays.binarySearch(transitions, instant);"
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1533,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i >= 0) {
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1536,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,i = ~i;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1537,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i < transitions.length) {
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1538,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i > 0) {
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1539,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iWallOffsets[i - 1];
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1543,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iTailZone == null) {
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,getOffset,1544,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return iWallOffsets[i - 1];
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1573,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long[] transitions = iTransitions;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1574,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"int i = Arrays.binarySearch(transitions, instant);"
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1575,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,i = (i >= 0) ? (i + 1) : ~i;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1576,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (i < transitions.length) {
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1577,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return transitions[i];
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1579,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (iTailZone == null) {
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,nextTransition,1580,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return instant;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1344,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int poolSize = in.readUnsignedShort();
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1345,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String[] pool = new String[poolSize];
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1346,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i=0; i<poolSize; i++) {
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1347,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,pool[i] = in.readUTF();
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1350,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int size = in.readInt();
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1351,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,long[] transitions = new long[size];
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1352,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int[] wallOffsets = new int[size];
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1353,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,int[] standardOffsets = new int[size];
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1354,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,String[] nameKeys = new String[size];
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1356,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,for (int i=0; i<size; i++) {
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1357,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,transitions[i] = readMillis(in);
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1358,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,wallOffsets[i] = (int)readMillis(in);
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1359,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,standardOffsets[i] = (int)readMillis(in);
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1362,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (poolSize < 256) {
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1363,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,index = in.readUnsignedByte();
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1367,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,nameKeys[i] = pool[index];
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1370,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1373,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,DSTZone tailZone = null;
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1374,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,if (in.readBoolean()) {
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1375,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"tailZone = DSTZone.readFrom(in, id);"
2,org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone,readFrom,1378,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,return new PrecalculatedZone
2,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,<init>,747,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"Recurrence(OfYear ofYear, String nameKey, int saveMillis) {"
2,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,<init>,748,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iOfYear = ofYear;
2,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,<init>,749,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iNameKey = nameKey;
2,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,<init>,750,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,iSaveMillis = saveMillis;
2,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,<init>,751,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,}
2,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,readFrom,740,/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java,"return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));"
2,org.joda.time.tz.DefaultNameProvider,<init>,37,/src/main/java/org/joda/time/tz/DefaultNameProvider.java,"private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();"
2,org.joda.time.tz.DefaultNameProvider,<init>,39,/src/main/java/org/joda/time/tz/DefaultNameProvider.java,public DefaultNameProvider() {
2,org.joda.time.tz.DefaultNameProvider,<init>,40,/src/main/java/org/joda/time/tz/DefaultNameProvider.java,}
2,org.joda.time.tz.DefaultNameProvider,createCache,99,/src/main/java/org/joda/time/tz/DefaultNameProvider.java,return new HashMap(7);
2,org.joda.time.tz.FixedDateTimeZone,<init>,38,/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,super(id);
2,org.joda.time.tz.FixedDateTimeZone,<init>,39,/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,iNameKey = nameKey;
2,org.joda.time.tz.FixedDateTimeZone,<init>,40,/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,iWallOffset = wallOffset;
2,org.joda.time.tz.FixedDateTimeZone,<init>,41,/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,iStandardOffset = standardOffset;
2,org.joda.time.tz.FixedDateTimeZone,<init>,42,/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,}
2,org.joda.time.tz.FixedDateTimeZone,equals,88,/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,if (this == obj) {
2,org.joda.time.tz.FixedDateTimeZone,equals,89,/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,return true;
2,org.joda.time.tz.FixedDateTimeZone,hashCode,102,/src/main/java/org/joda/time/tz/FixedDateTimeZone.java,return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
2,org.joda.time.tz.ZoneInfoProvider,<init>,82,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"this(resourcePath, null, false);"
2,org.joda.time.tz.ZoneInfoProvider,<init>,83,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
2,org.joda.time.tz.ZoneInfoProvider,<init>,106,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,{
2,org.joda.time.tz.ZoneInfoProvider,<init>,107,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (resourcePath == null) {
2,org.joda.time.tz.ZoneInfoProvider,<init>,110,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"if (!resourcePath.endsWith(""/"")) {"
2,org.joda.time.tz.ZoneInfoProvider,<init>,111,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,resourcePath += '/';
2,org.joda.time.tz.ZoneInfoProvider,<init>,114,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,iFileDir = null;
2,org.joda.time.tz.ZoneInfoProvider,<init>,115,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,iResourcePath = resourcePath;
2,org.joda.time.tz.ZoneInfoProvider,<init>,117,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (loader == null && !favorSystemLoader) {
2,org.joda.time.tz.ZoneInfoProvider,<init>,118,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,loader = getClass().getClassLoader();
2,org.joda.time.tz.ZoneInfoProvider,<init>,121,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,iLoader = loader;
2,org.joda.time.tz.ZoneInfoProvider,<init>,123,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));"
2,org.joda.time.tz.ZoneInfoProvider,<init>,124,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
2,org.joda.time.tz.ZoneInfoProvider,getAvailableIDs,173,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return new TreeSet<String>(iZoneInfoMap.keySet());
2,org.joda.time.tz.ZoneInfoProvider,getZone,135,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (id == null) {
2,org.joda.time.tz.ZoneInfoProvider,getZone,139,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,Object obj = iZoneInfoMap.get(id);
2,org.joda.time.tz.ZoneInfoProvider,getZone,140,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (obj == null) {
2,org.joda.time.tz.ZoneInfoProvider,getZone,144,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (id.equals(obj)) {
2,org.joda.time.tz.ZoneInfoProvider,getZone,146,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return loadZoneData(id);
2,org.joda.time.tz.ZoneInfoProvider,getZone,149,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (obj instanceof SoftReference<?>) {
2,org.joda.time.tz.ZoneInfoProvider,getZone,151,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
2,org.joda.time.tz.ZoneInfoProvider,getZone,152,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,DateTimeZone tz = ref.get();
2,org.joda.time.tz.ZoneInfoProvider,getZone,153,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (tz != null) {
2,org.joda.time.tz.ZoneInfoProvider,getZone,154,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return tz;
2,org.joda.time.tz.ZoneInfoProvider,loadZoneData,223,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,InputStream in = null;
2,org.joda.time.tz.ZoneInfoProvider,loadZoneData,225,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,in = openResource(id);
2,org.joda.time.tz.ZoneInfoProvider,loadZoneData,226,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);"
2,org.joda.time.tz.ZoneInfoProvider,loadZoneData,227,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));"
2,org.joda.time.tz.ZoneInfoProvider,loadZoneData,228,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return tz;
2,org.joda.time.tz.ZoneInfoProvider,loadZoneData,235,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (in != null) {
2,org.joda.time.tz.ZoneInfoProvider,loadZoneData,236,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,in.close();
2,org.joda.time.tz.ZoneInfoProvider,loadZoneData,239,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
2,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,251,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"Map<String, Object> map = new ConcurrentHashMap<String, Object>();"
2,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,252,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,DataInputStream din = new DataInputStream(in);
2,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,254,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"readZoneInfoMap(din, map);"
2,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,257,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,din.close();
2,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,259,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
2,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,261,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));"
2,org.joda.time.tz.ZoneInfoProvider,loadZoneInfoMap,262,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return map;
2,org.joda.time.tz.ZoneInfoProvider,openResource,195,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (iFileDir != null) {
2,org.joda.time.tz.ZoneInfoProvider,openResource,198,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,String path = iResourcePath.concat(name);
2,org.joda.time.tz.ZoneInfoProvider,openResource,199,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (iLoader != null) {
2,org.joda.time.tz.ZoneInfoProvider,openResource,200,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,in = iLoader.getResourceAsStream(path);
2,org.joda.time.tz.ZoneInfoProvider,openResource,204,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,if (in == null) {
2,org.joda.time.tz.ZoneInfoProvider,openResource,213,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,return in;
2,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,273,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,int size = din.readUnsignedShort();
2,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,274,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,String[] pool = new String[size];
2,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,275,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,for (int i=0; i<size; i++) {
2,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,276,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,pool[i] = din.readUTF().intern();
2,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,280,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,size = din.readUnsignedShort();
2,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,281,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,for (int i=0; i<size; i++) {
2,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,283,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,"zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);"
2,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,286,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
2,org.joda.time.tz.ZoneInfoProvider,readZoneInfoMap,288,/src/main/java/org/joda/time/tz/ZoneInfoProvider.java,}
