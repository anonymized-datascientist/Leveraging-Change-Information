diff --git a/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java b/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java
index c693b1404..f2475922e 100644
--- a/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java
+++ b/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java
@@ -20,6 +20,12 @@ package org.apache.commons.math3.distribution;
 import java.util.ArrayList;
 import java.util.Collections;
 
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
 import org.apache.commons.math3.TestUtils;
 import org.apache.commons.math3.util.FastMath;
 import org.apache.commons.math3.analysis.UnivariateFunction;
@@ -464,4 +470,42 @@ public abstract class RealDistributionAbstractTest {
         this.tolerance = tolerance;
     }
 
+    @Test
+    public void testDistributionClone()
+        throws IOException,
+               ClassNotFoundException {
+        // Construct a distribution and initialize its internal random
+        // generator, using a fixed seed for deterministic results.
+        distribution.reseedRandomGenerator(123);
+        distribution.sample();
+
+        // Clone the distribution.
+        final RealDistribution cloned = deepClone();
+
+        // Make sure they still produce the same samples.
+        final double s1 = distribution.sample();
+        final double s2 = cloned.sample();
+        Assert.assertEquals(s1, s2, 0d);
+    }
+
+    /**
+     * Serialization and deserialization loop of the {@link #distribution}.
+     */
+    private RealDistribution deepClone()
+        throws IOException,
+               ClassNotFoundException {
+        // Serialize to byte array.
+        final ByteArrayOutputStream bOut = new ByteArrayOutputStream();
+        final ObjectOutputStream oOut = new ObjectOutputStream(bOut);
+        oOut.writeObject(distribution);
+        final byte[] data = bOut.toByteArray();
+
+        // Deserialize from byte array.
+        final ByteArrayInputStream bIn = new ByteArrayInputStream(data);
+        final ObjectInputStream oIn = new ObjectInputStream(bIn);
+        final Object clone = oIn.readObject();
+        oIn.close();
+
+        return (RealDistribution) clone;
+    }
 }
