diff --git a/src/test/org/apache/commons/math/complex/ComplexTest.java b/src/test/org/apache/commons/math/complex/ComplexTest.java
index d1ee0163e..4977b7c64 100644
--- a/src/test/org/apache/commons/math/complex/ComplexTest.java
+++ b/src/test/org/apache/commons/math/complex/ComplexTest.java
@@ -13,42 +13,53 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.commons.math.complex;
 
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 /**
  * @version $Revision$ $Date$
  */
 public class ComplexTest extends TestCase {
-    
+
+
+public void testAddNaN() {
+    Complex x = new Complex(3.0, 4.0);
+    Complex z = x.add(Complex.NaN);
+    Assert.assertTrue(z.isNaN());
+    z = new Complex(1, nan);
+    Complex w = x.add(z);
+    Assert.assertTrue(Double.isNaN(w.getReal()));
+    Assert.assertTrue(Double.isNaN(w.getImaginary()));
+}
+
+    private double nan = Double.NaN;
+
     public void testConstructor() {
         Complex z = new Complex(3.0, 4.0);
         assertEquals(3.0, z.getReal(), 1.0e-5);
         assertEquals(4.0, z.getImaginary(), 1.0e-5);
     }
-    
+
     public void testConstructorNaN() {
         Complex z = new Complex(3.0, Double.NaN);
         assertTrue(z.isNaN());
-
         z = new Complex(Double.NaN, 4.0);
         assertTrue(z.isNaN());
-
         z = new Complex(3.0, 4.0);
         assertFalse(z.isNaN());
     }
-    
+
     public void testAbs() {
         Complex z = new Complex(3.0, 4.0);
         assertEquals(5.0, z.abs(), 1.0e-5);
     }
-    
+
     public void testAbsNaN() {
         assertTrue(Double.isNaN(Complex.NaN.abs()));
     }
-    
+
     public void testAdd() {
         Complex x = new Complex(3.0, 4.0);
         Complex y = new Complex(5.0, 6.0);
@@ -56,25 +67,19 @@ public class ComplexTest extends TestCase {
         assertEquals(8.0, z.getReal(), 1.0e-5);
         assertEquals(10.0, z.getImaginary(), 1.0e-5);
     }
-    
-    public void testAddNaN() {
-        Complex x = new Complex(3.0, 4.0);
-        Complex z = x.add(Complex.NaN);
-        assertTrue(z.isNaN());
-    }
-    
+
     public void testConjugate() {
         Complex x = new Complex(3.0, 4.0);
         Complex z = x.conjugate();
         assertEquals(3.0, z.getReal(), 1.0e-5);
         assertEquals(-4.0, z.getImaginary(), 1.0e-5);
     }
-    
+
     public void testConjugateNaN() {
         Complex z = Complex.NaN.conjugate();
         assertTrue(z.isNaN());
     }
-    
+
     public void testDivide() {
         Complex x = new Complex(3.0, 4.0);
         Complex y = new Complex(5.0, 6.0);
@@ -82,13 +87,13 @@ public class ComplexTest extends TestCase {
         assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);
         assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);
     }
-    
+
     public void testDivideNaN() {
         Complex x = new Complex(3.0, 4.0);
         Complex z = x.divide(Complex.NaN);
         assertTrue(z.isNaN());
     }
-    
+
     public void testMultiply() {
         Complex x = new Complex(3.0, 4.0);
         Complex y = new Complex(5.0, 6.0);
@@ -96,25 +101,25 @@ public class ComplexTest extends TestCase {
         assertEquals(-9.0, z.getReal(), 1.0e-5);
         assertEquals(38.0, z.getImaginary(), 1.0e-5);
     }
-    
+
     public void testMultiplyNaN() {
         Complex x = new Complex(3.0, 4.0);
         Complex z = x.multiply(Complex.NaN);
         assertTrue(z.isNaN());
     }
-    
+
     public void testNegate() {
         Complex x = new Complex(3.0, 4.0);
         Complex z = x.negate();
         assertEquals(-3.0, z.getReal(), 1.0e-5);
         assertEquals(-4.0, z.getImaginary(), 1.0e-5);
     }
-    
+
     public void testNegateNaN() {
         Complex z = Complex.NaN.negate();
         assertTrue(z.isNaN());
     }
-    
+
     public void testSubtract() {
         Complex x = new Complex(3.0, 4.0);
         Complex y = new Complex(5.0, 6.0);
@@ -122,46 +127,46 @@ public class ComplexTest extends TestCase {
         assertEquals(-2.0, z.getReal(), 1.0e-5);
         assertEquals(-2.0, z.getImaginary(), 1.0e-5);
     }
-    
+
     public void testSubtractNaN() {
         Complex x = new Complex(3.0, 4.0);
         Complex z = x.subtract(Complex.NaN);
         assertTrue(z.isNaN());
     }
-    
+
     public void testEqualsNull() {
         Complex x = new Complex(3.0, 4.0);
         assertFalse(x.equals(null));
     }
-    
+
     public void testEqualsClass() {
         Complex x = new Complex(3.0, 4.0);
         assertFalse(x.equals(this));
     }
-    
+
     public void testEqualsSame() {
         Complex x = new Complex(3.0, 4.0);
         assertTrue(x.equals(x));
     }
-    
+
     public void testEqualsTrue() {
         Complex x = new Complex(3.0, 4.0);
         Complex y = new Complex(3.0, 4.0);
         assertTrue(x.equals(y));
     }
-    
+
     public void testEqualsRealDifference() {
         Complex x = new Complex(0.0, 0.0);
         Complex y = new Complex(0.0 + Double.MIN_VALUE, 0.0);
         assertFalse(x.equals(y));
     }
-    
+
     public void testEqualsImaginaryDifference() {
         Complex x = new Complex(0.0, 0.0);
         Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);
         assertFalse(x.equals(y));
     }
-    
+
     public void testEqualsNaN() {
         Complex realNaN = new Complex(Double.NaN, 0.0);
         Complex imaginaryNaN = new Complex(0.0, Double.NaN);
@@ -170,13 +175,13 @@ public class ComplexTest extends TestCase {
         assertTrue(imaginaryNaN.equals(complexNaN));
         assertTrue(realNaN.equals(complexNaN));
     }
-    
+
     public void testHashCode() {
         Complex x = new Complex(0.0, 0.0);
         Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);
-        assertFalse(x.hashCode()==y.hashCode());
+        assertFalse(x.hashCode() == y.hashCode());
         y = new Complex(0.0 + Double.MIN_VALUE, 0.0);
-        assertFalse(x.hashCode()==y.hashCode());
+        assertFalse(x.hashCode() == y.hashCode());
         Complex realNaN = new Complex(Double.NaN, 0.0);
         Complex imaginaryNaN = new Complex(0.0, Double.NaN);
         assertEquals(realNaN.hashCode(), imaginaryNaN.hashCode());
diff --git a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java
index 2bb3df5bf..3e0cc6161 100644
--- a/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java
+++ b/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java
@@ -34,7 +34,7 @@ public class NormalDistributionTest extends ContinuousDistributionAbstractTest
     }
     
     public static void main(String[] args) {
-        junit.swingui.TestRunner.run(NormalDistributionTest.class);
+        // junit.swingui.TestRunner.run(NormalDistributionTest.class);
     }
     
     //-------------- Implementations for abstract methods -----------------------
